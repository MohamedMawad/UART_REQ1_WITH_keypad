
uart_vehicle.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000387c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  0000387c  00003910  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800092  00800092  00003942  2**0
                  ALLOC
  3 .stab         00002664  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001264  00000000  00000000  00005fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000720c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000734c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000074bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009105  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ada0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b18d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b95b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 36 1a 	call	0x346c	; 0x346c <main>
      8a:	0c 94 3c 1c 	jmp	0x3878	; 0x3878 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e6       	ldi	r26, 0x6B	; 107
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d4 1b 	jmp	0x37a8	; 0x37a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e6       	ldi	r24, 0x6B	; 107
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f0 1b 	jmp	0x37e0	; 0x37e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e0 1b 	jmp	0x37c0	; 0x37c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fc 1b 	jmp	0x37f8	; 0x37f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e4 1b 	jmp	0x37c8	; 0x37c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 00 1c 	jmp	0x3800	; 0x3800 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_init>:

#include"LCD.h"



void LCD_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
   /* set the control pins as output pins*/
	DIRECTION_CTRL_PINS |=(1<<RS)|(1<<RW)|(1<<E);
     b4e:	aa e3       	ldi	r26, 0x3A	; 58
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	ea e3       	ldi	r30, 0x3A	; 58
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	8e 60       	ori	r24, 0x0E	; 14
     b5a:	8c 93       	st	X, r24
     #ifdef FIRST_PINS
	         DIRECTION_DATA_PINS|=0x0F;
	         LCD_sendCommand(BITS_4_MODES);
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     #else
	         DIRECTION_DATA_PINS|=0xF0;
     b5c:	aa e3       	ldi	r26, 0x3A	; 58
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e3       	ldi	r30, 0x3A	; 58
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 6f       	ori	r24, 0xF0	; 240
     b68:	8c 93       	st	X, r24
	         LCD_sendCommand(BITS_4_MODES);
     b6a:	82 e0       	ldi	r24, 0x02	; 2
     b6c:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
	         LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     b70:	88 e2       	ldi	r24, 0x28	; 40
     b72:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
#endif



	/*display on cursor off*/
	LCD_sendCommand(CURSOR_OFF);
     b76:	8c e0       	ldi	r24, 0x0C	; 12
     b78:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
	/* clear the screen first*/
	LCD_sendCommand(CLEAR_LCD);
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
}
     b82:	cf 91       	pop	r28
     b84:	df 91       	pop	r29
     b86:	08 95       	ret

00000b88 <LCD_sendCommand>:

void LCD_sendCommand(unit8 command){
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	c3 56       	subi	r28, 0x63	; 99
     b96:	d0 40       	sbci	r29, 0x00	; 0
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	fe 01       	movw	r30, r28
     ba4:	ed 59       	subi	r30, 0x9D	; 157
     ba6:	ff 4f       	sbci	r31, 0xFF	; 255
     ba8:	80 83       	st	Z, r24
	/*make RS=0 to send command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RS);
     baa:	ab e3       	ldi	r26, 0x3B	; 59
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	eb e3       	ldi	r30, 0x3B	; 59
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	8d 7f       	andi	r24, 0xFD	; 253
     bb6:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS ,RW);
     bb8:	ab e3       	ldi	r26, 0x3B	; 59
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	eb e3       	ldi	r30, 0x3B	; 59
     bbe:	f0 e0       	ldi	r31, 0x00	; 0
     bc0:	80 81       	ld	r24, Z
     bc2:	8b 7f       	andi	r24, 0xFB	; 251
     bc4:	8c 93       	st	X, r24
     bc6:	fe 01       	movw	r30, r28
     bc8:	e1 5a       	subi	r30, 0xA1	; 161
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e8       	ldi	r26, 0x80	; 128
     bd2:	bf e3       	ldi	r27, 0x3F	; 63
     bd4:	80 83       	st	Z, r24
     bd6:	91 83       	std	Z+1, r25	; 0x01
     bd8:	a2 83       	std	Z+2, r26	; 0x02
     bda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bdc:	8e 01       	movw	r16, r28
     bde:	05 5a       	subi	r16, 0xA5	; 165
     be0:	1f 4f       	sbci	r17, 0xFF	; 255
     be2:	fe 01       	movw	r30, r28
     be4:	e1 5a       	subi	r30, 0xA1	; 161
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	60 81       	ld	r22, Z
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	4a e7       	ldi	r20, 0x7A	; 122
     bf6:	53 e4       	ldi	r21, 0x43	; 67
     bf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	f8 01       	movw	r30, r16
     c02:	80 83       	st	Z, r24
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	a2 83       	std	Z+2, r26	; 0x02
     c08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c0a:	fe 01       	movw	r30, r28
     c0c:	e5 5a       	subi	r30, 0xA5	; 165
     c0e:	ff 4f       	sbci	r31, 0xFF	; 255
     c10:	60 81       	ld	r22, Z
     c12:	71 81       	ldd	r23, Z+1	; 0x01
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	93 81       	ldd	r25, Z+3	; 0x03
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e8       	ldi	r20, 0x80	; 128
     c1e:	5f e3       	ldi	r21, 0x3F	; 63
     c20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c24:	88 23       	and	r24, r24
     c26:	44 f4       	brge	.+16     	; 0xc38 <LCD_sendCommand+0xb0>
		__ticks = 1;
     c28:	fe 01       	movw	r30, r28
     c2a:	e7 5a       	subi	r30, 0xA7	; 167
     c2c:	ff 4f       	sbci	r31, 0xFF	; 255
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	91 83       	std	Z+1, r25	; 0x01
     c34:	80 83       	st	Z, r24
     c36:	64 c0       	rjmp	.+200    	; 0xd00 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     c38:	fe 01       	movw	r30, r28
     c3a:	e5 5a       	subi	r30, 0xA5	; 165
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	60 81       	ld	r22, Z
     c40:	71 81       	ldd	r23, Z+1	; 0x01
     c42:	82 81       	ldd	r24, Z+2	; 0x02
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	3f ef       	ldi	r19, 0xFF	; 255
     c4a:	4f e7       	ldi	r20, 0x7F	; 127
     c4c:	57 e4       	ldi	r21, 0x47	; 71
     c4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c52:	18 16       	cp	r1, r24
     c54:	0c f0       	brlt	.+2      	; 0xc58 <LCD_sendCommand+0xd0>
     c56:	43 c0       	rjmp	.+134    	; 0xcde <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c58:	fe 01       	movw	r30, r28
     c5a:	e1 5a       	subi	r30, 0xA1	; 161
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	40 e2       	ldi	r20, 0x20	; 32
     c6c:	51 e4       	ldi	r21, 0x41	; 65
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	8e 01       	movw	r16, r28
     c78:	07 5a       	subi	r16, 0xA7	; 167
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	bc 01       	movw	r22, r24
     c7e:	cd 01       	movw	r24, r26
     c80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c84:	dc 01       	movw	r26, r24
     c86:	cb 01       	movw	r24, r22
     c88:	f8 01       	movw	r30, r16
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
     c8e:	1f c0       	rjmp	.+62     	; 0xcce <LCD_sendCommand+0x146>
     c90:	fe 01       	movw	r30, r28
     c92:	e9 5a       	subi	r30, 0xA9	; 169
     c94:	ff 4f       	sbci	r31, 0xFF	; 255
     c96:	89 e1       	ldi	r24, 0x19	; 25
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c9e:	fe 01       	movw	r30, r28
     ca0:	e9 5a       	subi	r30, 0xA9	; 169
     ca2:	ff 4f       	sbci	r31, 0xFF	; 255
     ca4:	80 81       	ld	r24, Z
     ca6:	91 81       	ldd	r25, Z+1	; 0x01
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <LCD_sendCommand+0x120>
     cac:	fe 01       	movw	r30, r28
     cae:	e9 5a       	subi	r30, 0xA9	; 169
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	91 83       	std	Z+1, r25	; 0x01
     cb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb6:	de 01       	movw	r26, r28
     cb8:	a7 5a       	subi	r26, 0xA7	; 167
     cba:	bf 4f       	sbci	r27, 0xFF	; 255
     cbc:	fe 01       	movw	r30, r28
     cbe:	e7 5a       	subi	r30, 0xA7	; 167
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	80 81       	ld	r24, Z
     cc4:	91 81       	ldd	r25, Z+1	; 0x01
     cc6:	01 97       	sbiw	r24, 0x01	; 1
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	9c 93       	st	X, r25
     ccc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cce:	fe 01       	movw	r30, r28
     cd0:	e7 5a       	subi	r30, 0xA7	; 167
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	91 81       	ldd	r25, Z+1	; 0x01
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	d1 f6       	brne	.-76     	; 0xc90 <LCD_sendCommand+0x108>
     cdc:	27 c0       	rjmp	.+78     	; 0xd2c <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cde:	8e 01       	movw	r16, r28
     ce0:	07 5a       	subi	r16, 0xA7	; 167
     ce2:	1f 4f       	sbci	r17, 0xFF	; 255
     ce4:	fe 01       	movw	r30, r28
     ce6:	e5 5a       	subi	r30, 0xA5	; 165
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	f8 01       	movw	r30, r16
     cfc:	91 83       	std	Z+1, r25	; 0x01
     cfe:	80 83       	st	Z, r24
     d00:	de 01       	movw	r26, r28
     d02:	ab 5a       	subi	r26, 0xAB	; 171
     d04:	bf 4f       	sbci	r27, 0xFF	; 255
     d06:	fe 01       	movw	r30, r28
     d08:	e7 5a       	subi	r30, 0xA7	; 167
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	80 81       	ld	r24, Z
     d0e:	91 81       	ldd	r25, Z+1	; 0x01
     d10:	8d 93       	st	X+, r24
     d12:	9c 93       	st	X, r25
     d14:	fe 01       	movw	r30, r28
     d16:	eb 5a       	subi	r30, 0xAB	; 171
     d18:	ff 4f       	sbci	r31, 0xFF	; 255
     d1a:	80 81       	ld	r24, Z
     d1c:	91 81       	ldd	r25, Z+1	; 0x01
     d1e:	01 97       	sbiw	r24, 0x01	; 1
     d20:	f1 f7       	brne	.-4      	; 0xd1e <LCD_sendCommand+0x196>
     d22:	fe 01       	movw	r30, r28
     d24:	eb 5a       	subi	r30, 0xAB	; 171
     d26:	ff 4f       	sbci	r31, 0xFF	; 255
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
     d2c:	ab e3       	ldi	r26, 0x3B	; 59
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	eb e3       	ldi	r30, 0x3B	; 59
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	88 60       	ori	r24, 0x08	; 8
     d38:	8c 93       	st	X, r24
     d3a:	fe 01       	movw	r30, r28
     d3c:	ef 5a       	subi	r30, 0xAF	; 175
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e8       	ldi	r26, 0x80	; 128
     d46:	bf e3       	ldi	r27, 0x3F	; 63
     d48:	80 83       	st	Z, r24
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	a2 83       	std	Z+2, r26	; 0x02
     d4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d50:	8e 01       	movw	r16, r28
     d52:	03 5b       	subi	r16, 0xB3	; 179
     d54:	1f 4f       	sbci	r17, 0xFF	; 255
     d56:	fe 01       	movw	r30, r28
     d58:	ef 5a       	subi	r30, 0xAF	; 175
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	60 81       	ld	r22, Z
     d5e:	71 81       	ldd	r23, Z+1	; 0x01
     d60:	82 81       	ldd	r24, Z+2	; 0x02
     d62:	93 81       	ldd	r25, Z+3	; 0x03
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	4a e7       	ldi	r20, 0x7A	; 122
     d6a:	53 e4       	ldi	r21, 0x43	; 67
     d6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	f8 01       	movw	r30, r16
     d76:	80 83       	st	Z, r24
     d78:	91 83       	std	Z+1, r25	; 0x01
     d7a:	a2 83       	std	Z+2, r26	; 0x02
     d7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d7e:	fe 01       	movw	r30, r28
     d80:	e3 5b       	subi	r30, 0xB3	; 179
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	82 81       	ldd	r24, Z+2	; 0x02
     d8a:	93 81       	ldd	r25, Z+3	; 0x03
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d98:	88 23       	and	r24, r24
     d9a:	44 f4       	brge	.+16     	; 0xdac <LCD_sendCommand+0x224>
		__ticks = 1;
     d9c:	fe 01       	movw	r30, r28
     d9e:	e5 5b       	subi	r30, 0xB5	; 181
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
     daa:	64 c0       	rjmp	.+200    	; 0xe74 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
     dac:	fe 01       	movw	r30, r28
     dae:	e3 5b       	subi	r30, 0xB3	; 179
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	60 81       	ld	r22, Z
     db4:	71 81       	ldd	r23, Z+1	; 0x01
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	3f ef       	ldi	r19, 0xFF	; 255
     dbe:	4f e7       	ldi	r20, 0x7F	; 127
     dc0:	57 e4       	ldi	r21, 0x47	; 71
     dc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc6:	18 16       	cp	r1, r24
     dc8:	0c f0       	brlt	.+2      	; 0xdcc <LCD_sendCommand+0x244>
     dca:	43 c0       	rjmp	.+134    	; 0xe52 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	fe 01       	movw	r30, r28
     dce:	ef 5a       	subi	r30, 0xAF	; 175
     dd0:	ff 4f       	sbci	r31, 0xFF	; 255
     dd2:	60 81       	ld	r22, Z
     dd4:	71 81       	ldd	r23, Z+1	; 0x01
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	20 e0       	ldi	r18, 0x00	; 0
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	40 e2       	ldi	r20, 0x20	; 32
     de0:	51 e4       	ldi	r21, 0x41	; 65
     de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de6:	dc 01       	movw	r26, r24
     de8:	cb 01       	movw	r24, r22
     dea:	8e 01       	movw	r16, r28
     dec:	05 5b       	subi	r16, 0xB5	; 181
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	bc 01       	movw	r22, r24
     df2:	cd 01       	movw	r24, r26
     df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df8:	dc 01       	movw	r26, r24
     dfa:	cb 01       	movw	r24, r22
     dfc:	f8 01       	movw	r30, r16
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
     e02:	1f c0       	rjmp	.+62     	; 0xe42 <LCD_sendCommand+0x2ba>
     e04:	fe 01       	movw	r30, r28
     e06:	e7 5b       	subi	r30, 0xB7	; 183
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	89 e1       	ldi	r24, 0x19	; 25
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	91 83       	std	Z+1, r25	; 0x01
     e10:	80 83       	st	Z, r24
     e12:	fe 01       	movw	r30, r28
     e14:	e7 5b       	subi	r30, 0xB7	; 183
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	91 81       	ldd	r25, Z+1	; 0x01
     e1c:	01 97       	sbiw	r24, 0x01	; 1
     e1e:	f1 f7       	brne	.-4      	; 0xe1c <LCD_sendCommand+0x294>
     e20:	fe 01       	movw	r30, r28
     e22:	e7 5b       	subi	r30, 0xB7	; 183
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	91 83       	std	Z+1, r25	; 0x01
     e28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2a:	de 01       	movw	r26, r28
     e2c:	a5 5b       	subi	r26, 0xB5	; 181
     e2e:	bf 4f       	sbci	r27, 0xFF	; 255
     e30:	fe 01       	movw	r30, r28
     e32:	e5 5b       	subi	r30, 0xB5	; 181
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	01 97       	sbiw	r24, 0x01	; 1
     e3c:	11 96       	adiw	r26, 0x01	; 1
     e3e:	9c 93       	st	X, r25
     e40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	fe 01       	movw	r30, r28
     e44:	e5 5b       	subi	r30, 0xB5	; 181
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	80 81       	ld	r24, Z
     e4a:	91 81       	ldd	r25, Z+1	; 0x01
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	d1 f6       	brne	.-76     	; 0xe04 <LCD_sendCommand+0x27c>
     e50:	27 c0       	rjmp	.+78     	; 0xea0 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e52:	8e 01       	movw	r16, r28
     e54:	05 5b       	subi	r16, 0xB5	; 181
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	fe 01       	movw	r30, r28
     e5a:	e3 5b       	subi	r30, 0xB3	; 179
     e5c:	ff 4f       	sbci	r31, 0xFF	; 255
     e5e:	60 81       	ld	r22, Z
     e60:	71 81       	ldd	r23, Z+1	; 0x01
     e62:	82 81       	ldd	r24, Z+2	; 0x02
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	f8 01       	movw	r30, r16
     e70:	91 83       	std	Z+1, r25	; 0x01
     e72:	80 83       	st	Z, r24
     e74:	de 01       	movw	r26, r28
     e76:	a9 5b       	subi	r26, 0xB9	; 185
     e78:	bf 4f       	sbci	r27, 0xFF	; 255
     e7a:	fe 01       	movw	r30, r28
     e7c:	e5 5b       	subi	r30, 0xB5	; 181
     e7e:	ff 4f       	sbci	r31, 0xFF	; 255
     e80:	80 81       	ld	r24, Z
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	8d 93       	st	X+, r24
     e86:	9c 93       	st	X, r25
     e88:	fe 01       	movw	r30, r28
     e8a:	e9 5b       	subi	r30, 0xB9	; 185
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 81       	ld	r24, Z
     e90:	91 81       	ldd	r25, Z+1	; 0x01
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <LCD_sendCommand+0x30a>
     e96:	fe 01       	movw	r30, r28
     e98:	e9 5b       	subi	r30, 0xB9	; 185
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	80 83       	st	Z, r24

	   /*	DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS & 0xF0) | ((command & 0xF0) >> 4);*/
	   	    TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
     #else
	   	/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (command & 0xF0);*/
	   	  TAKE_FTCOMMAND(DATA_OUTPUT_PINS,command);
     ea0:	ab e3       	ldi	r26, 0x3B	; 59
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	eb e3       	ldi	r30, 0x3B	; 59
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	98 2f       	mov	r25, r24
     eac:	9f 70       	andi	r25, 0x0F	; 15
     eae:	fe 01       	movw	r30, r28
     eb0:	ed 59       	subi	r30, 0x9D	; 157
     eb2:	ff 4f       	sbci	r31, 0xFF	; 255
     eb4:	80 81       	ld	r24, Z
     eb6:	80 7f       	andi	r24, 0xF0	; 240
     eb8:	89 2b       	or	r24, r25
     eba:	8c 93       	st	X, r24
     ebc:	fe 01       	movw	r30, r28
     ebe:	ed 5b       	subi	r30, 0xBD	; 189
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a0 e8       	ldi	r26, 0x80	; 128
     ec8:	bf e3       	ldi	r27, 0x3F	; 63
     eca:	80 83       	st	Z, r24
     ecc:	91 83       	std	Z+1, r25	; 0x01
     ece:	a2 83       	std	Z+2, r26	; 0x02
     ed0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed2:	8e 01       	movw	r16, r28
     ed4:	01 5c       	subi	r16, 0xC1	; 193
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	fe 01       	movw	r30, r28
     eda:	ed 5b       	subi	r30, 0xBD	; 189
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	60 81       	ld	r22, Z
     ee0:	71 81       	ldd	r23, Z+1	; 0x01
     ee2:	82 81       	ldd	r24, Z+2	; 0x02
     ee4:	93 81       	ldd	r25, Z+3	; 0x03
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a e7       	ldi	r20, 0x7A	; 122
     eec:	53 e4       	ldi	r21, 0x43	; 67
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	f8 01       	movw	r30, r16
     ef8:	80 83       	st	Z, r24
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	a2 83       	std	Z+2, r26	; 0x02
     efe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f00:	fe 01       	movw	r30, r28
     f02:	ff 96       	adiw	r30, 0x3f	; 63
     f04:	60 81       	ld	r22, Z
     f06:	71 81       	ldd	r23, Z+1	; 0x01
     f08:	82 81       	ldd	r24, Z+2	; 0x02
     f0a:	93 81       	ldd	r25, Z+3	; 0x03
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f18:	88 23       	and	r24, r24
     f1a:	2c f4       	brge	.+10     	; 0xf26 <LCD_sendCommand+0x39e>
		__ticks = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9e af       	std	Y+62, r25	; 0x3e
     f22:	8d af       	std	Y+61, r24	; 0x3d
     f24:	46 c0       	rjmp	.+140    	; 0xfb2 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
     f26:	fe 01       	movw	r30, r28
     f28:	ff 96       	adiw	r30, 0x3f	; 63
     f2a:	60 81       	ld	r22, Z
     f2c:	71 81       	ldd	r23, Z+1	; 0x01
     f2e:	82 81       	ldd	r24, Z+2	; 0x02
     f30:	93 81       	ldd	r25, Z+3	; 0x03
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	4f e7       	ldi	r20, 0x7F	; 127
     f38:	57 e4       	ldi	r21, 0x47	; 71
     f3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f3e:	18 16       	cp	r1, r24
     f40:	64 f5       	brge	.+88     	; 0xf9a <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f42:	fe 01       	movw	r30, r28
     f44:	ed 5b       	subi	r30, 0xBD	; 189
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e2       	ldi	r20, 0x20	; 32
     f56:	51 e4       	ldi	r21, 0x41	; 65
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	bc 01       	movw	r22, r24
     f62:	cd 01       	movw	r24, r26
     f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	9e af       	std	Y+62, r25	; 0x3e
     f6e:	8d af       	std	Y+61, r24	; 0x3d
     f70:	0f c0       	rjmp	.+30     	; 0xf90 <LCD_sendCommand+0x408>
     f72:	89 e1       	ldi	r24, 0x19	; 25
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	9c af       	std	Y+60, r25	; 0x3c
     f78:	8b af       	std	Y+59, r24	; 0x3b
     f7a:	8b ad       	ldd	r24, Y+59	; 0x3b
     f7c:	9c ad       	ldd	r25, Y+60	; 0x3c
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	f1 f7       	brne	.-4      	; 0xf7e <LCD_sendCommand+0x3f6>
     f82:	9c af       	std	Y+60, r25	; 0x3c
     f84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f86:	8d ad       	ldd	r24, Y+61	; 0x3d
     f88:	9e ad       	ldd	r25, Y+62	; 0x3e
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	9e af       	std	Y+62, r25	; 0x3e
     f8e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f90:	8d ad       	ldd	r24, Y+61	; 0x3d
     f92:	9e ad       	ldd	r25, Y+62	; 0x3e
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	69 f7       	brne	.-38     	; 0xf72 <LCD_sendCommand+0x3ea>
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f9a:	fe 01       	movw	r30, r28
     f9c:	ff 96       	adiw	r30, 0x3f	; 63
     f9e:	60 81       	ld	r22, Z
     fa0:	71 81       	ldd	r23, Z+1	; 0x01
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e af       	std	Y+62, r25	; 0x3e
     fb0:	8d af       	std	Y+61, r24	; 0x3d
     fb2:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb4:	9e ad       	ldd	r25, Y+62	; 0x3e
     fb6:	9a af       	std	Y+58, r25	; 0x3a
     fb8:	89 af       	std	Y+57, r24	; 0x39
     fba:	89 ad       	ldd	r24, Y+57	; 0x39
     fbc:	9a ad       	ldd	r25, Y+58	; 0x3a
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <LCD_sendCommand+0x436>
     fc2:	9a af       	std	Y+58, r25	; 0x3a
     fc4:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
     fc6:	ab e3       	ldi	r26, 0x3B	; 59
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	eb e3       	ldi	r30, 0x3B	; 59
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	87 7f       	andi	r24, 0xF7	; 247
     fd2:	8c 93       	st	X, r24
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	a0 e8       	ldi	r26, 0x80	; 128
     fda:	bf e3       	ldi	r27, 0x3F	; 63
     fdc:	8d ab       	std	Y+53, r24	; 0x35
     fde:	9e ab       	std	Y+54, r25	; 0x36
     fe0:	af ab       	std	Y+55, r26	; 0x37
     fe2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	4a e7       	ldi	r20, 0x7A	; 122
     ff2:	53 e4       	ldi	r21, 0x43	; 67
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	89 ab       	std	Y+49, r24	; 0x31
     ffe:	9a ab       	std	Y+50, r25	; 0x32
    1000:	ab ab       	std	Y+51, r26	; 0x33
    1002:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1004:	69 a9       	ldd	r22, Y+49	; 0x31
    1006:	7a a9       	ldd	r23, Y+50	; 0x32
    1008:	8b a9       	ldd	r24, Y+51	; 0x33
    100a:	9c a9       	ldd	r25, Y+52	; 0x34
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1018:	88 23       	and	r24, r24
    101a:	2c f4       	brge	.+10     	; 0x1026 <LCD_sendCommand+0x49e>
		__ticks = 1;
    101c:	81 e0       	ldi	r24, 0x01	; 1
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	98 ab       	std	Y+48, r25	; 0x30
    1022:	8f a7       	std	Y+47, r24	; 0x2f
    1024:	3f c0       	rjmp	.+126    	; 0x10a4 <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    1026:	69 a9       	ldd	r22, Y+49	; 0x31
    1028:	7a a9       	ldd	r23, Y+50	; 0x32
    102a:	8b a9       	ldd	r24, Y+51	; 0x33
    102c:	9c a9       	ldd	r25, Y+52	; 0x34
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	3f ef       	ldi	r19, 0xFF	; 255
    1032:	4f e7       	ldi	r20, 0x7F	; 127
    1034:	57 e4       	ldi	r21, 0x47	; 71
    1036:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    103a:	18 16       	cp	r1, r24
    103c:	4c f5       	brge	.+82     	; 0x1090 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    103e:	6d a9       	ldd	r22, Y+53	; 0x35
    1040:	7e a9       	ldd	r23, Y+54	; 0x36
    1042:	8f a9       	ldd	r24, Y+55	; 0x37
    1044:	98 ad       	ldd	r25, Y+56	; 0x38
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e2       	ldi	r20, 0x20	; 32
    104c:	51 e4       	ldi	r21, 0x41	; 65
    104e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	98 ab       	std	Y+48, r25	; 0x30
    1064:	8f a7       	std	Y+47, r24	; 0x2f
    1066:	0f c0       	rjmp	.+30     	; 0x1086 <LCD_sendCommand+0x4fe>
    1068:	89 e1       	ldi	r24, 0x19	; 25
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	9e a7       	std	Y+46, r25	; 0x2e
    106e:	8d a7       	std	Y+45, r24	; 0x2d
    1070:	8d a5       	ldd	r24, Y+45	; 0x2d
    1072:	9e a5       	ldd	r25, Y+46	; 0x2e
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <LCD_sendCommand+0x4ec>
    1078:	9e a7       	std	Y+46, r25	; 0x2e
    107a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107c:	8f a5       	ldd	r24, Y+47	; 0x2f
    107e:	98 a9       	ldd	r25, Y+48	; 0x30
    1080:	01 97       	sbiw	r24, 0x01	; 1
    1082:	98 ab       	std	Y+48, r25	; 0x30
    1084:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1086:	8f a5       	ldd	r24, Y+47	; 0x2f
    1088:	98 a9       	ldd	r25, Y+48	; 0x30
    108a:	00 97       	sbiw	r24, 0x00	; 0
    108c:	69 f7       	brne	.-38     	; 0x1068 <LCD_sendCommand+0x4e0>
    108e:	14 c0       	rjmp	.+40     	; 0x10b8 <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1090:	69 a9       	ldd	r22, Y+49	; 0x31
    1092:	7a a9       	ldd	r23, Y+50	; 0x32
    1094:	8b a9       	ldd	r24, Y+51	; 0x33
    1096:	9c a9       	ldd	r25, Y+52	; 0x34
    1098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	98 ab       	std	Y+48, r25	; 0x30
    10a2:	8f a7       	std	Y+47, r24	; 0x2f
    10a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10a6:	98 a9       	ldd	r25, Y+48	; 0x30
    10a8:	9c a7       	std	Y+44, r25	; 0x2c
    10aa:	8b a7       	std	Y+43, r24	; 0x2b
    10ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    10ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <LCD_sendCommand+0x528>
    10b4:	9c a7       	std	Y+44, r25	; 0x2c
    10b6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    10b8:	ab e3       	ldi	r26, 0x3B	; 59
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	eb e3       	ldi	r30, 0x3B	; 59
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	88 60       	ori	r24, 0x08	; 8
    10c4:	8c 93       	st	X, r24
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 e8       	ldi	r26, 0x80	; 128
    10cc:	bf e3       	ldi	r27, 0x3F	; 63
    10ce:	8f a3       	std	Y+39, r24	; 0x27
    10d0:	98 a7       	std	Y+40, r25	; 0x28
    10d2:	a9 a7       	std	Y+41, r26	; 0x29
    10d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6f a1       	ldd	r22, Y+39	; 0x27
    10d8:	78 a5       	ldd	r23, Y+40	; 0x28
    10da:	89 a5       	ldd	r24, Y+41	; 0x29
    10dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a e7       	ldi	r20, 0x7A	; 122
    10e4:	53 e4       	ldi	r21, 0x43	; 67
    10e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8b a3       	std	Y+35, r24	; 0x23
    10f0:	9c a3       	std	Y+36, r25	; 0x24
    10f2:	ad a3       	std	Y+37, r26	; 0x25
    10f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10f6:	6b a1       	ldd	r22, Y+35	; 0x23
    10f8:	7c a1       	ldd	r23, Y+36	; 0x24
    10fa:	8d a1       	ldd	r24, Y+37	; 0x25
    10fc:	9e a1       	ldd	r25, Y+38	; 0x26
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <LCD_sendCommand+0x590>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9a a3       	std	Y+34, r25	; 0x22
    1114:	89 a3       	std	Y+33, r24	; 0x21
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    1118:	6b a1       	ldd	r22, Y+35	; 0x23
    111a:	7c a1       	ldd	r23, Y+36	; 0x24
    111c:	8d a1       	ldd	r24, Y+37	; 0x25
    111e:	9e a1       	ldd	r25, Y+38	; 0x26
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6f a1       	ldd	r22, Y+39	; 0x27
    1132:	78 a5       	ldd	r23, Y+40	; 0x28
    1134:	89 a5       	ldd	r24, Y+41	; 0x29
    1136:	9a a5       	ldd	r25, Y+42	; 0x2a
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <LCD_sendCommand+0x5f0>
    115a:	89 e1       	ldi	r24, 0x19	; 25
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	98 a3       	std	Y+32, r25	; 0x20
    1160:	8f 8f       	std	Y+31, r24	; 0x1f
    1162:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1164:	98 a1       	ldd	r25, Y+32	; 0x20
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <LCD_sendCommand+0x5de>
    116a:	98 a3       	std	Y+32, r25	; 0x20
    116c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	89 a1       	ldd	r24, Y+33	; 0x21
    1170:	9a a1       	ldd	r25, Y+34	; 0x22
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9a a3       	std	Y+34, r25	; 0x22
    1176:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	89 a1       	ldd	r24, Y+33	; 0x21
    117a:	9a a1       	ldd	r25, Y+34	; 0x22
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <LCD_sendCommand+0x5d2>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6b a1       	ldd	r22, Y+35	; 0x23
    1184:	7c a1       	ldd	r23, Y+36	; 0x24
    1186:	8d a1       	ldd	r24, Y+37	; 0x25
    1188:	9e a1       	ldd	r25, Y+38	; 0x26
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9a a3       	std	Y+34, r25	; 0x22
    1194:	89 a3       	std	Y+33, r24	; 0x21
    1196:	89 a1       	ldd	r24, Y+33	; 0x21
    1198:	9a a1       	ldd	r25, Y+34	; 0x22
    119a:	9e 8f       	std	Y+30, r25	; 0x1e
    119c:	8d 8f       	std	Y+29, r24	; 0x1d
    119e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <LCD_sendCommand+0x61a>
    11a6:	9e 8f       	std	Y+30, r25	; 0x1e
    11a8:	8d 8f       	std	Y+29, r24	; 0x1d
		    TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
     #else

	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((command&0x0F)<<4);*/

	        TAKE_SCCOMMAND(DATA_OUTPUT_PINS,command);
    11aa:	ab e3       	ldi	r26, 0x3B	; 59
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	eb e3       	ldi	r30, 0x3B	; 59
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	28 2f       	mov	r18, r24
    11b6:	2f 70       	andi	r18, 0x0F	; 15
    11b8:	fe 01       	movw	r30, r28
    11ba:	ed 59       	subi	r30, 0x9D	; 157
    11bc:	ff 4f       	sbci	r31, 0xFF	; 255
    11be:	80 81       	ld	r24, Z
    11c0:	88 2f       	mov	r24, r24
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	82 95       	swap	r24
    11c6:	92 95       	swap	r25
    11c8:	90 7f       	andi	r25, 0xF0	; 240
    11ca:	98 27       	eor	r25, r24
    11cc:	80 7f       	andi	r24, 0xF0	; 240
    11ce:	98 27       	eor	r25, r24
    11d0:	82 2b       	or	r24, r18
    11d2:	8c 93       	st	X, r24
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	a0 e8       	ldi	r26, 0x80	; 128
    11da:	bf e3       	ldi	r27, 0x3F	; 63
    11dc:	89 8f       	std	Y+25, r24	; 0x19
    11de:	9a 8f       	std	Y+26, r25	; 0x1a
    11e0:	ab 8f       	std	Y+27, r26	; 0x1b
    11e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e4:	69 8d       	ldd	r22, Y+25	; 0x19
    11e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	4a e7       	ldi	r20, 0x7A	; 122
    11f2:	53 e4       	ldi	r21, 0x43	; 67
    11f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	8d 8b       	std	Y+21, r24	; 0x15
    11fe:	9e 8b       	std	Y+22, r25	; 0x16
    1200:	af 8b       	std	Y+23, r26	; 0x17
    1202:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1204:	6d 89       	ldd	r22, Y+21	; 0x15
    1206:	7e 89       	ldd	r23, Y+22	; 0x16
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 e8       	ldi	r20, 0x80	; 128
    1212:	5f e3       	ldi	r21, 0x3F	; 63
    1214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1218:	88 23       	and	r24, r24
    121a:	2c f4       	brge	.+10     	; 0x1226 <LCD_sendCommand+0x69e>
		__ticks = 1;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9c 8b       	std	Y+20, r25	; 0x14
    1222:	8b 8b       	std	Y+19, r24	; 0x13
    1224:	3f c0       	rjmp	.+126    	; 0x12a4 <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    1226:	6d 89       	ldd	r22, Y+21	; 0x15
    1228:	7e 89       	ldd	r23, Y+22	; 0x16
    122a:	8f 89       	ldd	r24, Y+23	; 0x17
    122c:	98 8d       	ldd	r25, Y+24	; 0x18
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	3f ef       	ldi	r19, 0xFF	; 255
    1232:	4f e7       	ldi	r20, 0x7F	; 127
    1234:	57 e4       	ldi	r21, 0x47	; 71
    1236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123a:	18 16       	cp	r1, r24
    123c:	4c f5       	brge	.+82     	; 0x1290 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    123e:	69 8d       	ldd	r22, Y+25	; 0x19
    1240:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1242:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1244:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1246:	20 e0       	ldi	r18, 0x00	; 0
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	40 e2       	ldi	r20, 0x20	; 32
    124c:	51 e4       	ldi	r21, 0x41	; 65
    124e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	9c 8b       	std	Y+20, r25	; 0x14
    1264:	8b 8b       	std	Y+19, r24	; 0x13
    1266:	0f c0       	rjmp	.+30     	; 0x1286 <LCD_sendCommand+0x6fe>
    1268:	89 e1       	ldi	r24, 0x19	; 25
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9a 8b       	std	Y+18, r25	; 0x12
    126e:	89 8b       	std	Y+17, r24	; 0x11
    1270:	89 89       	ldd	r24, Y+17	; 0x11
    1272:	9a 89       	ldd	r25, Y+18	; 0x12
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_sendCommand+0x6ec>
    1278:	9a 8b       	std	Y+18, r25	; 0x12
    127a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    127c:	8b 89       	ldd	r24, Y+19	; 0x13
    127e:	9c 89       	ldd	r25, Y+20	; 0x14
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	9c 8b       	std	Y+20, r25	; 0x14
    1284:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1286:	8b 89       	ldd	r24, Y+19	; 0x13
    1288:	9c 89       	ldd	r25, Y+20	; 0x14
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	69 f7       	brne	.-38     	; 0x1268 <LCD_sendCommand+0x6e0>
    128e:	14 c0       	rjmp	.+40     	; 0x12b8 <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1290:	6d 89       	ldd	r22, Y+21	; 0x15
    1292:	7e 89       	ldd	r23, Y+22	; 0x16
    1294:	8f 89       	ldd	r24, Y+23	; 0x17
    1296:	98 8d       	ldd	r25, Y+24	; 0x18
    1298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	9c 8b       	std	Y+20, r25	; 0x14
    12a2:	8b 8b       	std	Y+19, r24	; 0x13
    12a4:	8b 89       	ldd	r24, Y+19	; 0x13
    12a6:	9c 89       	ldd	r25, Y+20	; 0x14
    12a8:	98 8b       	std	Y+16, r25	; 0x10
    12aa:	8f 87       	std	Y+15, r24	; 0x0f
    12ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ae:	98 89       	ldd	r25, Y+16	; 0x10
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <LCD_sendCommand+0x728>
    12b4:	98 8b       	std	Y+16, r25	; 0x10
    12b6:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    12b8:	ab e3       	ldi	r26, 0x3B	; 59
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	eb e3       	ldi	r30, 0x3B	; 59
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	87 7f       	andi	r24, 0xF7	; 247
    12c4:	8c 93       	st	X, r24
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 e8       	ldi	r26, 0x80	; 128
    12cc:	bf e3       	ldi	r27, 0x3F	; 63
    12ce:	8b 87       	std	Y+11, r24	; 0x0b
    12d0:	9c 87       	std	Y+12, r25	; 0x0c
    12d2:	ad 87       	std	Y+13, r26	; 0x0d
    12d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12da:	8d 85       	ldd	r24, Y+13	; 0x0d
    12dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4a e7       	ldi	r20, 0x7A	; 122
    12e4:	53 e4       	ldi	r21, 0x43	; 67
    12e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8f 83       	std	Y+7, r24	; 0x07
    12f0:	98 87       	std	Y+8, r25	; 0x08
    12f2:	a9 87       	std	Y+9, r26	; 0x09
    12f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12f6:	6f 81       	ldd	r22, Y+7	; 0x07
    12f8:	78 85       	ldd	r23, Y+8	; 0x08
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e8       	ldi	r20, 0x80	; 128
    1304:	5f e3       	ldi	r21, 0x3F	; 63
    1306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    130a:	88 23       	and	r24, r24
    130c:	2c f4       	brge	.+10     	; 0x1318 <LCD_sendCommand+0x790>
		__ticks = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9e 83       	std	Y+6, r25	; 0x06
    1314:	8d 83       	std	Y+5, r24	; 0x05
    1316:	3f c0       	rjmp	.+126    	; 0x1396 <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	3f ef       	ldi	r19, 0xFF	; 255
    1324:	4f e7       	ldi	r20, 0x7F	; 127
    1326:	57 e4       	ldi	r21, 0x47	; 71
    1328:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132c:	18 16       	cp	r1, r24
    132e:	4c f5       	brge	.+82     	; 0x1382 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1330:	6b 85       	ldd	r22, Y+11	; 0x0b
    1332:	7c 85       	ldd	r23, Y+12	; 0x0c
    1334:	8d 85       	ldd	r24, Y+13	; 0x0d
    1336:	9e 85       	ldd	r25, Y+14	; 0x0e
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	51 e4       	ldi	r21, 0x41	; 65
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9e 83       	std	Y+6, r25	; 0x06
    1356:	8d 83       	std	Y+5, r24	; 0x05
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <LCD_sendCommand+0x7f0>
    135a:	89 e1       	ldi	r24, 0x19	; 25
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9c 83       	std	Y+4, r25	; 0x04
    1360:	8b 83       	std	Y+3, r24	; 0x03
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <LCD_sendCommand+0x7de>
    136a:	9c 83       	std	Y+4, r25	; 0x04
    136c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136e:	8d 81       	ldd	r24, Y+5	; 0x05
    1370:	9e 81       	ldd	r25, Y+6	; 0x06
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	9e 83       	std	Y+6, r25	; 0x06
    1376:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	69 f7       	brne	.-38     	; 0x135a <LCD_sendCommand+0x7d2>
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1382:	6f 81       	ldd	r22, Y+7	; 0x07
    1384:	78 85       	ldd	r23, Y+8	; 0x08
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9e 83       	std	Y+6, r25	; 0x06
    1394:	8d 83       	std	Y+5, r24	; 0x05
    1396:	8d 81       	ldd	r24, Y+5	; 0x05
    1398:	9e 81       	ldd	r25, Y+6	; 0x06
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	89 83       	std	Y+1, r24	; 0x01
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	9a 81       	ldd	r25, Y+2	; 0x02
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <LCD_sendCommand+0x81a>
    13a6:	9a 83       	std	Y+2, r25	; 0x02
    13a8:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    13aa:	cd 59       	subi	r28, 0x9D	; 157
    13ac:	df 4f       	sbci	r29, 0xFF	; 255
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	f8 94       	cli
    13b2:	de bf       	out	0x3e, r29	; 62
    13b4:	0f be       	out	0x3f, r0	; 63
    13b6:	cd bf       	out	0x3d, r28	; 61
    13b8:	cf 91       	pop	r28
    13ba:	df 91       	pop	r29
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	08 95       	ret

000013c2 <LCD_displayChar>:
#endif




  void LCD_displayChar(unit8 data){
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	df 93       	push	r29
    13c8:	cf 93       	push	r28
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	c3 56       	subi	r28, 0x63	; 99
    13d0:	d0 40       	sbci	r29, 0x00	; 0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	f8 94       	cli
    13d6:	de bf       	out	0x3e, r29	; 62
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	fe 01       	movw	r30, r28
    13de:	ed 59       	subi	r30, 0x9D	; 157
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 83       	st	Z, r24
	/*make RS=1 to send data*/
	Pin_output(CTRL_OUTPUT_PINS  ,RS);
    13e4:	ab e3       	ldi	r26, 0x3B	; 59
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	eb e3       	ldi	r30, 0x3B	; 59
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	82 60       	ori	r24, 0x02	; 2
    13f0:	8c 93       	st	X, r24
	/*make RW=0 to write command*/
	Pin_clear(CTRL_OUTPUT_PINS  ,RW);
    13f2:	ab e3       	ldi	r26, 0x3B	; 59
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	eb e3       	ldi	r30, 0x3B	; 59
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8b 7f       	andi	r24, 0xFB	; 251
    13fe:	8c 93       	st	X, r24
    1400:	fe 01       	movw	r30, r28
    1402:	e1 5a       	subi	r30, 0xA1	; 161
    1404:	ff 4f       	sbci	r31, 0xFF	; 255
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	a0 e8       	ldi	r26, 0x80	; 128
    140c:	bf e3       	ldi	r27, 0x3F	; 63
    140e:	80 83       	st	Z, r24
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	a2 83       	std	Z+2, r26	; 0x02
    1414:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1416:	8e 01       	movw	r16, r28
    1418:	05 5a       	subi	r16, 0xA5	; 165
    141a:	1f 4f       	sbci	r17, 0xFF	; 255
    141c:	fe 01       	movw	r30, r28
    141e:	e1 5a       	subi	r30, 0xA1	; 161
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	60 81       	ld	r22, Z
    1424:	71 81       	ldd	r23, Z+1	; 0x01
    1426:	82 81       	ldd	r24, Z+2	; 0x02
    1428:	93 81       	ldd	r25, Z+3	; 0x03
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	4a e7       	ldi	r20, 0x7A	; 122
    1430:	53 e4       	ldi	r21, 0x43	; 67
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	f8 01       	movw	r30, r16
    143c:	80 83       	st	Z, r24
    143e:	91 83       	std	Z+1, r25	; 0x01
    1440:	a2 83       	std	Z+2, r26	; 0x02
    1442:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1444:	fe 01       	movw	r30, r28
    1446:	e5 5a       	subi	r30, 0xA5	; 165
    1448:	ff 4f       	sbci	r31, 0xFF	; 255
    144a:	60 81       	ld	r22, Z
    144c:	71 81       	ldd	r23, Z+1	; 0x01
    144e:	82 81       	ldd	r24, Z+2	; 0x02
    1450:	93 81       	ldd	r25, Z+3	; 0x03
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    145e:	88 23       	and	r24, r24
    1460:	44 f4       	brge	.+16     	; 0x1472 <LCD_displayChar+0xb0>
		__ticks = 1;
    1462:	fe 01       	movw	r30, r28
    1464:	e7 5a       	subi	r30, 0xA7	; 167
    1466:	ff 4f       	sbci	r31, 0xFF	; 255
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	91 83       	std	Z+1, r25	; 0x01
    146e:	80 83       	st	Z, r24
    1470:	64 c0       	rjmp	.+200    	; 0x153a <LCD_displayChar+0x178>
	else if (__tmp > 65535)
    1472:	fe 01       	movw	r30, r28
    1474:	e5 5a       	subi	r30, 0xA5	; 165
    1476:	ff 4f       	sbci	r31, 0xFF	; 255
    1478:	60 81       	ld	r22, Z
    147a:	71 81       	ldd	r23, Z+1	; 0x01
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	93 81       	ldd	r25, Z+3	; 0x03
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	3f ef       	ldi	r19, 0xFF	; 255
    1484:	4f e7       	ldi	r20, 0x7F	; 127
    1486:	57 e4       	ldi	r21, 0x47	; 71
    1488:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    148c:	18 16       	cp	r1, r24
    148e:	0c f0       	brlt	.+2      	; 0x1492 <LCD_displayChar+0xd0>
    1490:	43 c0       	rjmp	.+134    	; 0x1518 <LCD_displayChar+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1492:	fe 01       	movw	r30, r28
    1494:	e1 5a       	subi	r30, 0xA1	; 161
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	40 e2       	ldi	r20, 0x20	; 32
    14a6:	51 e4       	ldi	r21, 0x41	; 65
    14a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	8e 01       	movw	r16, r28
    14b2:	07 5a       	subi	r16, 0xA7	; 167
    14b4:	1f 4f       	sbci	r17, 0xFF	; 255
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	f8 01       	movw	r30, r16
    14c4:	91 83       	std	Z+1, r25	; 0x01
    14c6:	80 83       	st	Z, r24
    14c8:	1f c0       	rjmp	.+62     	; 0x1508 <LCD_displayChar+0x146>
    14ca:	fe 01       	movw	r30, r28
    14cc:	e9 5a       	subi	r30, 0xA9	; 169
    14ce:	ff 4f       	sbci	r31, 0xFF	; 255
    14d0:	89 e1       	ldi	r24, 0x19	; 25
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
    14d8:	fe 01       	movw	r30, r28
    14da:	e9 5a       	subi	r30, 0xA9	; 169
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	91 81       	ldd	r25, Z+1	; 0x01
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <LCD_displayChar+0x120>
    14e6:	fe 01       	movw	r30, r28
    14e8:	e9 5a       	subi	r30, 0xA9	; 169
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	91 83       	std	Z+1, r25	; 0x01
    14ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	de 01       	movw	r26, r28
    14f2:	a7 5a       	subi	r26, 0xA7	; 167
    14f4:	bf 4f       	sbci	r27, 0xFF	; 255
    14f6:	fe 01       	movw	r30, r28
    14f8:	e7 5a       	subi	r30, 0xA7	; 167
    14fa:	ff 4f       	sbci	r31, 0xFF	; 255
    14fc:	80 81       	ld	r24, Z
    14fe:	91 81       	ldd	r25, Z+1	; 0x01
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	11 96       	adiw	r26, 0x01	; 1
    1504:	9c 93       	st	X, r25
    1506:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1508:	fe 01       	movw	r30, r28
    150a:	e7 5a       	subi	r30, 0xA7	; 167
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	91 81       	ldd	r25, Z+1	; 0x01
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	d1 f6       	brne	.-76     	; 0x14ca <LCD_displayChar+0x108>
    1516:	27 c0       	rjmp	.+78     	; 0x1566 <LCD_displayChar+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1518:	8e 01       	movw	r16, r28
    151a:	07 5a       	subi	r16, 0xA7	; 167
    151c:	1f 4f       	sbci	r17, 0xFF	; 255
    151e:	fe 01       	movw	r30, r28
    1520:	e5 5a       	subi	r30, 0xA5	; 165
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	60 81       	ld	r22, Z
    1526:	71 81       	ldd	r23, Z+1	; 0x01
    1528:	82 81       	ldd	r24, Z+2	; 0x02
    152a:	93 81       	ldd	r25, Z+3	; 0x03
    152c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	f8 01       	movw	r30, r16
    1536:	91 83       	std	Z+1, r25	; 0x01
    1538:	80 83       	st	Z, r24
    153a:	de 01       	movw	r26, r28
    153c:	ab 5a       	subi	r26, 0xAB	; 171
    153e:	bf 4f       	sbci	r27, 0xFF	; 255
    1540:	fe 01       	movw	r30, r28
    1542:	e7 5a       	subi	r30, 0xA7	; 167
    1544:	ff 4f       	sbci	r31, 0xFF	; 255
    1546:	80 81       	ld	r24, Z
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	8d 93       	st	X+, r24
    154c:	9c 93       	st	X, r25
    154e:	fe 01       	movw	r30, r28
    1550:	eb 5a       	subi	r30, 0xAB	; 171
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	80 81       	ld	r24, Z
    1556:	91 81       	ldd	r25, Z+1	; 0x01
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	f1 f7       	brne	.-4      	; 0x1558 <LCD_displayChar+0x196>
    155c:	fe 01       	movw	r30, r28
    155e:	eb 5a       	subi	r30, 0xAB	; 171
    1560:	ff 4f       	sbci	r31, 0xFF	; 255
    1562:	91 83       	std	Z+1, r25	; 0x01
    1564:	80 83       	st	Z, r24
	/*wait tas before enabling 50ns */
	_delay_ms(1);
	/* Enable =1 */
	Pin_output(CTRL_OUTPUT_PINS  ,E);
    1566:	ab e3       	ldi	r26, 0x3B	; 59
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	88 60       	ori	r24, 0x08	; 8
    1572:	8c 93       	st	X, r24
    1574:	fe 01       	movw	r30, r28
    1576:	ef 5a       	subi	r30, 0xAF	; 175
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 e0       	ldi	r24, 0x00	; 0
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	a0 e8       	ldi	r26, 0x80	; 128
    1580:	bf e3       	ldi	r27, 0x3F	; 63
    1582:	80 83       	st	Z, r24
    1584:	91 83       	std	Z+1, r25	; 0x01
    1586:	a2 83       	std	Z+2, r26	; 0x02
    1588:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158a:	8e 01       	movw	r16, r28
    158c:	03 5b       	subi	r16, 0xB3	; 179
    158e:	1f 4f       	sbci	r17, 0xFF	; 255
    1590:	fe 01       	movw	r30, r28
    1592:	ef 5a       	subi	r30, 0xAF	; 175
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	60 81       	ld	r22, Z
    1598:	71 81       	ldd	r23, Z+1	; 0x01
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	4a e7       	ldi	r20, 0x7A	; 122
    15a4:	53 e4       	ldi	r21, 0x43	; 67
    15a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	f8 01       	movw	r30, r16
    15b0:	80 83       	st	Z, r24
    15b2:	91 83       	std	Z+1, r25	; 0x01
    15b4:	a2 83       	std	Z+2, r26	; 0x02
    15b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15b8:	fe 01       	movw	r30, r28
    15ba:	e3 5b       	subi	r30, 0xB3	; 179
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	60 81       	ld	r22, Z
    15c0:	71 81       	ldd	r23, Z+1	; 0x01
    15c2:	82 81       	ldd	r24, Z+2	; 0x02
    15c4:	93 81       	ldd	r25, Z+3	; 0x03
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e8       	ldi	r20, 0x80	; 128
    15cc:	5f e3       	ldi	r21, 0x3F	; 63
    15ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	44 f4       	brge	.+16     	; 0x15e6 <LCD_displayChar+0x224>
		__ticks = 1;
    15d6:	fe 01       	movw	r30, r28
    15d8:	e5 5b       	subi	r30, 0xB5	; 181
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	91 83       	std	Z+1, r25	; 0x01
    15e2:	80 83       	st	Z, r24
    15e4:	64 c0       	rjmp	.+200    	; 0x16ae <LCD_displayChar+0x2ec>
	else if (__tmp > 65535)
    15e6:	fe 01       	movw	r30, r28
    15e8:	e3 5b       	subi	r30, 0xB3	; 179
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	60 81       	ld	r22, Z
    15ee:	71 81       	ldd	r23, Z+1	; 0x01
    15f0:	82 81       	ldd	r24, Z+2	; 0x02
    15f2:	93 81       	ldd	r25, Z+3	; 0x03
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	3f ef       	ldi	r19, 0xFF	; 255
    15f8:	4f e7       	ldi	r20, 0x7F	; 127
    15fa:	57 e4       	ldi	r21, 0x47	; 71
    15fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1600:	18 16       	cp	r1, r24
    1602:	0c f0       	brlt	.+2      	; 0x1606 <LCD_displayChar+0x244>
    1604:	43 c0       	rjmp	.+134    	; 0x168c <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1606:	fe 01       	movw	r30, r28
    1608:	ef 5a       	subi	r30, 0xAF	; 175
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	60 81       	ld	r22, Z
    160e:	71 81       	ldd	r23, Z+1	; 0x01
    1610:	82 81       	ldd	r24, Z+2	; 0x02
    1612:	93 81       	ldd	r25, Z+3	; 0x03
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e2       	ldi	r20, 0x20	; 32
    161a:	51 e4       	ldi	r21, 0x41	; 65
    161c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	8e 01       	movw	r16, r28
    1626:	05 5b       	subi	r16, 0xB5	; 181
    1628:	1f 4f       	sbci	r17, 0xFF	; 255
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	f8 01       	movw	r30, r16
    1638:	91 83       	std	Z+1, r25	; 0x01
    163a:	80 83       	st	Z, r24
    163c:	1f c0       	rjmp	.+62     	; 0x167c <LCD_displayChar+0x2ba>
    163e:	fe 01       	movw	r30, r28
    1640:	e7 5b       	subi	r30, 0xB7	; 183
    1642:	ff 4f       	sbci	r31, 0xFF	; 255
    1644:	89 e1       	ldi	r24, 0x19	; 25
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	91 83       	std	Z+1, r25	; 0x01
    164a:	80 83       	st	Z, r24
    164c:	fe 01       	movw	r30, r28
    164e:	e7 5b       	subi	r30, 0xB7	; 183
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	91 81       	ldd	r25, Z+1	; 0x01
    1656:	01 97       	sbiw	r24, 0x01	; 1
    1658:	f1 f7       	brne	.-4      	; 0x1656 <LCD_displayChar+0x294>
    165a:	fe 01       	movw	r30, r28
    165c:	e7 5b       	subi	r30, 0xB7	; 183
    165e:	ff 4f       	sbci	r31, 0xFF	; 255
    1660:	91 83       	std	Z+1, r25	; 0x01
    1662:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1664:	de 01       	movw	r26, r28
    1666:	a5 5b       	subi	r26, 0xB5	; 181
    1668:	bf 4f       	sbci	r27, 0xFF	; 255
    166a:	fe 01       	movw	r30, r28
    166c:	e5 5b       	subi	r30, 0xB5	; 181
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	91 81       	ldd	r25, Z+1	; 0x01
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167c:	fe 01       	movw	r30, r28
    167e:	e5 5b       	subi	r30, 0xB5	; 181
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	00 97       	sbiw	r24, 0x00	; 0
    1688:	d1 f6       	brne	.-76     	; 0x163e <LCD_displayChar+0x27c>
    168a:	27 c0       	rjmp	.+78     	; 0x16da <LCD_displayChar+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    168c:	8e 01       	movw	r16, r28
    168e:	05 5b       	subi	r16, 0xB5	; 181
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	fe 01       	movw	r30, r28
    1694:	e3 5b       	subi	r30, 0xB3	; 179
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	f8 01       	movw	r30, r16
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24
    16ae:	de 01       	movw	r26, r28
    16b0:	a9 5b       	subi	r26, 0xB9	; 185
    16b2:	bf 4f       	sbci	r27, 0xFF	; 255
    16b4:	fe 01       	movw	r30, r28
    16b6:	e5 5b       	subi	r30, 0xB5	; 181
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	80 81       	ld	r24, Z
    16bc:	91 81       	ldd	r25, Z+1	; 0x01
    16be:	8d 93       	st	X+, r24
    16c0:	9c 93       	st	X, r25
    16c2:	fe 01       	movw	r30, r28
    16c4:	e9 5b       	subi	r30, 0xB9	; 185
    16c6:	ff 4f       	sbci	r31, 0xFF	; 255
    16c8:	80 81       	ld	r24, Z
    16ca:	91 81       	ldd	r25, Z+1	; 0x01
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <LCD_displayChar+0x30a>
    16d0:	fe 01       	movw	r30, r28
    16d2:	e9 5b       	subi	r30, 0xB9	; 185
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	91 83       	std	Z+1, r25	; 0x01
    16d8:	80 83       	st	Z, r24

	   	TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);

     #else
		/*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS & 0x0F) | (data & 0xF0);*/
		TAKE_FTCOMMAND(DATA_OUTPUT_PINS,data);
    16da:	ab e3       	ldi	r26, 0x3B	; 59
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	eb e3       	ldi	r30, 0x3B	; 59
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	98 2f       	mov	r25, r24
    16e6:	9f 70       	andi	r25, 0x0F	; 15
    16e8:	fe 01       	movw	r30, r28
    16ea:	ed 59       	subi	r30, 0x9D	; 157
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	80 81       	ld	r24, Z
    16f0:	80 7f       	andi	r24, 0xF0	; 240
    16f2:	89 2b       	or	r24, r25
    16f4:	8c 93       	st	X, r24
    16f6:	fe 01       	movw	r30, r28
    16f8:	ed 5b       	subi	r30, 0xBD	; 189
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 e0       	ldi	r24, 0x00	; 0
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	a0 e8       	ldi	r26, 0x80	; 128
    1702:	bf e3       	ldi	r27, 0x3F	; 63
    1704:	80 83       	st	Z, r24
    1706:	91 83       	std	Z+1, r25	; 0x01
    1708:	a2 83       	std	Z+2, r26	; 0x02
    170a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    170c:	8e 01       	movw	r16, r28
    170e:	01 5c       	subi	r16, 0xC1	; 193
    1710:	1f 4f       	sbci	r17, 0xFF	; 255
    1712:	fe 01       	movw	r30, r28
    1714:	ed 5b       	subi	r30, 0xBD	; 189
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	4a e7       	ldi	r20, 0x7A	; 122
    1726:	53 e4       	ldi	r21, 0x43	; 67
    1728:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	f8 01       	movw	r30, r16
    1732:	80 83       	st	Z, r24
    1734:	91 83       	std	Z+1, r25	; 0x01
    1736:	a2 83       	std	Z+2, r26	; 0x02
    1738:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    173a:	fe 01       	movw	r30, r28
    173c:	ff 96       	adiw	r30, 0x3f	; 63
    173e:	60 81       	ld	r22, Z
    1740:	71 81       	ldd	r23, Z+1	; 0x01
    1742:	82 81       	ldd	r24, Z+2	; 0x02
    1744:	93 81       	ldd	r25, Z+3	; 0x03
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e8       	ldi	r20, 0x80	; 128
    174c:	5f e3       	ldi	r21, 0x3F	; 63
    174e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1752:	88 23       	and	r24, r24
    1754:	2c f4       	brge	.+10     	; 0x1760 <LCD_displayChar+0x39e>
		__ticks = 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	9e af       	std	Y+62, r25	; 0x3e
    175c:	8d af       	std	Y+61, r24	; 0x3d
    175e:	46 c0       	rjmp	.+140    	; 0x17ec <LCD_displayChar+0x42a>
	else if (__tmp > 65535)
    1760:	fe 01       	movw	r30, r28
    1762:	ff 96       	adiw	r30, 0x3f	; 63
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	57 e4       	ldi	r21, 0x47	; 71
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1778:	18 16       	cp	r1, r24
    177a:	64 f5       	brge	.+88     	; 0x17d4 <LCD_displayChar+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    177c:	fe 01       	movw	r30, r28
    177e:	ed 5b       	subi	r30, 0xBD	; 189
    1780:	ff 4f       	sbci	r31, 0xFF	; 255
    1782:	60 81       	ld	r22, Z
    1784:	71 81       	ldd	r23, Z+1	; 0x01
    1786:	82 81       	ldd	r24, Z+2	; 0x02
    1788:	93 81       	ldd	r25, Z+3	; 0x03
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e2       	ldi	r20, 0x20	; 32
    1790:	51 e4       	ldi	r21, 0x41	; 65
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a2:	dc 01       	movw	r26, r24
    17a4:	cb 01       	movw	r24, r22
    17a6:	9e af       	std	Y+62, r25	; 0x3e
    17a8:	8d af       	std	Y+61, r24	; 0x3d
    17aa:	0f c0       	rjmp	.+30     	; 0x17ca <LCD_displayChar+0x408>
    17ac:	89 e1       	ldi	r24, 0x19	; 25
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	9c af       	std	Y+60, r25	; 0x3c
    17b2:	8b af       	std	Y+59, r24	; 0x3b
    17b4:	8b ad       	ldd	r24, Y+59	; 0x3b
    17b6:	9c ad       	ldd	r25, Y+60	; 0x3c
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <LCD_displayChar+0x3f6>
    17bc:	9c af       	std	Y+60, r25	; 0x3c
    17be:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	9e af       	std	Y+62, r25	; 0x3e
    17c8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    17cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	69 f7       	brne	.-38     	; 0x17ac <LCD_displayChar+0x3ea>
    17d2:	16 c0       	rjmp	.+44     	; 0x1800 <LCD_displayChar+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17d4:	fe 01       	movw	r30, r28
    17d6:	ff 96       	adiw	r30, 0x3f	; 63
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e4:	dc 01       	movw	r26, r24
    17e6:	cb 01       	movw	r24, r22
    17e8:	9e af       	std	Y+62, r25	; 0x3e
    17ea:	8d af       	std	Y+61, r24	; 0x3d
    17ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ee:	9e ad       	ldd	r25, Y+62	; 0x3e
    17f0:	9a af       	std	Y+58, r25	; 0x3a
    17f2:	89 af       	std	Y+57, r24	; 0x39
    17f4:	89 ad       	ldd	r24, Y+57	; 0x39
    17f6:	9a ad       	ldd	r25, Y+58	; 0x3a
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_displayChar+0x436>
    17fc:	9a af       	std	Y+58, r25	; 0x3a
    17fe:	89 af       	std	Y+57, r24	; 0x39
     #endif

	/*wait tdpw to make enable =0 */
	_delay_ms(1);
	/* make enable =0*/
	Pin_clear(CTRL_OUTPUT_PINS,E);
    1800:	ab e3       	ldi	r26, 0x3B	; 59
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	eb e3       	ldi	r30, 0x3B	; 59
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	87 7f       	andi	r24, 0xF7	; 247
    180c:	8c 93       	st	X, r24
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	a0 e8       	ldi	r26, 0x80	; 128
    1814:	bf e3       	ldi	r27, 0x3F	; 63
    1816:	8d ab       	std	Y+53, r24	; 0x35
    1818:	9e ab       	std	Y+54, r25	; 0x36
    181a:	af ab       	std	Y+55, r26	; 0x37
    181c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181e:	6d a9       	ldd	r22, Y+53	; 0x35
    1820:	7e a9       	ldd	r23, Y+54	; 0x36
    1822:	8f a9       	ldd	r24, Y+55	; 0x37
    1824:	98 ad       	ldd	r25, Y+56	; 0x38
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	4a e7       	ldi	r20, 0x7A	; 122
    182c:	53 e4       	ldi	r21, 0x43	; 67
    182e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1832:	dc 01       	movw	r26, r24
    1834:	cb 01       	movw	r24, r22
    1836:	89 ab       	std	Y+49, r24	; 0x31
    1838:	9a ab       	std	Y+50, r25	; 0x32
    183a:	ab ab       	std	Y+51, r26	; 0x33
    183c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    183e:	69 a9       	ldd	r22, Y+49	; 0x31
    1840:	7a a9       	ldd	r23, Y+50	; 0x32
    1842:	8b a9       	ldd	r24, Y+51	; 0x33
    1844:	9c a9       	ldd	r25, Y+52	; 0x34
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e8       	ldi	r20, 0x80	; 128
    184c:	5f e3       	ldi	r21, 0x3F	; 63
    184e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1852:	88 23       	and	r24, r24
    1854:	2c f4       	brge	.+10     	; 0x1860 <LCD_displayChar+0x49e>
		__ticks = 1;
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	98 ab       	std	Y+48, r25	; 0x30
    185c:	8f a7       	std	Y+47, r24	; 0x2f
    185e:	3f c0       	rjmp	.+126    	; 0x18de <LCD_displayChar+0x51c>
	else if (__tmp > 65535)
    1860:	69 a9       	ldd	r22, Y+49	; 0x31
    1862:	7a a9       	ldd	r23, Y+50	; 0x32
    1864:	8b a9       	ldd	r24, Y+51	; 0x33
    1866:	9c a9       	ldd	r25, Y+52	; 0x34
    1868:	20 e0       	ldi	r18, 0x00	; 0
    186a:	3f ef       	ldi	r19, 0xFF	; 255
    186c:	4f e7       	ldi	r20, 0x7F	; 127
    186e:	57 e4       	ldi	r21, 0x47	; 71
    1870:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1874:	18 16       	cp	r1, r24
    1876:	4c f5       	brge	.+82     	; 0x18ca <LCD_displayChar+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1878:	6d a9       	ldd	r22, Y+53	; 0x35
    187a:	7e a9       	ldd	r23, Y+54	; 0x36
    187c:	8f a9       	ldd	r24, Y+55	; 0x37
    187e:	98 ad       	ldd	r25, Y+56	; 0x38
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e2       	ldi	r20, 0x20	; 32
    1886:	51 e4       	ldi	r21, 0x41	; 65
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	bc 01       	movw	r22, r24
    1892:	cd 01       	movw	r24, r26
    1894:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1898:	dc 01       	movw	r26, r24
    189a:	cb 01       	movw	r24, r22
    189c:	98 ab       	std	Y+48, r25	; 0x30
    189e:	8f a7       	std	Y+47, r24	; 0x2f
    18a0:	0f c0       	rjmp	.+30     	; 0x18c0 <LCD_displayChar+0x4fe>
    18a2:	89 e1       	ldi	r24, 0x19	; 25
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9e a7       	std	Y+46, r25	; 0x2e
    18a8:	8d a7       	std	Y+45, r24	; 0x2d
    18aa:	8d a5       	ldd	r24, Y+45	; 0x2d
    18ac:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_displayChar+0x4ec>
    18b2:	9e a7       	std	Y+46, r25	; 0x2e
    18b4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18b8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	98 ab       	std	Y+48, r25	; 0x30
    18be:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c2:	98 a9       	ldd	r25, Y+48	; 0x30
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	69 f7       	brne	.-38     	; 0x18a2 <LCD_displayChar+0x4e0>
    18c8:	14 c0       	rjmp	.+40     	; 0x18f2 <LCD_displayChar+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ca:	69 a9       	ldd	r22, Y+49	; 0x31
    18cc:	7a a9       	ldd	r23, Y+50	; 0x32
    18ce:	8b a9       	ldd	r24, Y+51	; 0x33
    18d0:	9c a9       	ldd	r25, Y+52	; 0x34
    18d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	98 ab       	std	Y+48, r25	; 0x30
    18dc:	8f a7       	std	Y+47, r24	; 0x2f
    18de:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e0:	98 a9       	ldd	r25, Y+48	; 0x30
    18e2:	9c a7       	std	Y+44, r25	; 0x2c
    18e4:	8b a7       	std	Y+43, r24	; 0x2b
    18e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ea:	01 97       	sbiw	r24, 0x01	; 1
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <LCD_displayChar+0x528>
    18ee:	9c a7       	std	Y+44, r25	; 0x2c
    18f0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*start enabling again*/

		/* Enable =1 */
		Pin_output(CTRL_OUTPUT_PINS  ,E);
    18f2:	ab e3       	ldi	r26, 0x3B	; 59
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	eb e3       	ldi	r30, 0x3B	; 59
    18f8:	f0 e0       	ldi	r31, 0x00	; 0
    18fa:	80 81       	ld	r24, Z
    18fc:	88 60       	ori	r24, 0x08	; 8
    18fe:	8c 93       	st	X, r24
    1900:	80 e0       	ldi	r24, 0x00	; 0
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	a0 e8       	ldi	r26, 0x80	; 128
    1906:	bf e3       	ldi	r27, 0x3F	; 63
    1908:	8f a3       	std	Y+39, r24	; 0x27
    190a:	98 a7       	std	Y+40, r25	; 0x28
    190c:	a9 a7       	std	Y+41, r26	; 0x29
    190e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1910:	6f a1       	ldd	r22, Y+39	; 0x27
    1912:	78 a5       	ldd	r23, Y+40	; 0x28
    1914:	89 a5       	ldd	r24, Y+41	; 0x29
    1916:	9a a5       	ldd	r25, Y+42	; 0x2a
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	4a e7       	ldi	r20, 0x7A	; 122
    191e:	53 e4       	ldi	r21, 0x43	; 67
    1920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	8b a3       	std	Y+35, r24	; 0x23
    192a:	9c a3       	std	Y+36, r25	; 0x24
    192c:	ad a3       	std	Y+37, r26	; 0x25
    192e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1930:	6b a1       	ldd	r22, Y+35	; 0x23
    1932:	7c a1       	ldd	r23, Y+36	; 0x24
    1934:	8d a1       	ldd	r24, Y+37	; 0x25
    1936:	9e a1       	ldd	r25, Y+38	; 0x26
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e8       	ldi	r20, 0x80	; 128
    193e:	5f e3       	ldi	r21, 0x3F	; 63
    1940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1944:	88 23       	and	r24, r24
    1946:	2c f4       	brge	.+10     	; 0x1952 <LCD_displayChar+0x590>
		__ticks = 1;
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9a a3       	std	Y+34, r25	; 0x22
    194e:	89 a3       	std	Y+33, r24	; 0x21
    1950:	3f c0       	rjmp	.+126    	; 0x19d0 <LCD_displayChar+0x60e>
	else if (__tmp > 65535)
    1952:	6b a1       	ldd	r22, Y+35	; 0x23
    1954:	7c a1       	ldd	r23, Y+36	; 0x24
    1956:	8d a1       	ldd	r24, Y+37	; 0x25
    1958:	9e a1       	ldd	r25, Y+38	; 0x26
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	4c f5       	brge	.+82     	; 0x19bc <LCD_displayChar+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196a:	6f a1       	ldd	r22, Y+39	; 0x27
    196c:	78 a5       	ldd	r23, Y+40	; 0x28
    196e:	89 a5       	ldd	r24, Y+41	; 0x29
    1970:	9a a5       	ldd	r25, Y+42	; 0x2a
    1972:	20 e0       	ldi	r18, 0x00	; 0
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	40 e2       	ldi	r20, 0x20	; 32
    1978:	51 e4       	ldi	r21, 0x41	; 65
    197a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197e:	dc 01       	movw	r26, r24
    1980:	cb 01       	movw	r24, r22
    1982:	bc 01       	movw	r22, r24
    1984:	cd 01       	movw	r24, r26
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9a a3       	std	Y+34, r25	; 0x22
    1990:	89 a3       	std	Y+33, r24	; 0x21
    1992:	0f c0       	rjmp	.+30     	; 0x19b2 <LCD_displayChar+0x5f0>
    1994:	89 e1       	ldi	r24, 0x19	; 25
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	98 a3       	std	Y+32, r25	; 0x20
    199a:	8f 8f       	std	Y+31, r24	; 0x1f
    199c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    199e:	98 a1       	ldd	r25, Y+32	; 0x20
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	f1 f7       	brne	.-4      	; 0x19a0 <LCD_displayChar+0x5de>
    19a4:	98 a3       	std	Y+32, r25	; 0x20
    19a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	89 a1       	ldd	r24, Y+33	; 0x21
    19aa:	9a a1       	ldd	r25, Y+34	; 0x22
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	9a a3       	std	Y+34, r25	; 0x22
    19b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b2:	89 a1       	ldd	r24, Y+33	; 0x21
    19b4:	9a a1       	ldd	r25, Y+34	; 0x22
    19b6:	00 97       	sbiw	r24, 0x00	; 0
    19b8:	69 f7       	brne	.-38     	; 0x1994 <LCD_displayChar+0x5d2>
    19ba:	14 c0       	rjmp	.+40     	; 0x19e4 <LCD_displayChar+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19bc:	6b a1       	ldd	r22, Y+35	; 0x23
    19be:	7c a1       	ldd	r23, Y+36	; 0x24
    19c0:	8d a1       	ldd	r24, Y+37	; 0x25
    19c2:	9e a1       	ldd	r25, Y+38	; 0x26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9a a3       	std	Y+34, r25	; 0x22
    19ce:	89 a3       	std	Y+33, r24	; 0x21
    19d0:	89 a1       	ldd	r24, Y+33	; 0x21
    19d2:	9a a1       	ldd	r25, Y+34	; 0x22
    19d4:	9e 8f       	std	Y+30, r25	; 0x1e
    19d6:	8d 8f       	std	Y+29, r24	; 0x1d
    19d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_displayChar+0x61a>
    19e0:	9e 8f       	std	Y+30, r25	; 0x1e
    19e2:	8d 8f       	std	Y+29, r24	; 0x1d
		/*DATA_OUTPUT_PINS = (DATA_OUTPUT_PINS& 0xF0) | (data & 0x0F);*/
		  TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);

     #else
	        /*DATA_OUTPUT_PINS=(DATA_OUTPUT_PINS&0x0F)|((data&0x0F)<<4);*/
		     TAKE_SCCOMMAND(DATA_OUTPUT_PINS,data);
    19e4:	ab e3       	ldi	r26, 0x3B	; 59
    19e6:	b0 e0       	ldi	r27, 0x00	; 0
    19e8:	eb e3       	ldi	r30, 0x3B	; 59
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	28 2f       	mov	r18, r24
    19f0:	2f 70       	andi	r18, 0x0F	; 15
    19f2:	fe 01       	movw	r30, r28
    19f4:	ed 59       	subi	r30, 0x9D	; 157
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	82 95       	swap	r24
    1a00:	92 95       	swap	r25
    1a02:	90 7f       	andi	r25, 0xF0	; 240
    1a04:	98 27       	eor	r25, r24
    1a06:	80 7f       	andi	r24, 0xF0	; 240
    1a08:	98 27       	eor	r25, r24
    1a0a:	82 2b       	or	r24, r18
    1a0c:	8c 93       	st	X, r24
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e8       	ldi	r26, 0x80	; 128
    1a14:	bf e3       	ldi	r27, 0x3F	; 63
    1a16:	89 8f       	std	Y+25, r24	; 0x19
    1a18:	9a 8f       	std	Y+26, r25	; 0x1a
    1a1a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a e7       	ldi	r20, 0x7A	; 122
    1a2c:	53 e4       	ldi	r21, 0x43	; 67
    1a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8d 8b       	std	Y+21, r24	; 0x15
    1a38:	9e 8b       	std	Y+22, r25	; 0x16
    1a3a:	af 8b       	std	Y+23, r26	; 0x17
    1a3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a3e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a40:	7e 89       	ldd	r23, Y+22	; 0x16
    1a42:	8f 89       	ldd	r24, Y+23	; 0x17
    1a44:	98 8d       	ldd	r25, Y+24	; 0x18
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_displayChar+0x69e>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9c 8b       	std	Y+20, r25	; 0x14
    1a5c:	8b 8b       	std	Y+19, r24	; 0x13
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_displayChar+0x71c>
	else if (__tmp > 65535)
    1a60:	6d 89       	ldd	r22, Y+21	; 0x15
    1a62:	7e 89       	ldd	r23, Y+22	; 0x16
    1a64:	8f 89       	ldd	r24, Y+23	; 0x17
    1a66:	98 8d       	ldd	r25, Y+24	; 0x18
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_displayChar+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	69 8d       	ldd	r22, Y+25	; 0x19
    1a7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9c 8b       	std	Y+20, r25	; 0x14
    1a9e:	8b 8b       	std	Y+19, r24	; 0x13
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_displayChar+0x6fe>
    1aa2:	89 e1       	ldi	r24, 0x19	; 25
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9a 8b       	std	Y+18, r25	; 0x12
    1aa8:	89 8b       	std	Y+17, r24	; 0x11
    1aaa:	89 89       	ldd	r24, Y+17	; 0x11
    1aac:	9a 89       	ldd	r25, Y+18	; 0x12
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_displayChar+0x6ec>
    1ab2:	9a 8b       	std	Y+18, r25	; 0x12
    1ab4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_displayChar+0x6e0>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <LCD_displayChar+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6d 89       	ldd	r22, Y+21	; 0x15
    1acc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ace:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
    1ade:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae2:	98 8b       	std	Y+16, r25	; 0x10
    1ae4:	8f 87       	std	Y+15, r24	; 0x0f
    1ae6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae8:	98 89       	ldd	r25, Y+16	; 0x10
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_displayChar+0x728>
    1aee:	98 8b       	std	Y+16, r25	; 0x10
    1af0:	8f 87       	std	Y+15, r24	; 0x0f

#endif
	        /*wait tdpw to make enable =0 */
	        	_delay_ms(1);
	        	/* make enable =0*/
	        	Pin_clear(CTRL_OUTPUT_PINS,E);
    1af2:	ab e3       	ldi	r26, 0x3B	; 59
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	eb e3       	ldi	r30, 0x3B	; 59
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	87 7f       	andi	r24, 0xF7	; 247
    1afe:	8c 93       	st	X, r24
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a0 e8       	ldi	r26, 0x80	; 128
    1b06:	bf e3       	ldi	r27, 0x3F	; 63
    1b08:	8b 87       	std	Y+11, r24	; 0x0b
    1b0a:	9c 87       	std	Y+12, r25	; 0x0c
    1b0c:	ad 87       	std	Y+13, r26	; 0x0d
    1b0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	4a e7       	ldi	r20, 0x7A	; 122
    1b1e:	53 e4       	ldi	r21, 0x43	; 67
    1b20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	8f 83       	std	Y+7, r24	; 0x07
    1b2a:	98 87       	std	Y+8, r25	; 0x08
    1b2c:	a9 87       	std	Y+9, r26	; 0x09
    1b2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b30:	6f 81       	ldd	r22, Y+7	; 0x07
    1b32:	78 85       	ldd	r23, Y+8	; 0x08
    1b34:	89 85       	ldd	r24, Y+9	; 0x09
    1b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b44:	88 23       	and	r24, r24
    1b46:	2c f4       	brge	.+10     	; 0x1b52 <LCD_displayChar+0x790>
		__ticks = 1;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	9e 83       	std	Y+6, r25	; 0x06
    1b4e:	8d 83       	std	Y+5, r24	; 0x05
    1b50:	3f c0       	rjmp	.+126    	; 0x1bd0 <LCD_displayChar+0x80e>
	else if (__tmp > 65535)
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	3f ef       	ldi	r19, 0xFF	; 255
    1b5e:	4f e7       	ldi	r20, 0x7F	; 127
    1b60:	57 e4       	ldi	r21, 0x47	; 71
    1b62:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b66:	18 16       	cp	r1, r24
    1b68:	4c f5       	brge	.+82     	; 0x1bbc <LCD_displayChar+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e2       	ldi	r20, 0x20	; 32
    1b78:	51 e4       	ldi	r21, 0x41	; 65
    1b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	bc 01       	movw	r22, r24
    1b84:	cd 01       	movw	r24, r26
    1b86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	9e 83       	std	Y+6, r25	; 0x06
    1b90:	8d 83       	std	Y+5, r24	; 0x05
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <LCD_displayChar+0x7f0>
    1b94:	89 e1       	ldi	r24, 0x19	; 25
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9c 83       	std	Y+4, r25	; 0x04
    1b9a:	8b 83       	std	Y+3, r24	; 0x03
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	f1 f7       	brne	.-4      	; 0x1ba0 <LCD_displayChar+0x7de>
    1ba4:	9c 83       	std	Y+4, r25	; 0x04
    1ba6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ba8:	8d 81       	ldd	r24, Y+5	; 0x05
    1baa:	9e 81       	ldd	r25, Y+6	; 0x06
    1bac:	01 97       	sbiw	r24, 0x01	; 1
    1bae:	9e 83       	std	Y+6, r25	; 0x06
    1bb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	00 97       	sbiw	r24, 0x00	; 0
    1bb8:	69 f7       	brne	.-38     	; 0x1b94 <LCD_displayChar+0x7d2>
    1bba:	14 c0       	rjmp	.+40     	; 0x1be4 <LCD_displayChar+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bbe:	78 85       	ldd	r23, Y+8	; 0x08
    1bc0:	89 85       	ldd	r24, Y+9	; 0x09
    1bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	9a 83       	std	Y+2, r25	; 0x02
    1bd6:	89 83       	std	Y+1, r24	; 0x01
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	9a 81       	ldd	r25, Y+2	; 0x02
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	f1 f7       	brne	.-4      	; 0x1bdc <LCD_displayChar+0x81a>
    1be0:	9a 83       	std	Y+2, r25	; 0x02
    1be2:	89 83       	std	Y+1, r24	; 0x01
	        	/*wait th 13ns */
	        	_delay_ms(1);


}
    1be4:	cd 59       	subi	r28, 0x9D	; 157
    1be6:	df 4f       	sbci	r29, 0xFF	; 255
    1be8:	0f b6       	in	r0, 0x3f	; 63
    1bea:	f8 94       	cli
    1bec:	de bf       	out	0x3e, r29	; 62
    1bee:	0f be       	out	0x3f, r0	; 63
    1bf0:	cd bf       	out	0x3d, r28	; 61
    1bf2:	cf 91       	pop	r28
    1bf4:	df 91       	pop	r29
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	08 95       	ret

00001bfc <LCD_displayString>:




   void LCD_displayString(const char *Str)
   {
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <LCD_displayString+0x6>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	9a 83       	std	Y+2, r25	; 0x02
    1c08:	89 83       	std	Y+1, r24	; 0x01
    1c0a:	0a c0       	rjmp	.+20     	; 0x1c20 <LCD_displayString+0x24>

   	while((*Str) != '\0')
   	{
   		LCD_displayChar(*Str);
    1c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c10:	80 81       	ld	r24, Z
    1c12:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCD_displayChar>
   		Str++;
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	01 96       	adiw	r24, 0x01	; 1
    1c1c:	9a 83       	std	Y+2, r25	; 0x02
    1c1e:	89 83       	std	Y+1, r24	; 0x01


   void LCD_displayString(const char *Str)
   {

   	while((*Str) != '\0')
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	80 81       	ld	r24, Z
    1c26:	88 23       	and	r24, r24
    1c28:	89 f7       	brne	.-30     	; 0x1c0c <LCD_displayString+0x10>
   	{
   		LCD_displayChar(*Str);
   		Str++;
   	}
   }
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	cf 91       	pop	r28
    1c30:	df 91       	pop	r29
    1c32:	08 95       	ret

00001c34 <LCD_gotoRawCol>:


   void LCD_gotoRawCol(unit8 row, unit8 col){
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <LCD_gotoRawCol+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <LCD_gotoRawCol+0x8>
    1c3c:	0f 92       	push	r0
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	8a 83       	std	Y+2, r24	; 0x02
    1c44:	6b 83       	std	Y+3, r22	; 0x03
	   unit8 address;
	   switch(row){
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	28 2f       	mov	r18, r24
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	3d 83       	std	Y+5, r19	; 0x05
    1c4e:	2c 83       	std	Y+4, r18	; 0x04
    1c50:	8c 81       	ldd	r24, Y+4	; 0x04
    1c52:	9d 81       	ldd	r25, Y+5	; 0x05
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	31 f0       	breq	.+12     	; 0x1c64 <LCD_gotoRawCol+0x30>
    1c58:	2c 81       	ldd	r18, Y+4	; 0x04
    1c5a:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5c:	21 30       	cpi	r18, 0x01	; 1
    1c5e:	31 05       	cpc	r19, r1
    1c60:	21 f0       	breq	.+8      	; 0x1c6a <LCD_gotoRawCol+0x36>
    1c62:	06 c0       	rjmp	.+12     	; 0x1c70 <LCD_gotoRawCol+0x3c>
	       case 0:
		      address=col;
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	03 c0       	rjmp	.+6      	; 0x1c70 <LCD_gotoRawCol+0x3c>
		       break;
	       case 1:
		      address=0x40+col;
    1c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6c:	80 5c       	subi	r24, 0xC0	; 192
    1c6e:	89 83       	std	Y+1, r24	; 0x01
	        }
	    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	80 68       	ori	r24, 0x80	; 128
    1c74:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>

	   }
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <LCD_IntToStr>:



void LCD_IntToStr(unit8 data){
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	61 97       	sbiw	r28, 0x11	; 17
    1c92:	0f b6       	in	r0, 0x3f	; 63
    1c94:	f8 94       	cli
    1c96:	de bf       	out	0x3e, r29	; 62
    1c98:	0f be       	out	0x3f, r0	; 63
    1c9a:	cd bf       	out	0x3d, r28	; 61
    1c9c:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(data,buff,10);
    1c9e:	89 89       	ldd	r24, Y+17	; 0x11
    1ca0:	88 2f       	mov	r24, r24
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	9e 01       	movw	r18, r28
    1ca6:	2f 5f       	subi	r18, 0xFF	; 255
    1ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    1caa:	b9 01       	movw	r22, r18
    1cac:	4a e0       	ldi	r20, 0x0A	; 10
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	0e 94 0b 1c 	call	0x3816	; 0x3816 <itoa>
	LCD_displayString(buff);
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	01 96       	adiw	r24, 0x01	; 1
    1cb8:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <LCD_displayString>
}
    1cbc:	61 96       	adiw	r28, 0x11	; 17
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <LCD_displayStrRowCol>:


void LCD_displayStrRowCol(unit8 row,unit8 col,const char *Str){
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
    1cd6:	28 97       	sbiw	r28, 0x08	; 8
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	8b 83       	std	Y+3, r24	; 0x03
    1ce4:	6c 83       	std	Y+4, r22	; 0x04
    1ce6:	5e 83       	std	Y+6, r21	; 0x06
    1ce8:	4d 83       	std	Y+5, r20	; 0x05
	unit8 address,i=0;
    1cea:	19 82       	std	Y+1, r1	; 0x01
		   switch(row){
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	38 87       	std	Y+8, r19	; 0x08
    1cf4:	2f 83       	std	Y+7, r18	; 0x07
    1cf6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cf8:	98 85       	ldd	r25, Y+8	; 0x08
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	31 f0       	breq	.+12     	; 0x1d0a <LCD_displayStrRowCol+0x3c>
    1cfe:	2f 81       	ldd	r18, Y+7	; 0x07
    1d00:	38 85       	ldd	r19, Y+8	; 0x08
    1d02:	21 30       	cpi	r18, 0x01	; 1
    1d04:	31 05       	cpc	r19, r1
    1d06:	21 f0       	breq	.+8      	; 0x1d10 <LCD_displayStrRowCol+0x42>
    1d08:	06 c0       	rjmp	.+12     	; 0x1d16 <LCD_displayStrRowCol+0x48>
		       case 0:
			      address=col;
    1d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d0c:	8a 83       	std	Y+2, r24	; 0x02
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <LCD_displayStrRowCol+0x48>
			       break;
		       case 1:
			      address=0x40+col;
    1d10:	8c 81       	ldd	r24, Y+4	; 0x04
    1d12:	80 5c       	subi	r24, 0xC0	; 192
    1d14:	8a 83       	std	Y+2, r24	; 0x02
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	80 68       	ori	r24, 0x80	; 128
    1d1a:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
    1d1e:	10 c0       	rjmp	.+32     	; 0x1d40 <LCD_displayStrRowCol+0x72>

	while((*Str) != '\0')
   	{
   		LCD_displayChar(Str[i]);
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	e2 0f       	add	r30, r18
    1d2e:	f3 1f       	adc	r31, r19
    1d30:	80 81       	ld	r24, Z
    1d32:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <LCD_displayChar>
   		Str++;
    1d36:	8d 81       	ldd	r24, Y+5	; 0x05
    1d38:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3a:	01 96       	adiw	r24, 0x01	; 1
    1d3c:	9e 83       	std	Y+6, r25	; 0x06
    1d3e:	8d 83       	std	Y+5, r24	; 0x05
		       case 1:
			      address=0x40+col;
		        }
    LCD_sendCommand(address|CURSOR_MoveToFirstLoc);

	while((*Str) != '\0')
    1d40:	ed 81       	ldd	r30, Y+5	; 0x05
    1d42:	fe 81       	ldd	r31, Y+6	; 0x06
    1d44:	80 81       	ld	r24, Z
    1d46:	88 23       	and	r24, r24
    1d48:	59 f7       	brne	.-42     	; 0x1d20 <LCD_displayStrRowCol+0x52>
   	{
   		LCD_displayChar(Str[i]);
   		Str++;
   	}
}
    1d4a:	28 96       	adiw	r28, 0x08	; 8
    1d4c:	0f b6       	in	r0, 0x3f	; 63
    1d4e:	f8 94       	cli
    1d50:	de bf       	out	0x3e, r29	; 62
    1d52:	0f be       	out	0x3f, r0	; 63
    1d54:	cd bf       	out	0x3d, r28	; 61
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <LCD_clearScreen>:


void LCD_clearScreen(void)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_LCD); //clear display
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	0e 94 c4 05 	call	0xb88	; 0xb88 <LCD_sendCommand>
}
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <ISR_TIMER0_OVF>:
 * ****************************************************************************************************
 * *******************************************************************************************************/
/*TIMER0________________Interrupt*/

void ISR_TIMER0_OVF(void)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR)
    1d78:	80 91 92 00 	lds	r24, 0x0092
    1d7c:	90 91 93 00 	lds	r25, 0x0093
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	29 f0       	breq	.+10     	; 0x1d8e <ISR_TIMER0_OVF+0x1e>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    1d84:	e0 91 92 00 	lds	r30, 0x0092
    1d88:	f0 91 93 00 	lds	r31, 0x0093
    1d8c:	09 95       	icall
		/* another method to call the function using pointer to function g_callBackPtr(); */
	}
}
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <ISR_TIMER0_COMP>:



void ISR_TIMER0_COMP (void)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	cd b7       	in	r28, 0x3d	; 61
    1d9a:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr2 != NULL_PTR)
    1d9c:	80 91 94 00 	lds	r24, 0x0094
    1da0:	90 91 95 00 	lds	r25, 0x0095
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	29 f0       	breq	.+10     	; 0x1db2 <ISR_TIMER0_COMP+0x1e>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)();
    1da8:	e0 91 94 00 	lds	r30, 0x0094
    1dac:	f0 91 95 00 	lds	r31, 0x0095
    1db0:	09 95       	icall
		/* another method to call the function using pointer to function g_callBackPtr(); */
	}

}
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <ISR_TIMER2_OVF>:
 * *******************************************************************************************************/

/*Timer2_______Interrupt*/

void ISR_TIMER2_OVF (void)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1dc0:	80 91 92 00 	lds	r24, 0x0092
    1dc4:	90 91 93 00 	lds	r25, 0x0093
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	29 f0       	breq	.+10     	; 0x1dd6 <ISR_TIMER2_OVF+0x1e>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1dcc:	e0 91 92 00 	lds	r30, 0x0092
    1dd0:	f0 91 93 00 	lds	r31, 0x0093
    1dd4:	09 95       	icall
	}
}
    1dd6:	cf 91       	pop	r28
    1dd8:	df 91       	pop	r29
    1dda:	08 95       	ret

00001ddc <ISR_TIMER2_COMP>:



void ISR_TIMER2_COMP (void)
{
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr2 != NULL_PTR)
    1de4:	80 91 94 00 	lds	r24, 0x0094
    1de8:	90 91 95 00 	lds	r25, 0x0095
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	29 f0       	breq	.+10     	; 0x1dfa <ISR_TIMER2_COMP+0x1e>
	{ 		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr2)();
    1df0:	e0 91 94 00 	lds	r30, 0x0094
    1df4:	f0 91 95 00 	lds	r31, 0x0095
    1df8:	09 95       	icall
		/* another method to call the function using pointer to function g_callBackPtr(); */

	}

}
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <Timer_setCallBack>:
 * *******************************************************************************************************
 * ****************************************************************************************************
 * *******************************************************************************************************/

void Timer_setCallBack(void(*a_ptr)(void))
{
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <Timer_setCallBack+0x6>
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	9a 83       	std	Y+2, r25	; 0x02
    1e0c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
    1e10:	9a 81       	ldd	r25, Y+2	; 0x02
    1e12:	90 93 93 00 	sts	0x0093, r25
    1e16:	80 93 92 00 	sts	0x0092, r24
}
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	cf 91       	pop	r28
    1e20:	df 91       	pop	r29
    1e22:	08 95       	ret

00001e24 <Timer_setCallBack2>:



void Timer_setCallBack2(void(*a_ptr)(void))
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <Timer_setCallBack2+0x6>
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	9a 83       	std	Y+2, r25	; 0x02
    1e30:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr2 = a_ptr;
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	9a 81       	ldd	r25, Y+2	; 0x02
    1e36:	90 93 95 00 	sts	0x0095, r25
    1e3a:	80 93 94 00 	sts	0x0094, r24
}
    1e3e:	0f 90       	pop	r0
    1e40:	0f 90       	pop	r0
    1e42:	cf 91       	pop	r28
    1e44:	df 91       	pop	r29
    1e46:	08 95       	ret

00001e48 <timer_init>:
 * ****************************************************************************************************
 * *******************************************************************************************************/


void timer_init(void )
{
    1e48:	df 93       	push	r29
    1e4a:	cf 93       	push	r28
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	29 97       	sbiw	r28, 0x09	; 9
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
	uint8_t Loop_index=0;
    1e5c:	19 82       	std	Y+1, r1	; 0x01


	for(Loop_index=0;Loop_index<MAX_num_of_timers;Loop_index++)
    1e5e:	19 82       	std	Y+1, r1	; 0x01
    1e60:	83 c4       	rjmp	.+2310   	; 0x2768 <timer_init+0x920>
	{
		switch(Timers_setup[Loop_index].T_type)
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	9c 01       	movw	r18, r24
    1e6e:	22 0f       	add	r18, r18
    1e70:	33 1f       	adc	r19, r19
    1e72:	22 0f       	add	r18, r18
    1e74:	33 1f       	adc	r19, r19
    1e76:	82 0f       	add	r24, r18
    1e78:	93 1f       	adc	r25, r19
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	ea 58       	subi	r30, 0x8A	; 138
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	39 87       	std	Y+9, r19	; 0x09
    1e88:	28 87       	std	Y+8, r18	; 0x08
    1e8a:	88 85       	ldd	r24, Y+8	; 0x08
    1e8c:	99 85       	ldd	r25, Y+9	; 0x09
    1e8e:	81 30       	cpi	r24, 0x01	; 1
    1e90:	91 05       	cpc	r25, r1
    1e92:	09 f4       	brne	.+2      	; 0x1e96 <timer_init+0x4e>
    1e94:	f5 c0       	rjmp	.+490    	; 0x2080 <timer_init+0x238>
    1e96:	28 85       	ldd	r18, Y+8	; 0x08
    1e98:	39 85       	ldd	r19, Y+9	; 0x09
    1e9a:	22 30       	cpi	r18, 0x02	; 2
    1e9c:	31 05       	cpc	r19, r1
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <timer_init+0x5a>
    1ea0:	77 c3       	rjmp	.+1774   	; 0x2590 <timer_init+0x748>
    1ea2:	88 85       	ldd	r24, Y+8	; 0x08
    1ea4:	99 85       	ldd	r25, Y+9	; 0x09
    1ea6:	00 97       	sbiw	r24, 0x00	; 0
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <timer_init+0x64>
    1eaa:	5b c4       	rjmp	.+2230   	; 0x2762 <timer_init+0x91a>
		{
		case Timer0:

			TCNT0=0; //timer initial value
    1eac:	e2 e5       	ldi	r30, 0x52	; 82
    1eae:	f0 e0       	ldi	r31, 0x00	; 0
    1eb0:	10 82       	st	Z, r1

			/*******************TIMER0 EDIT SETTINGS************/

			TCCR0 = (1<<FOC0) | (Timers_setup[Loop_index].T_clk)
    1eb2:	a3 e5       	ldi	r26, 0x53	; 83
    1eb4:	b0 e0       	ldi	r27, 0x00	; 0
    1eb6:	89 81       	ldd	r24, Y+1	; 0x01
    1eb8:	88 2f       	mov	r24, r24
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	22 0f       	add	r18, r18
    1ec8:	33 1f       	adc	r19, r19
    1eca:	82 0f       	add	r24, r18
    1ecc:	93 1f       	adc	r25, r19
    1ece:	fc 01       	movw	r30, r24
    1ed0:	e8 58       	subi	r30, 0x88	; 136
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 81       	ld	r24, Z
    1ed6:	80 68       	ori	r24, 0x80	; 128
    1ed8:	48 2f       	mov	r20, r24
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	9c 01       	movw	r18, r24
    1ee6:	22 0f       	add	r18, r18
    1ee8:	33 1f       	adc	r19, r19
    1eea:	22 0f       	add	r18, r18
    1eec:	33 1f       	adc	r19, r19
    1eee:	82 0f       	add	r24, r18
    1ef0:	93 1f       	adc	r25, r19
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	e7 58       	subi	r30, 0x87	; 135
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	80 81       	ld	r24, Z
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	82 70       	andi	r24, 0x02	; 2
    1f00:	90 70       	andi	r25, 0x00	; 0
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	48 2b       	or	r20, r24
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	88 2f       	mov	r24, r24
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	88 0f       	add	r24, r24
    1f14:	99 1f       	adc	r25, r25
    1f16:	9c 01       	movw	r18, r24
    1f18:	22 0f       	add	r18, r18
    1f1a:	33 1f       	adc	r19, r19
    1f1c:	22 0f       	add	r18, r18
    1f1e:	33 1f       	adc	r19, r19
    1f20:	82 0f       	add	r24, r18
    1f22:	93 1f       	adc	r25, r19
    1f24:	fc 01       	movw	r30, r24
    1f26:	e7 58       	subi	r30, 0x87	; 135
    1f28:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2a:	80 81       	ld	r24, Z
    1f2c:	88 2f       	mov	r24, r24
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	81 70       	andi	r24, 0x01	; 1
    1f32:	90 70       	andi	r25, 0x00	; 0
    1f34:	00 24       	eor	r0, r0
    1f36:	96 95       	lsr	r25
    1f38:	87 95       	ror	r24
    1f3a:	07 94       	ror	r0
    1f3c:	96 95       	lsr	r25
    1f3e:	87 95       	ror	r24
    1f40:	07 94       	ror	r0
    1f42:	98 2f       	mov	r25, r24
    1f44:	80 2d       	mov	r24, r0
    1f46:	48 2b       	or	r20, r24
    1f48:	89 81       	ldd	r24, Y+1	; 0x01
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	9c 01       	movw	r18, r24
    1f54:	22 0f       	add	r18, r18
    1f56:	33 1f       	adc	r19, r19
    1f58:	22 0f       	add	r18, r18
    1f5a:	33 1f       	adc	r19, r19
    1f5c:	82 0f       	add	r24, r18
    1f5e:	93 1f       	adc	r25, r19
    1f60:	fc 01       	movw	r30, r24
    1f62:	e4 58       	subi	r30, 0x84	; 132
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	82 95       	swap	r24
    1f6e:	92 95       	swap	r25
    1f70:	90 7f       	andi	r25, 0xF0	; 240
    1f72:	98 27       	eor	r25, r24
    1f74:	80 7f       	andi	r24, 0xF0	; 240
    1f76:	98 27       	eor	r25, r24
    1f78:	84 2b       	or	r24, r20
    1f7a:	8c 93       	st	X, r24
				    |((Timers_setup[Loop_index].T_WGMode&0x01)<<6)
					|(Timers_setup[Loop_index].T_Compare_out_mode<<4);

			/*************CHOOSE TIMER0 MODES*************************/

			switch(Timers_setup[Loop_index].T_WGMode)   //enable overflow interrupt
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	9c 01       	movw	r18, r24
    1f88:	22 0f       	add	r18, r18
    1f8a:	33 1f       	adc	r19, r19
    1f8c:	22 0f       	add	r18, r18
    1f8e:	33 1f       	adc	r19, r19
    1f90:	82 0f       	add	r24, r18
    1f92:	93 1f       	adc	r25, r19
    1f94:	fc 01       	movw	r30, r24
    1f96:	e7 58       	subi	r30, 0x87	; 135
    1f98:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9a:	80 81       	ld	r24, Z
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	3f 83       	std	Y+7, r19	; 0x07
    1fa2:	2e 83       	std	Y+6, r18	; 0x06
    1fa4:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa6:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa8:	82 30       	cpi	r24, 0x02	; 2
    1faa:	91 05       	cpc	r25, r1
    1fac:	31 f1       	breq	.+76     	; 0x1ffa <timer_init+0x1b2>
    1fae:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb0:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb2:	23 30       	cpi	r18, 0x03	; 3
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	09 f4       	brne	.+2      	; 0x1fba <timer_init+0x172>
    1fb8:	4e c0       	rjmp	.+156    	; 0x2056 <timer_init+0x20e>
    1fba:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <timer_init+0x17c>
    1fc2:	cf c3       	rjmp	.+1950   	; 0x2762 <timer_init+0x91a>
			{
			case WG_Normal:
				if(Timers_setup[Loop_index].T_INT)
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	88 2f       	mov	r24, r24
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	9c 01       	movw	r18, r24
    1fd0:	22 0f       	add	r18, r18
    1fd2:	33 1f       	adc	r19, r19
    1fd4:	22 0f       	add	r18, r18
    1fd6:	33 1f       	adc	r19, r19
    1fd8:	82 0f       	add	r24, r18
    1fda:	93 1f       	adc	r25, r19
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e9 58       	subi	r30, 0x89	; 137
    1fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <timer_init+0x1a2>
    1fe8:	bc c3       	rjmp	.+1912   	; 0x2762 <timer_init+0x91a>
					TIMSK |= (1<<TOIE0);				 //En_TOF_interrupt of timer0
    1fea:	a9 e5       	ldi	r26, 0x59	; 89
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	e9 e5       	ldi	r30, 0x59	; 89
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	81 60       	ori	r24, 0x01	; 1
    1ff6:	8c 93       	st	X, r24
    1ff8:	b4 c3       	rjmp	.+1896   	; 0x2762 <timer_init+0x91a>

				break;
				/***********************************************/

			case WG_CTC :
				if(Timers_setup[Loop_index].T_INT)
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	88 2f       	mov	r24, r24
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	88 0f       	add	r24, r24
    2002:	99 1f       	adc	r25, r25
    2004:	9c 01       	movw	r18, r24
    2006:	22 0f       	add	r18, r18
    2008:	33 1f       	adc	r19, r19
    200a:	22 0f       	add	r18, r18
    200c:	33 1f       	adc	r19, r19
    200e:	82 0f       	add	r24, r18
    2010:	93 1f       	adc	r25, r19
    2012:	fc 01       	movw	r30, r24
    2014:	e9 58       	subi	r30, 0x89	; 137
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	80 81       	ld	r24, Z
    201a:	88 23       	and	r24, r24
    201c:	39 f0       	breq	.+14     	; 0x202c <timer_init+0x1e4>
					TIMSK |= (1<<OCIE0);				//En_TCOM_interrupt of timer0
    201e:	a9 e5       	ldi	r26, 0x59	; 89
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	e9 e5       	ldi	r30, 0x59	; 89
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	82 60       	ori	r24, 0x02	; 2
    202a:	8c 93       	st	X, r24

				OCR0 = Timers_setup[Loop_index].ComVal;
    202c:	ac e5       	ldi	r26, 0x5C	; 92
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	89 81       	ldd	r24, Y+1	; 0x01
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	9c 01       	movw	r18, r24
    203c:	22 0f       	add	r18, r18
    203e:	33 1f       	adc	r19, r19
    2040:	22 0f       	add	r18, r18
    2042:	33 1f       	adc	r19, r19
    2044:	82 0f       	add	r24, r18
    2046:	93 1f       	adc	r25, r19
    2048:	fc 01       	movw	r30, r24
    204a:	e6 58       	subi	r30, 0x86	; 134
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	8c 93       	st	X, r24
    2054:	86 c3       	rjmp	.+1804   	; 0x2762 <timer_init+0x91a>

				break;
				/*****************************************************/

			case WG_FPWM :
				OCR0 = Timers_setup[Loop_index].ComVal;
    2056:	ac e5       	ldi	r26, 0x5C	; 92
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	89 81       	ldd	r24, Y+1	; 0x01
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	88 0f       	add	r24, r24
    2062:	99 1f       	adc	r25, r25
    2064:	9c 01       	movw	r18, r24
    2066:	22 0f       	add	r18, r18
    2068:	33 1f       	adc	r19, r19
    206a:	22 0f       	add	r18, r18
    206c:	33 1f       	adc	r19, r19
    206e:	82 0f       	add	r24, r18
    2070:	93 1f       	adc	r25, r19
    2072:	fc 01       	movw	r30, r24
    2074:	e6 58       	subi	r30, 0x86	; 134
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	8c 93       	st	X, r24
    207e:	71 c3       	rjmp	.+1762   	; 0x2762 <timer_init+0x91a>
			break;



			case Timer1:
				TCNT1 = 0; // clear T1
    2080:	ec e4       	ldi	r30, 0x4C	; 76
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	11 82       	std	Z+1, r1	; 0x01
    2086:	10 82       	st	Z, r1
				TCCR1A=0;//added
    2088:	ef e4       	ldi	r30, 0x4F	; 79
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	10 82       	st	Z, r1
				TCCR1B=0;//added
    208e:	ee e4       	ldi	r30, 0x4E	; 78
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	10 82       	st	Z, r1
				TCCR1A=(TCCR1A &0XFC)|((Timers_setup[Loop_index].T_WGMode) &0X03);//MODE SELECT //adjusted
    2094:	af e4       	ldi	r26, 0x4F	; 79
    2096:	b0 e0       	ldi	r27, 0x00	; 0
    2098:	ef e4       	ldi	r30, 0x4F	; 79
    209a:	f0 e0       	ldi	r31, 0x00	; 0
    209c:	80 81       	ld	r24, Z
    209e:	48 2f       	mov	r20, r24
    20a0:	4c 7f       	andi	r20, 0xFC	; 252
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	88 0f       	add	r24, r24
    20aa:	99 1f       	adc	r25, r25
    20ac:	9c 01       	movw	r18, r24
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	22 0f       	add	r18, r18
    20b4:	33 1f       	adc	r19, r19
    20b6:	82 0f       	add	r24, r18
    20b8:	93 1f       	adc	r25, r19
    20ba:	fc 01       	movw	r30, r24
    20bc:	e7 58       	subi	r30, 0x87	; 135
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	80 81       	ld	r24, Z
    20c2:	83 70       	andi	r24, 0x03	; 3
    20c4:	84 2b       	or	r24, r20
    20c6:	8c 93       	st	X, r24
				TCCR1B=(TCCR1B &0XE7)|(((Timers_setup[Loop_index].T_WGMode)<<1)&0X18);//MODE SELECT BITS //adjusted
    20c8:	ae e4       	ldi	r26, 0x4E	; 78
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	ee e4       	ldi	r30, 0x4E	; 78
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	48 2f       	mov	r20, r24
    20d4:	47 7e       	andi	r20, 0xE7	; 231
    20d6:	89 81       	ldd	r24, Y+1	; 0x01
    20d8:	88 2f       	mov	r24, r24
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	9c 01       	movw	r18, r24
    20e2:	22 0f       	add	r18, r18
    20e4:	33 1f       	adc	r19, r19
    20e6:	22 0f       	add	r18, r18
    20e8:	33 1f       	adc	r19, r19
    20ea:	82 0f       	add	r24, r18
    20ec:	93 1f       	adc	r25, r19
    20ee:	fc 01       	movw	r30, r24
    20f0:	e7 58       	subi	r30, 0x87	; 135
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	88 2f       	mov	r24, r24
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	88 0f       	add	r24, r24
    20fc:	99 1f       	adc	r25, r25
    20fe:	88 71       	andi	r24, 0x18	; 24
    2100:	84 2b       	or	r24, r20
    2102:	8c 93       	st	X, r24
				TCCR1B |= (TCCR1B & 0xF8) | Timers_setup[Loop_index].T_clk;//CLK SET //adjusted
    2104:	ae e4       	ldi	r26, 0x4E	; 78
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	ee e4       	ldi	r30, 0x4E	; 78
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	58 2f       	mov	r21, r24
    2110:	ee e4       	ldi	r30, 0x4E	; 78
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	48 7f       	andi	r20, 0xF8	; 248
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	88 2f       	mov	r24, r24
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	9c 01       	movw	r18, r24
    2126:	22 0f       	add	r18, r18
    2128:	33 1f       	adc	r19, r19
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	fc 01       	movw	r30, r24
    2134:	e8 58       	subi	r30, 0x88	; 136
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	80 81       	ld	r24, Z
    213a:	84 2b       	or	r24, r20
    213c:	85 2b       	or	r24, r21
    213e:	8c 93       	st	X, r24


				switch(Timers_setup[Loop_index].T_WGMode)   //enable overflow interrupt
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	9c 01       	movw	r18, r24
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	22 0f       	add	r18, r18
    2152:	33 1f       	adc	r19, r19
    2154:	82 0f       	add	r24, r18
    2156:	93 1f       	adc	r25, r19
    2158:	fc 01       	movw	r30, r24
    215a:	e7 58       	subi	r30, 0x87	; 135
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	80 81       	ld	r24, Z
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	3d 83       	std	Y+5, r19	; 0x05
    2166:	2c 83       	std	Y+4, r18	; 0x04
    2168:	8c 81       	ldd	r24, Y+4	; 0x04
    216a:	9d 81       	ldd	r25, Y+5	; 0x05
    216c:	81 30       	cpi	r24, 0x01	; 1
    216e:	91 05       	cpc	r25, r1
    2170:	09 f4       	brne	.+2      	; 0x2174 <timer_init+0x32c>
    2172:	aa c0       	rjmp	.+340    	; 0x22c8 <timer_init+0x480>
    2174:	2c 81       	ldd	r18, Y+4	; 0x04
    2176:	3d 81       	ldd	r19, Y+5	; 0x05
    2178:	24 30       	cpi	r18, 0x04	; 4
    217a:	31 05       	cpc	r19, r1
    217c:	09 f4       	brne	.+2      	; 0x2180 <timer_init+0x338>
    217e:	82 c0       	rjmp	.+260    	; 0x2284 <timer_init+0x43c>
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	9d 81       	ldd	r25, Y+5	; 0x05
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	09 f0       	breq	.+2      	; 0x218a <timer_init+0x342>
    2188:	ec c2       	rjmp	.+1496   	; 0x2762 <timer_init+0x91a>
				{
				case WG_Normal:
					//ADDED
					if(Timers_setup[Loop_index].T_ICU == EN_ICU)
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	88 2f       	mov	r24, r24
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	88 0f       	add	r24, r24
    2192:	99 1f       	adc	r25, r25
    2194:	9c 01       	movw	r18, r24
    2196:	22 0f       	add	r18, r18
    2198:	33 1f       	adc	r19, r19
    219a:	22 0f       	add	r18, r18
    219c:	33 1f       	adc	r19, r19
    219e:	82 0f       	add	r24, r18
    21a0:	93 1f       	adc	r25, r19
    21a2:	fc 01       	movw	r30, r24
    21a4:	ec 58       	subi	r30, 0x8C	; 140
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	88 23       	and	r24, r24
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <timer_init+0x368>
    21ae:	4f c0       	rjmp	.+158    	; 0x224e <timer_init+0x406>
					{
						DDRD &= ~(1<<PD6);
    21b0:	a1 e3       	ldi	r26, 0x31	; 49
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e1 e3       	ldi	r30, 0x31	; 49
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	8f 7b       	andi	r24, 0xBF	; 191
    21bc:	8c 93       	st	X, r24
						ICR1H =0;
    21be:	e7 e4       	ldi	r30, 0x47	; 71
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	10 82       	st	Z, r1
						ICR1L =0;
    21c4:	e6 e4       	ldi	r30, 0x46	; 70
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	10 82       	st	Z, r1
						TCNT1H=0;
    21ca:	ed e4       	ldi	r30, 0x4D	; 77
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	10 82       	st	Z, r1
						TCNT1L=0;
    21d0:	ec e4       	ldi	r30, 0x4C	; 76
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	10 82       	st	Z, r1
						TIMSK |= (1<<TICIE1);
    21d6:	a9 e5       	ldi	r26, 0x59	; 89
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e9 e5       	ldi	r30, 0x59	; 89
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	80 62       	ori	r24, 0x20	; 32
    21e2:	8c 93       	st	X, r24
						if(Timers_setup[Loop_index].CLK_EDGE == Rising)
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	c9 01       	movw	r24, r18
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	82 0f       	add	r24, r18
    21f6:	93 1f       	adc	r25, r19
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	fc 01       	movw	r30, r24
    2200:	ed 58       	subi	r30, 0x8D	; 141
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	81 30       	cpi	r24, 0x01	; 1
    2208:	41 f4       	brne	.+16     	; 0x221a <timer_init+0x3d2>
						{
							TCCR1B = (TCCR1B & 0xBF) | ((Rising)<<6);
    220a:	ae e4       	ldi	r26, 0x4E	; 78
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	ee e4       	ldi	r30, 0x4E	; 78
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	80 64       	ori	r24, 0x40	; 64
    2216:	8c 93       	st	X, r24
    2218:	1a c0       	rjmp	.+52     	; 0x224e <timer_init+0x406>
						}
						else if (Timers_setup[Loop_index].CLK_EDGE == Falling)
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	28 2f       	mov	r18, r24
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	c9 01       	movw	r24, r18
    2222:	88 0f       	add	r24, r24
    2224:	99 1f       	adc	r25, r25
    2226:	88 0f       	add	r24, r24
    2228:	99 1f       	adc	r25, r25
    222a:	82 0f       	add	r24, r18
    222c:	93 1f       	adc	r25, r19
    222e:	01 96       	adiw	r24, 0x01	; 1
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	fc 01       	movw	r30, r24
    2236:	ed 58       	subi	r30, 0x8D	; 141
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	88 23       	and	r24, r24
    223e:	39 f4       	brne	.+14     	; 0x224e <timer_init+0x406>
						{
							TCCR1B = (TCCR1B & 0xBF) | ((Falling)<<6);
    2240:	ae e4       	ldi	r26, 0x4E	; 78
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	ee e4       	ldi	r30, 0x4E	; 78
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	8f 7b       	andi	r24, 0xBF	; 191
    224c:	8c 93       	st	X, r24

					}

					// END OF ADJUSTING

					if(Timers_setup[Loop_index].T_INT)
    224e:	89 81       	ldd	r24, Y+1	; 0x01
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	9c 01       	movw	r18, r24
    225a:	22 0f       	add	r18, r18
    225c:	33 1f       	adc	r19, r19
    225e:	22 0f       	add	r18, r18
    2260:	33 1f       	adc	r19, r19
    2262:	82 0f       	add	r24, r18
    2264:	93 1f       	adc	r25, r19
    2266:	fc 01       	movw	r30, r24
    2268:	e9 58       	subi	r30, 0x89	; 137
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	80 81       	ld	r24, Z
    226e:	88 23       	and	r24, r24
    2270:	09 f4       	brne	.+2      	; 0x2274 <timer_init+0x42c>
    2272:	77 c2       	rjmp	.+1262   	; 0x2762 <timer_init+0x91a>
						TIMSK |= (1<<TOIE1);
    2274:	a9 e5       	ldi	r26, 0x59	; 89
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e9 e5       	ldi	r30, 0x59	; 89
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	84 60       	ori	r24, 0x04	; 4
    2280:	8c 93       	st	X, r24
    2282:	6f c2       	rjmp	.+1246   	; 0x2762 <timer_init+0x91a>
					break;
				case WG_T1CTC :
					if(Timers_setup[Loop_index].T_INT)
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	88 2f       	mov	r24, r24
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	88 0f       	add	r24, r24
    228c:	99 1f       	adc	r25, r25
    228e:	9c 01       	movw	r18, r24
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	22 0f       	add	r18, r18
    2296:	33 1f       	adc	r19, r19
    2298:	82 0f       	add	r24, r18
    229a:	93 1f       	adc	r25, r19
    229c:	fc 01       	movw	r30, r24
    229e:	e9 58       	subi	r30, 0x89	; 137
    22a0:	ff 4f       	sbci	r31, 0xFF	; 255
    22a2:	80 81       	ld	r24, Z
    22a4:	88 23       	and	r24, r24
    22a6:	39 f0       	breq	.+14     	; 0x22b6 <timer_init+0x46e>
					{
						//unit A
						TIMSK |= (1<<OCIE1A);
    22a8:	a9 e5       	ldi	r26, 0x59	; 89
    22aa:	b0 e0       	ldi	r27, 0x00	; 0
    22ac:	e9 e5       	ldi	r30, 0x59	; 89
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 61       	ori	r24, 0x10	; 16
    22b4:	8c 93       	st	X, r24
						//unit B
						//TIMSK |= (1<<OCIE1B);
					}

					//unit A
					OCR1AH=(char)(0x1324>>8);
    22b6:	eb e4       	ldi	r30, 0x4B	; 75
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	83 e1       	ldi	r24, 0x13	; 19
    22bc:	80 83       	st	Z, r24
					OCR1AL=(char)(0x1324);
    22be:	ea e4       	ldi	r30, 0x4A	; 74
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	84 e2       	ldi	r24, 0x24	; 36
    22c4:	80 83       	st	Z, r24
    22c6:	4d c2       	rjmp	.+1178   	; 0x2762 <timer_init+0x91a>
					//OCR1BL=(64>>8);

					break;
				case PWM_PHASE_8://added

					TCCR1A &=~(1<<FOC1A);
    22c8:	af e4       	ldi	r26, 0x4F	; 79
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	ef e4       	ldi	r30, 0x4F	; 79
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	87 7f       	andi	r24, 0xF7	; 247
    22d4:	8c 93       	st	X, r24
					TCCR1A &=~(1<<FOC1B);
    22d6:	af e4       	ldi	r26, 0x4F	; 79
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	ef e4       	ldi	r30, 0x4F	; 79
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8b 7f       	andi	r24, 0xFB	; 251
    22e2:	8c 93       	st	X, r24
					 if (Timers_setup[Loop_index].OUTPUT_PINS==one_pin)
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	9c 01       	movw	r18, r24
    22f0:	22 0f       	add	r18, r18
    22f2:	33 1f       	adc	r19, r19
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	82 0f       	add	r24, r18
    22fa:	93 1f       	adc	r25, r19
    22fc:	fc 01       	movw	r30, r24
    22fe:	ed 58       	subi	r30, 0x8D	; 141
    2300:	ff 4f       	sbci	r31, 0xFF	; 255
    2302:	80 81       	ld	r24, Z
    2304:	88 23       	and	r24, r24
    2306:	09 f0       	breq	.+2      	; 0x230a <timer_init+0x4c2>
    2308:	6e c0       	rjmp	.+220    	; 0x23e6 <timer_init+0x59e>
					 {DDRD|=(1<<PD5);
    230a:	a1 e3       	ldi	r26, 0x31	; 49
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	e1 e3       	ldi	r30, 0x31	; 49
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	80 62       	ori	r24, 0x20	; 32
    2316:	8c 93       	st	X, r24
					 if (Timers_setup[Loop_index].T_Compare_out_mode <MAX_COMPARE)
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	9c 01       	movw	r18, r24
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	82 0f       	add	r24, r18
    232e:	93 1f       	adc	r25, r19
    2330:	fc 01       	movw	r30, r24
    2332:	e4 58       	subi	r30, 0x84	; 132
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	80 81       	ld	r24, Z
    2338:	84 30       	cpi	r24, 0x04	; 4
    233a:	08 f0       	brcs	.+2      	; 0x233e <timer_init+0x4f6>
    233c:	12 c2       	rjmp	.+1060   	; 0x2762 <timer_init+0x91a>
					 {
						 TCCR1A|=(TCCR1A &0X3F)| ((Timers_setup[Loop_index].T_Compare_out_mode) <<6);// COMPARE MODE SIT
    233e:	af e4       	ldi	r26, 0x4F	; 79
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	ef e4       	ldi	r30, 0x4F	; 79
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	48 2f       	mov	r20, r24
    234a:	ef e4       	ldi	r30, 0x4F	; 79
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	58 2f       	mov	r21, r24
    2352:	5f 73       	andi	r21, 0x3F	; 63
    2354:	89 81       	ldd	r24, Y+1	; 0x01
    2356:	88 2f       	mov	r24, r24
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	88 0f       	add	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	9c 01       	movw	r18, r24
    2360:	22 0f       	add	r18, r18
    2362:	33 1f       	adc	r19, r19
    2364:	22 0f       	add	r18, r18
    2366:	33 1f       	adc	r19, r19
    2368:	82 0f       	add	r24, r18
    236a:	93 1f       	adc	r25, r19
    236c:	fc 01       	movw	r30, r24
    236e:	e4 58       	subi	r30, 0x84	; 132
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	88 2f       	mov	r24, r24
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	00 24       	eor	r0, r0
    237a:	96 95       	lsr	r25
    237c:	87 95       	ror	r24
    237e:	07 94       	ror	r0
    2380:	96 95       	lsr	r25
    2382:	87 95       	ror	r24
    2384:	07 94       	ror	r0
    2386:	98 2f       	mov	r25, r24
    2388:	80 2d       	mov	r24, r0
    238a:	85 2b       	or	r24, r21
    238c:	84 2b       	or	r24, r20
    238e:	8c 93       	st	X, r24
						 if (Timers_setup[Loop_index].ComVal <=T1_MAX )
						 {
							 OCR1AH=(uint8_t)(Timers_setup[Loop_index].ComVal>>8); /*COMPARE VALUE IN OCR1A*/
    2390:	ab e4       	ldi	r26, 0x4B	; 75
    2392:	b0 e0       	ldi	r27, 0x00	; 0
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	9c 01       	movw	r18, r24
    23a0:	22 0f       	add	r18, r18
    23a2:	33 1f       	adc	r19, r19
    23a4:	22 0f       	add	r18, r18
    23a6:	33 1f       	adc	r19, r19
    23a8:	82 0f       	add	r24, r18
    23aa:	93 1f       	adc	r25, r19
    23ac:	fc 01       	movw	r30, r24
    23ae:	e6 58       	subi	r30, 0x86	; 134
    23b0:	ff 4f       	sbci	r31, 0xFF	; 255
    23b2:	80 81       	ld	r24, Z
    23b4:	91 81       	ldd	r25, Z+1	; 0x01
    23b6:	89 2f       	mov	r24, r25
    23b8:	99 27       	eor	r25, r25
    23ba:	8c 93       	st	X, r24
							 OCR1AL=(uint8_t)(Timers_setup[Loop_index].ComVal);
    23bc:	aa e4       	ldi	r26, 0x4A	; 74
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	88 2f       	mov	r24, r24
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
    23ca:	9c 01       	movw	r18, r24
    23cc:	22 0f       	add	r18, r18
    23ce:	33 1f       	adc	r19, r19
    23d0:	22 0f       	add	r18, r18
    23d2:	33 1f       	adc	r19, r19
    23d4:	82 0f       	add	r24, r18
    23d6:	93 1f       	adc	r25, r19
    23d8:	fc 01       	movw	r30, r24
    23da:	e6 58       	subi	r30, 0x86	; 134
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 81       	ld	r24, Z
    23e0:	91 81       	ldd	r25, Z+1	; 0x01
    23e2:	8c 93       	st	X, r24
    23e4:	be c1       	rjmp	.+892    	; 0x2762 <timer_init+0x91a>
						 }

					 }

					 }
					 else if (Timers_setup[Loop_index].OUTPUT_PINS==two_pins)
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	88 2f       	mov	r24, r24
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	9c 01       	movw	r18, r24
    23f2:	22 0f       	add	r18, r18
    23f4:	33 1f       	adc	r19, r19
    23f6:	22 0f       	add	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	82 0f       	add	r24, r18
    23fc:	93 1f       	adc	r25, r19
    23fe:	fc 01       	movw	r30, r24
    2400:	ed 58       	subi	r30, 0x8D	; 141
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	80 81       	ld	r24, Z
    2406:	81 30       	cpi	r24, 0x01	; 1
    2408:	09 f0       	breq	.+2      	; 0x240c <timer_init+0x5c4>
    240a:	ab c1       	rjmp	.+854    	; 0x2762 <timer_init+0x91a>
					 {DDRD|=(1<<PD5)|(1<<PD4);
    240c:	a1 e3       	ldi	r26, 0x31	; 49
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e1 e3       	ldi	r30, 0x31	; 49
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	80 63       	ori	r24, 0x30	; 48
    2418:	8c 93       	st	X, r24
					 if (Timers_setup[Loop_index].T_Compare_out_mode <MAX_COMPARE)
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	88 2f       	mov	r24, r24
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	9c 01       	movw	r18, r24
    2426:	22 0f       	add	r18, r18
    2428:	33 1f       	adc	r19, r19
    242a:	22 0f       	add	r18, r18
    242c:	33 1f       	adc	r19, r19
    242e:	82 0f       	add	r24, r18
    2430:	93 1f       	adc	r25, r19
    2432:	fc 01       	movw	r30, r24
    2434:	e4 58       	subi	r30, 0x84	; 132
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	84 30       	cpi	r24, 0x04	; 4
    243c:	08 f0       	brcs	.+2      	; 0x2440 <timer_init+0x5f8>
    243e:	91 c1       	rjmp	.+802    	; 0x2762 <timer_init+0x91a>
					 {
						 TCCR1A|=(TCCR1A &0X3F)| ((Timers_setup[Loop_index].T_Compare_out_mode) <<6);//COMPARE MODE  SET
    2440:	af e4       	ldi	r26, 0x4F	; 79
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	ef e4       	ldi	r30, 0x4F	; 79
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	80 81       	ld	r24, Z
    244a:	48 2f       	mov	r20, r24
    244c:	ef e4       	ldi	r30, 0x4F	; 79
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	58 2f       	mov	r21, r24
    2454:	5f 73       	andi	r21, 0x3F	; 63
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	88 2f       	mov	r24, r24
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	9c 01       	movw	r18, r24
    2462:	22 0f       	add	r18, r18
    2464:	33 1f       	adc	r19, r19
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	82 0f       	add	r24, r18
    246c:	93 1f       	adc	r25, r19
    246e:	fc 01       	movw	r30, r24
    2470:	e4 58       	subi	r30, 0x84	; 132
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	80 81       	ld	r24, Z
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	00 24       	eor	r0, r0
    247c:	96 95       	lsr	r25
    247e:	87 95       	ror	r24
    2480:	07 94       	ror	r0
    2482:	96 95       	lsr	r25
    2484:	87 95       	ror	r24
    2486:	07 94       	ror	r0
    2488:	98 2f       	mov	r25, r24
    248a:	80 2d       	mov	r24, r0
    248c:	85 2b       	or	r24, r21
    248e:	84 2b       	or	r24, r20
    2490:	8c 93       	st	X, r24
						 TCCR1A|=(TCCR1A &0XCF)| (((Timers_setup[Loop_index].T_Compare_out_mode) <<4)&0X30);
    2492:	af e4       	ldi	r26, 0x4F	; 79
    2494:	b0 e0       	ldi	r27, 0x00	; 0
    2496:	ef e4       	ldi	r30, 0x4F	; 79
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	48 2f       	mov	r20, r24
    249e:	ef e4       	ldi	r30, 0x4F	; 79
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	58 2f       	mov	r21, r24
    24a6:	5f 7c       	andi	r21, 0xCF	; 207
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	9c 01       	movw	r18, r24
    24b4:	22 0f       	add	r18, r18
    24b6:	33 1f       	adc	r19, r19
    24b8:	22 0f       	add	r18, r18
    24ba:	33 1f       	adc	r19, r19
    24bc:	82 0f       	add	r24, r18
    24be:	93 1f       	adc	r25, r19
    24c0:	fc 01       	movw	r30, r24
    24c2:	e4 58       	subi	r30, 0x84	; 132
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	80 81       	ld	r24, Z
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	82 95       	swap	r24
    24ce:	92 95       	swap	r25
    24d0:	90 7f       	andi	r25, 0xF0	; 240
    24d2:	98 27       	eor	r25, r24
    24d4:	80 7f       	andi	r24, 0xF0	; 240
    24d6:	98 27       	eor	r25, r24
    24d8:	80 73       	andi	r24, 0x30	; 48
    24da:	85 2b       	or	r24, r21
    24dc:	84 2b       	or	r24, r20
    24de:	8c 93       	st	X, r24
						 if (Timers_setup[Loop_index].ComVal <=T1_MAX )
						 {

							 OCR1AH=(uint8_t) (Timers_setup[Loop_index].ComVal>>8); //COMPARE VALUE IN OCR1A
    24e0:	ab e4       	ldi	r26, 0x4B	; 75
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	88 2f       	mov	r24, r24
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	9c 01       	movw	r18, r24
    24f0:	22 0f       	add	r18, r18
    24f2:	33 1f       	adc	r19, r19
    24f4:	22 0f       	add	r18, r18
    24f6:	33 1f       	adc	r19, r19
    24f8:	82 0f       	add	r24, r18
    24fa:	93 1f       	adc	r25, r19
    24fc:	fc 01       	movw	r30, r24
    24fe:	e6 58       	subi	r30, 0x86	; 134
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	80 81       	ld	r24, Z
    2504:	91 81       	ldd	r25, Z+1	; 0x01
    2506:	89 2f       	mov	r24, r25
    2508:	99 27       	eor	r25, r25
    250a:	8c 93       	st	X, r24
							 OCR1AL=(uint8_t)(Timers_setup[Loop_index].ComVal);
    250c:	aa e4       	ldi	r26, 0x4A	; 74
    250e:	b0 e0       	ldi	r27, 0x00	; 0
    2510:	89 81       	ldd	r24, Y+1	; 0x01
    2512:	88 2f       	mov	r24, r24
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	9c 01       	movw	r18, r24
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	82 0f       	add	r24, r18
    2526:	93 1f       	adc	r25, r19
    2528:	fc 01       	movw	r30, r24
    252a:	e6 58       	subi	r30, 0x86	; 134
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	80 81       	ld	r24, Z
    2530:	91 81       	ldd	r25, Z+1	; 0x01
    2532:	8c 93       	st	X, r24
							 OCR1BH=(uint8_t)Timers_setup[Loop_index].ComVal>>8; //COMPARE VALUE IN OCR1B
    2534:	a9 e4       	ldi	r26, 0x49	; 73
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	88 2f       	mov	r24, r24
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	9c 01       	movw	r18, r24
    2544:	22 0f       	add	r18, r18
    2546:	33 1f       	adc	r19, r19
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	82 0f       	add	r24, r18
    254e:	93 1f       	adc	r25, r19
    2550:	fc 01       	movw	r30, r24
    2552:	e6 58       	subi	r30, 0x86	; 134
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	91 81       	ldd	r25, Z+1	; 0x01
    255a:	88 2f       	mov	r24, r24
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	89 2f       	mov	r24, r25
    2560:	99 0f       	add	r25, r25
    2562:	99 0b       	sbc	r25, r25
    2564:	8c 93       	st	X, r24
							 OCR1BL=(uint8_t)(Timers_setup[Loop_index].ComVal);
    2566:	a8 e4       	ldi	r26, 0x48	; 72
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	88 0f       	add	r24, r24
    2572:	99 1f       	adc	r25, r25
    2574:	9c 01       	movw	r18, r24
    2576:	22 0f       	add	r18, r18
    2578:	33 1f       	adc	r19, r19
    257a:	22 0f       	add	r18, r18
    257c:	33 1f       	adc	r19, r19
    257e:	82 0f       	add	r24, r18
    2580:	93 1f       	adc	r25, r19
    2582:	fc 01       	movw	r30, r24
    2584:	e6 58       	subi	r30, 0x86	; 134
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	8c 93       	st	X, r24
    258e:	e9 c0       	rjmp	.+466    	; 0x2762 <timer_init+0x91a>



				case Timer2:

					TCNT2=0; //timer initial value
    2590:	e4 e4       	ldi	r30, 0x44	; 68
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	10 82       	st	Z, r1

					/*EDIT_________ TIMER02*/

					TCCR2 = (1<<FOC2) | (Timers_setup[Loop_index].T_clk)
    2596:	a5 e4       	ldi	r26, 0x45	; 69
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	9c 01       	movw	r18, r24
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	22 0f       	add	r18, r18
    25ac:	33 1f       	adc	r19, r19
    25ae:	82 0f       	add	r24, r18
    25b0:	93 1f       	adc	r25, r19
    25b2:	fc 01       	movw	r30, r24
    25b4:	e8 58       	subi	r30, 0x88	; 136
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	80 68       	ori	r24, 0x80	; 128
    25bc:	48 2f       	mov	r20, r24
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	9c 01       	movw	r18, r24
    25ca:	22 0f       	add	r18, r18
    25cc:	33 1f       	adc	r19, r19
    25ce:	22 0f       	add	r18, r18
    25d0:	33 1f       	adc	r19, r19
    25d2:	82 0f       	add	r24, r18
    25d4:	93 1f       	adc	r25, r19
    25d6:	fc 01       	movw	r30, r24
    25d8:	e7 58       	subi	r30, 0x87	; 135
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	88 2f       	mov	r24, r24
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	82 70       	andi	r24, 0x02	; 2
    25e4:	90 70       	andi	r25, 0x00	; 0
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	48 2b       	or	r20, r24
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	88 2f       	mov	r24, r24
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	88 0f       	add	r24, r24
    25f8:	99 1f       	adc	r25, r25
    25fa:	9c 01       	movw	r18, r24
    25fc:	22 0f       	add	r18, r18
    25fe:	33 1f       	adc	r19, r19
    2600:	22 0f       	add	r18, r18
    2602:	33 1f       	adc	r19, r19
    2604:	82 0f       	add	r24, r18
    2606:	93 1f       	adc	r25, r19
    2608:	fc 01       	movw	r30, r24
    260a:	e7 58       	subi	r30, 0x87	; 135
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	80 81       	ld	r24, Z
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	81 70       	andi	r24, 0x01	; 1
    2616:	90 70       	andi	r25, 0x00	; 0
    2618:	00 24       	eor	r0, r0
    261a:	96 95       	lsr	r25
    261c:	87 95       	ror	r24
    261e:	07 94       	ror	r0
    2620:	96 95       	lsr	r25
    2622:	87 95       	ror	r24
    2624:	07 94       	ror	r0
    2626:	98 2f       	mov	r25, r24
    2628:	80 2d       	mov	r24, r0
    262a:	48 2b       	or	r20, r24
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	88 2f       	mov	r24, r24
    2630:	90 e0       	ldi	r25, 0x00	; 0
    2632:	88 0f       	add	r24, r24
    2634:	99 1f       	adc	r25, r25
    2636:	9c 01       	movw	r18, r24
    2638:	22 0f       	add	r18, r18
    263a:	33 1f       	adc	r19, r19
    263c:	22 0f       	add	r18, r18
    263e:	33 1f       	adc	r19, r19
    2640:	82 0f       	add	r24, r18
    2642:	93 1f       	adc	r25, r19
    2644:	fc 01       	movw	r30, r24
    2646:	e4 58       	subi	r30, 0x84	; 132
    2648:	ff 4f       	sbci	r31, 0xFF	; 255
    264a:	80 81       	ld	r24, Z
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	82 95       	swap	r24
    2652:	92 95       	swap	r25
    2654:	90 7f       	andi	r25, 0xF0	; 240
    2656:	98 27       	eor	r25, r24
    2658:	80 7f       	andi	r24, 0xF0	; 240
    265a:	98 27       	eor	r25, r24
    265c:	84 2b       	or	r24, r20
    265e:	8c 93       	st	X, r24
																						|((Timers_setup[Loop_index].T_WGMode&0x01)<<6)
																						|(Timers_setup[Loop_index].T_Compare_out_mode<<4);

					/*************CHOOSE TIMER0 MODES*************************/

					switch(Timers_setup[Loop_index].T_WGMode)   //enable overflow interrupt
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	88 2f       	mov	r24, r24
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	9c 01       	movw	r18, r24
    266c:	22 0f       	add	r18, r18
    266e:	33 1f       	adc	r19, r19
    2670:	22 0f       	add	r18, r18
    2672:	33 1f       	adc	r19, r19
    2674:	82 0f       	add	r24, r18
    2676:	93 1f       	adc	r25, r19
    2678:	fc 01       	movw	r30, r24
    267a:	e7 58       	subi	r30, 0x87	; 135
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	80 81       	ld	r24, Z
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	3b 83       	std	Y+3, r19	; 0x03
    2686:	2a 83       	std	Y+2, r18	; 0x02
    2688:	8a 81       	ldd	r24, Y+2	; 0x02
    268a:	9b 81       	ldd	r25, Y+3	; 0x03
    268c:	82 30       	cpi	r24, 0x02	; 2
    268e:	91 05       	cpc	r25, r1
    2690:	31 f1       	breq	.+76     	; 0x26de <timer_init+0x896>
    2692:	2a 81       	ldd	r18, Y+2	; 0x02
    2694:	3b 81       	ldd	r19, Y+3	; 0x03
    2696:	23 30       	cpi	r18, 0x03	; 3
    2698:	31 05       	cpc	r19, r1
    269a:	09 f4       	brne	.+2      	; 0x269e <timer_init+0x856>
    269c:	4e c0       	rjmp	.+156    	; 0x273a <timer_init+0x8f2>
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	9b 81       	ldd	r25, Y+3	; 0x03
    26a2:	00 97       	sbiw	r24, 0x00	; 0
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <timer_init+0x860>
    26a6:	5d c0       	rjmp	.+186    	; 0x2762 <timer_init+0x91a>
					{
					case WG_Normal:

						if(Timers_setup[Loop_index].T_INT)
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	9c 01       	movw	r18, r24
    26b4:	22 0f       	add	r18, r18
    26b6:	33 1f       	adc	r19, r19
    26b8:	22 0f       	add	r18, r18
    26ba:	33 1f       	adc	r19, r19
    26bc:	82 0f       	add	r24, r18
    26be:	93 1f       	adc	r25, r19
    26c0:	fc 01       	movw	r30, r24
    26c2:	e9 58       	subi	r30, 0x89	; 137
    26c4:	ff 4f       	sbci	r31, 0xFF	; 255
    26c6:	80 81       	ld	r24, Z
    26c8:	88 23       	and	r24, r24
    26ca:	09 f4       	brne	.+2      	; 0x26ce <timer_init+0x886>
    26cc:	4a c0       	rjmp	.+148    	; 0x2762 <timer_init+0x91a>
							TIMSK |= (1<<TOIE2);              //En_TOF_interrupt of timer0
    26ce:	a9 e5       	ldi	r26, 0x59	; 89
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e9 e5       	ldi	r30, 0x59	; 89
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	80 64       	ori	r24, 0x40	; 64
    26da:	8c 93       	st	X, r24
    26dc:	42 c0       	rjmp	.+132    	; 0x2762 <timer_init+0x91a>
						break;

					case WG_CTC :
						if(Timers_setup[Loop_index].T_INT)
    26de:	89 81       	ldd	r24, Y+1	; 0x01
    26e0:	88 2f       	mov	r24, r24
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	88 0f       	add	r24, r24
    26e6:	99 1f       	adc	r25, r25
    26e8:	9c 01       	movw	r18, r24
    26ea:	22 0f       	add	r18, r18
    26ec:	33 1f       	adc	r19, r19
    26ee:	22 0f       	add	r18, r18
    26f0:	33 1f       	adc	r19, r19
    26f2:	82 0f       	add	r24, r18
    26f4:	93 1f       	adc	r25, r19
    26f6:	fc 01       	movw	r30, r24
    26f8:	e9 58       	subi	r30, 0x89	; 137
    26fa:	ff 4f       	sbci	r31, 0xFF	; 255
    26fc:	80 81       	ld	r24, Z
    26fe:	88 23       	and	r24, r24
    2700:	39 f0       	breq	.+14     	; 0x2710 <timer_init+0x8c8>
							TIMSK |= (1<<OCIE2); //En_TCOM_interrupt of timer2
    2702:	a9 e5       	ldi	r26, 0x59	; 89
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e9 e5       	ldi	r30, 0x59	; 89
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	80 68       	ori	r24, 0x80	; 128
    270e:	8c 93       	st	X, r24

						OCR2 = Timers_setup[Loop_index].ComVal;
    2710:	a3 e4       	ldi	r26, 0x43	; 67
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	9c 01       	movw	r18, r24
    2720:	22 0f       	add	r18, r18
    2722:	33 1f       	adc	r19, r19
    2724:	22 0f       	add	r18, r18
    2726:	33 1f       	adc	r19, r19
    2728:	82 0f       	add	r24, r18
    272a:	93 1f       	adc	r25, r19
    272c:	fc 01       	movw	r30, r24
    272e:	e6 58       	subi	r30, 0x86	; 134
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	8c 93       	st	X, r24
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <timer_init+0x91a>

						break;
					case WG_FPWM :
						OCR2 = Timers_setup[Loop_index].ComVal;
    273a:	a3 e4       	ldi	r26, 0x43	; 67
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	88 2f       	mov	r24, r24
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	9c 01       	movw	r18, r24
    274a:	22 0f       	add	r18, r18
    274c:	33 1f       	adc	r19, r19
    274e:	22 0f       	add	r18, r18
    2750:	33 1f       	adc	r19, r19
    2752:	82 0f       	add	r24, r18
    2754:	93 1f       	adc	r25, r19
    2756:	fc 01       	movw	r30, r24
    2758:	e6 58       	subi	r30, 0x86	; 134
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 81       	ld	r24, Z
    275e:	91 81       	ldd	r25, Z+1	; 0x01
    2760:	8c 93       	st	X, r24
void timer_init(void )
{
	uint8_t Loop_index=0;


	for(Loop_index=0;Loop_index<MAX_num_of_timers;Loop_index++)
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	8f 5f       	subi	r24, 0xFF	; 255
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	83 30       	cpi	r24, 0x03	; 3
    276c:	08 f4       	brcc	.+2      	; 0x2770 <timer_init+0x928>
    276e:	79 cb       	rjmp	.-2318   	; 0x1e62 <timer_init+0x1a>
						break;


		}
	}
}
    2770:	29 96       	adiw	r28, 0x09	; 9
    2772:	0f b6       	in	r0, 0x3f	; 63
    2774:	f8 94       	cli
    2776:	de bf       	out	0x3e, r29	; 62
    2778:	0f be       	out	0x3f, r0	; 63
    277a:	cd bf       	out	0x3d, r28	; 61
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <Timer_Square_Wave_Init>:
 * *******************************************************************************************************
 * ****************************************************************************************************
 * *******************************************************************************************************/

void Timer_Square_Wave_Init(void)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	0f 92       	push	r0
    2788:	cd b7       	in	r28, 0x3d	; 61
    278a:	de b7       	in	r29, 0x3e	; 62

	uint8_t loop_index=0;
    278c:	19 82       	std	Y+1, r1	; 0x01
	for(loop_index=0;loop_index<MAX_num_of_timers;loop_index++)
    278e:	19 82       	std	Y+1, r1	; 0x01
    2790:	4e c0       	rjmp	.+156    	; 0x282e <Timer_Square_Wave_Init+0xac>
	{

		if(Timers_setup[loop_index].T_type==Timer0)
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	88 2f       	mov	r24, r24
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	9c 01       	movw	r18, r24
    279e:	22 0f       	add	r18, r18
    27a0:	33 1f       	adc	r19, r19
    27a2:	22 0f       	add	r18, r18
    27a4:	33 1f       	adc	r19, r19
    27a6:	82 0f       	add	r24, r18
    27a8:	93 1f       	adc	r25, r19
    27aa:	fc 01       	movw	r30, r24
    27ac:	ea 58       	subi	r30, 0x8A	; 138
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	80 81       	ld	r24, Z
    27b2:	88 23       	and	r24, r24
    27b4:	39 f4       	brne	.+14     	; 0x27c4 <Timer_Square_Wave_Init+0x42>
		{
			DDRB = DDRB | (1<<PB3);                       	//enable OC0 as output PIN
    27b6:	a7 e3       	ldi	r26, 0x37	; 55
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e7 e3       	ldi	r30, 0x37	; 55
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	88 60       	ori	r24, 0x08	; 8
    27c2:	8c 93       	st	X, r24
		}
		if(Timers_setup[loop_index].T_type==Timer2)
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	88 2f       	mov	r24, r24
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	9c 01       	movw	r18, r24
    27d0:	22 0f       	add	r18, r18
    27d2:	33 1f       	adc	r19, r19
    27d4:	22 0f       	add	r18, r18
    27d6:	33 1f       	adc	r19, r19
    27d8:	82 0f       	add	r24, r18
    27da:	93 1f       	adc	r25, r19
    27dc:	fc 01       	movw	r30, r24
    27de:	ea 58       	subi	r30, 0x8A	; 138
    27e0:	ff 4f       	sbci	r31, 0xFF	; 255
    27e2:	80 81       	ld	r24, Z
    27e4:	82 30       	cpi	r24, 0x02	; 2
    27e6:	39 f4       	brne	.+14     	; 0x27f6 <Timer_Square_Wave_Init+0x74>
		{
			DDRD = DDRD | (1<<PD7);                         //enable OC2 as output PIN
    27e8:	a1 e3       	ldi	r26, 0x31	; 49
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e1 e3       	ldi	r30, 0x31	; 49
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	80 68       	ori	r24, 0x80	; 128
    27f4:	8c 93       	st	X, r24
		}
		if(Timers_setup[loop_index].T_type==Timer1)
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	88 2f       	mov	r24, r24
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	88 0f       	add	r24, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	9c 01       	movw	r18, r24
    2802:	22 0f       	add	r18, r18
    2804:	33 1f       	adc	r19, r19
    2806:	22 0f       	add	r18, r18
    2808:	33 1f       	adc	r19, r19
    280a:	82 0f       	add	r24, r18
    280c:	93 1f       	adc	r25, r19
    280e:	fc 01       	movw	r30, r24
    2810:	ea 58       	subi	r30, 0x8A	; 138
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 81       	ld	r24, Z
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	39 f4       	brne	.+14     	; 0x2828 <Timer_Square_Wave_Init+0xa6>
		{
			DDRD = DDRD | (1<<PD5);             //enable OC1A as output PIN
    281a:	a1 e3       	ldi	r26, 0x31	; 49
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	e1 e3       	ldi	r30, 0x31	; 49
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	80 62       	ori	r24, 0x20	; 32
    2826:	8c 93       	st	X, r24

void Timer_Square_Wave_Init(void)
{

	uint8_t loop_index=0;
	for(loop_index=0;loop_index<MAX_num_of_timers;loop_index++)
    2828:	89 81       	ldd	r24, Y+1	; 0x01
    282a:	8f 5f       	subi	r24, 0xFF	; 255
    282c:	89 83       	std	Y+1, r24	; 0x01
    282e:	89 81       	ldd	r24, Y+1	; 0x01
    2830:	83 30       	cpi	r24, 0x03	; 3
    2832:	08 f4       	brcc	.+2      	; 0x2836 <Timer_Square_Wave_Init+0xb4>
    2834:	ae cf       	rjmp	.-164    	; 0x2792 <Timer_Square_Wave_Init+0x10>
		}
	}



}
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret

0000283e <Delay_ms>:
 * *******************************************************************************************************/

/*DELAY______BY_______POLLING*/

void Delay_ms(uint64_t n_milleSec,t_type timer)
{
    283e:	0f 93       	push	r16
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	cf 55       	subi	r28, 0x5F	; 95
    284a:	d0 40       	sbci	r29, 0x00	; 0
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	29 83       	std	Y+1, r18	; 0x01
    2858:	3a 83       	std	Y+2, r19	; 0x02
    285a:	4b 83       	std	Y+3, r20	; 0x03
    285c:	5c 83       	std	Y+4, r21	; 0x04
    285e:	6d 83       	std	Y+5, r22	; 0x05
    2860:	7e 83       	std	Y+6, r23	; 0x06
    2862:	8f 83       	std	Y+7, r24	; 0x07
    2864:	98 87       	std	Y+8, r25	; 0x08
    2866:	09 87       	std	Y+9, r16	; 0x09


	static uint8_t count31=0;

	if(timer==T0)
    2868:	89 85       	ldd	r24, Y+9	; 0x09
    286a:	88 23       	and	r24, r24
    286c:	09 f0       	breq	.+2      	; 0x2870 <Delay_ms+0x32>
    286e:	1a c1       	rjmp	.+564    	; 0x2aa4 <Delay_ms+0x266>
    2870:	07 c1       	rjmp	.+526    	; 0x2a80 <Delay_ms+0x242>
	{

		while(n_milleSec)
		{

			while( !(TIFR & (1<<TOV0) ) );        //go out of loop if there is interrupt happens
    2872:	e8 e5       	ldi	r30, 0x58	; 88
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	88 2f       	mov	r24, r24
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	81 70       	andi	r24, 0x01	; 1
    287e:	90 70       	andi	r25, 0x00	; 0
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	b9 f3       	breq	.-18     	; 0x2872 <Delay_ms+0x34>
			count31++;
    2884:	80 91 99 00 	lds	r24, 0x0099
    2888:	8f 5f       	subi	r24, 0xFF	; 255
    288a:	80 93 99 00 	sts	0x0099, r24
			if (31 == count31)                    //if timer flag be one by 31 time as 1ms "interrupt happens
    288e:	80 91 99 00 	lds	r24, 0x0099
    2892:	8f 31       	cpi	r24, 0x1F	; 31
    2894:	09 f0       	breq	.+2      	; 0x2898 <Delay_ms+0x5a>
    2896:	ed c0       	rjmp	.+474    	; 0x2a72 <Delay_ms+0x234>
				//by o.f
			{

				count31 = 0;
    2898:	10 92 99 00 	sts	0x0099, r1
				n_milleSec--;
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	8a 87       	std	Y+10, r24	; 0x0a
    28a0:	9a 81       	ldd	r25, Y+2	; 0x02
    28a2:	9b 87       	std	Y+11, r25	; 0x0b
    28a4:	8b 81       	ldd	r24, Y+3	; 0x03
    28a6:	8c 87       	std	Y+12, r24	; 0x0c
    28a8:	9c 81       	ldd	r25, Y+4	; 0x04
    28aa:	9d 87       	std	Y+13, r25	; 0x0d
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	8e 87       	std	Y+14, r24	; 0x0e
    28b0:	9e 81       	ldd	r25, Y+6	; 0x06
    28b2:	9f 87       	std	Y+15, r25	; 0x0f
    28b4:	8f 81       	ldd	r24, Y+7	; 0x07
    28b6:	88 8b       	std	Y+16, r24	; 0x10
    28b8:	98 85       	ldd	r25, Y+8	; 0x08
    28ba:	99 8b       	std	Y+17, r25	; 0x11
    28bc:	8f ef       	ldi	r24, 0xFF	; 255
    28be:	8a 8b       	std	Y+18, r24	; 0x12
    28c0:	9f ef       	ldi	r25, 0xFF	; 255
    28c2:	9b 8b       	std	Y+19, r25	; 0x13
    28c4:	8f ef       	ldi	r24, 0xFF	; 255
    28c6:	8c 8b       	std	Y+20, r24	; 0x14
    28c8:	9f ef       	ldi	r25, 0xFF	; 255
    28ca:	9d 8b       	std	Y+21, r25	; 0x15
    28cc:	8f ef       	ldi	r24, 0xFF	; 255
    28ce:	8e 8b       	std	Y+22, r24	; 0x16
    28d0:	9f ef       	ldi	r25, 0xFF	; 255
    28d2:	9f 8b       	std	Y+23, r25	; 0x17
    28d4:	8f ef       	ldi	r24, 0xFF	; 255
    28d6:	88 8f       	std	Y+24, r24	; 0x18
    28d8:	9f ef       	ldi	r25, 0xFF	; 255
    28da:	99 8f       	std	Y+25, r25	; 0x19
    28dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    28de:	9a 89       	ldd	r25, Y+18	; 0x12
    28e0:	89 0f       	add	r24, r25
    28e2:	8a 8f       	std	Y+26, r24	; 0x1a
    28e4:	81 e0       	ldi	r24, 0x01	; 1
    28e6:	8a a3       	std	Y+34, r24	; 0x22
    28e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    28ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ec:	98 17       	cp	r25, r24
    28ee:	08 f0       	brcs	.+2      	; 0x28f2 <Delay_ms+0xb4>
    28f0:	1a a2       	std	Y+34, r1	; 0x22
    28f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    28f4:	8b 89       	ldd	r24, Y+19	; 0x13
    28f6:	98 0f       	add	r25, r24
    28f8:	9b 8f       	std	Y+27, r25	; 0x1b
    28fa:	91 e0       	ldi	r25, 0x01	; 1
    28fc:	9b a3       	std	Y+35, r25	; 0x23
    28fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2900:	9b 85       	ldd	r25, Y+11	; 0x0b
    2902:	89 17       	cp	r24, r25
    2904:	08 f0       	brcs	.+2      	; 0x2908 <Delay_ms+0xca>
    2906:	1b a2       	std	Y+35, r1	; 0x23
    2908:	8a a1       	ldd	r24, Y+34	; 0x22
    290a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    290c:	89 0f       	add	r24, r25
    290e:	8c a3       	std	Y+36, r24	; 0x24
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	8d a3       	std	Y+37, r24	; 0x25
    2914:	9c a1       	ldd	r25, Y+36	; 0x24
    2916:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2918:	98 17       	cp	r25, r24
    291a:	08 f0       	brcs	.+2      	; 0x291e <Delay_ms+0xe0>
    291c:	1d a2       	std	Y+37, r1	; 0x25
    291e:	9b a1       	ldd	r25, Y+35	; 0x23
    2920:	8d a1       	ldd	r24, Y+37	; 0x25
    2922:	98 2b       	or	r25, r24
    2924:	9b a3       	std	Y+35, r25	; 0x23
    2926:	9c a1       	ldd	r25, Y+36	; 0x24
    2928:	9b 8f       	std	Y+27, r25	; 0x1b
    292a:	8c 85       	ldd	r24, Y+12	; 0x0c
    292c:	9c 89       	ldd	r25, Y+20	; 0x14
    292e:	89 0f       	add	r24, r25
    2930:	8c 8f       	std	Y+28, r24	; 0x1c
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	8e a3       	std	Y+38, r24	; 0x26
    2936:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2938:	8c 85       	ldd	r24, Y+12	; 0x0c
    293a:	98 17       	cp	r25, r24
    293c:	08 f0       	brcs	.+2      	; 0x2940 <Delay_ms+0x102>
    293e:	1e a2       	std	Y+38, r1	; 0x26
    2940:	9b a1       	ldd	r25, Y+35	; 0x23
    2942:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2944:	98 0f       	add	r25, r24
    2946:	9f a3       	std	Y+39, r25	; 0x27
    2948:	91 e0       	ldi	r25, 0x01	; 1
    294a:	98 a7       	std	Y+40, r25	; 0x28
    294c:	8f a1       	ldd	r24, Y+39	; 0x27
    294e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2950:	89 17       	cp	r24, r25
    2952:	08 f0       	brcs	.+2      	; 0x2956 <Delay_ms+0x118>
    2954:	18 a6       	std	Y+40, r1	; 0x28
    2956:	8e a1       	ldd	r24, Y+38	; 0x26
    2958:	98 a5       	ldd	r25, Y+40	; 0x28
    295a:	89 2b       	or	r24, r25
    295c:	8e a3       	std	Y+38, r24	; 0x26
    295e:	8f a1       	ldd	r24, Y+39	; 0x27
    2960:	8c 8f       	std	Y+28, r24	; 0x1c
    2962:	9d 85       	ldd	r25, Y+13	; 0x0d
    2964:	8d 89       	ldd	r24, Y+21	; 0x15
    2966:	98 0f       	add	r25, r24
    2968:	9d 8f       	std	Y+29, r25	; 0x1d
    296a:	91 e0       	ldi	r25, 0x01	; 1
    296c:	99 a7       	std	Y+41, r25	; 0x29
    296e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2970:	9d 85       	ldd	r25, Y+13	; 0x0d
    2972:	89 17       	cp	r24, r25
    2974:	08 f0       	brcs	.+2      	; 0x2978 <Delay_ms+0x13a>
    2976:	19 a6       	std	Y+41, r1	; 0x29
    2978:	8e a1       	ldd	r24, Y+38	; 0x26
    297a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    297c:	89 0f       	add	r24, r25
    297e:	8a a7       	std	Y+42, r24	; 0x2a
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	8b a7       	std	Y+43, r24	; 0x2b
    2984:	9a a5       	ldd	r25, Y+42	; 0x2a
    2986:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2988:	98 17       	cp	r25, r24
    298a:	08 f0       	brcs	.+2      	; 0x298e <Delay_ms+0x150>
    298c:	1b a6       	std	Y+43, r1	; 0x2b
    298e:	99 a5       	ldd	r25, Y+41	; 0x29
    2990:	8b a5       	ldd	r24, Y+43	; 0x2b
    2992:	98 2b       	or	r25, r24
    2994:	99 a7       	std	Y+41, r25	; 0x29
    2996:	9a a5       	ldd	r25, Y+42	; 0x2a
    2998:	9d 8f       	std	Y+29, r25	; 0x1d
    299a:	8e 85       	ldd	r24, Y+14	; 0x0e
    299c:	9e 89       	ldd	r25, Y+22	; 0x16
    299e:	89 0f       	add	r24, r25
    29a0:	8e 8f       	std	Y+30, r24	; 0x1e
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	8c a7       	std	Y+44, r24	; 0x2c
    29a6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    29aa:	98 17       	cp	r25, r24
    29ac:	08 f0       	brcs	.+2      	; 0x29b0 <Delay_ms+0x172>
    29ae:	1c a6       	std	Y+44, r1	; 0x2c
    29b0:	99 a5       	ldd	r25, Y+41	; 0x29
    29b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29b4:	98 0f       	add	r25, r24
    29b6:	9d a7       	std	Y+45, r25	; 0x2d
    29b8:	91 e0       	ldi	r25, 0x01	; 1
    29ba:	9e a7       	std	Y+46, r25	; 0x2e
    29bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    29be:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29c0:	89 17       	cp	r24, r25
    29c2:	08 f0       	brcs	.+2      	; 0x29c6 <Delay_ms+0x188>
    29c4:	1e a6       	std	Y+46, r1	; 0x2e
    29c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    29c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    29ca:	89 2b       	or	r24, r25
    29cc:	8c a7       	std	Y+44, r24	; 0x2c
    29ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    29d0:	8e 8f       	std	Y+30, r24	; 0x1e
    29d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    29d4:	8f 89       	ldd	r24, Y+23	; 0x17
    29d6:	98 0f       	add	r25, r24
    29d8:	9f 8f       	std	Y+31, r25	; 0x1f
    29da:	91 e0       	ldi	r25, 0x01	; 1
    29dc:	9f a7       	std	Y+47, r25	; 0x2f
    29de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    29e2:	89 17       	cp	r24, r25
    29e4:	08 f0       	brcs	.+2      	; 0x29e8 <Delay_ms+0x1aa>
    29e6:	1f a6       	std	Y+47, r1	; 0x2f
    29e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    29ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29ec:	89 0f       	add	r24, r25
    29ee:	88 ab       	std	Y+48, r24	; 0x30
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	89 ab       	std	Y+49, r24	; 0x31
    29f4:	98 a9       	ldd	r25, Y+48	; 0x30
    29f6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29f8:	98 17       	cp	r25, r24
    29fa:	08 f0       	brcs	.+2      	; 0x29fe <Delay_ms+0x1c0>
    29fc:	19 aa       	std	Y+49, r1	; 0x31
    29fe:	9f a5       	ldd	r25, Y+47	; 0x2f
    2a00:	89 a9       	ldd	r24, Y+49	; 0x31
    2a02:	98 2b       	or	r25, r24
    2a04:	9f a7       	std	Y+47, r25	; 0x2f
    2a06:	98 a9       	ldd	r25, Y+48	; 0x30
    2a08:	9f 8f       	std	Y+31, r25	; 0x1f
    2a0a:	88 89       	ldd	r24, Y+16	; 0x10
    2a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0e:	89 0f       	add	r24, r25
    2a10:	88 a3       	std	Y+32, r24	; 0x20
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	8a ab       	std	Y+50, r24	; 0x32
    2a16:	98 a1       	ldd	r25, Y+32	; 0x20
    2a18:	88 89       	ldd	r24, Y+16	; 0x10
    2a1a:	98 17       	cp	r25, r24
    2a1c:	08 f0       	brcs	.+2      	; 0x2a20 <Delay_ms+0x1e2>
    2a1e:	1a aa       	std	Y+50, r1	; 0x32
    2a20:	9f a5       	ldd	r25, Y+47	; 0x2f
    2a22:	88 a1       	ldd	r24, Y+32	; 0x20
    2a24:	98 0f       	add	r25, r24
    2a26:	9b ab       	std	Y+51, r25	; 0x33
    2a28:	91 e0       	ldi	r25, 0x01	; 1
    2a2a:	9c ab       	std	Y+52, r25	; 0x34
    2a2c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a2e:	98 a1       	ldd	r25, Y+32	; 0x20
    2a30:	89 17       	cp	r24, r25
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <Delay_ms+0x1f8>
    2a34:	1c aa       	std	Y+52, r1	; 0x34
    2a36:	8a a9       	ldd	r24, Y+50	; 0x32
    2a38:	9c a9       	ldd	r25, Y+52	; 0x34
    2a3a:	89 2b       	or	r24, r25
    2a3c:	8a ab       	std	Y+50, r24	; 0x32
    2a3e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a40:	88 a3       	std	Y+32, r24	; 0x20
    2a42:	99 89       	ldd	r25, Y+17	; 0x11
    2a44:	89 8d       	ldd	r24, Y+25	; 0x19
    2a46:	98 0f       	add	r25, r24
    2a48:	99 a3       	std	Y+33, r25	; 0x21
    2a4a:	8a a9       	ldd	r24, Y+50	; 0x32
    2a4c:	99 a1       	ldd	r25, Y+33	; 0x21
    2a4e:	89 0f       	add	r24, r25
    2a50:	89 a3       	std	Y+33, r24	; 0x21
    2a52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a54:	89 83       	std	Y+1, r24	; 0x01
    2a56:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a58:	9a 83       	std	Y+2, r25	; 0x02
    2a5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    2a5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a60:	9c 83       	std	Y+4, r25	; 0x04
    2a62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a64:	8d 83       	std	Y+5, r24	; 0x05
    2a66:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a68:	9e 83       	std	Y+6, r25	; 0x06
    2a6a:	88 a1       	ldd	r24, Y+32	; 0x20
    2a6c:	8f 83       	std	Y+7, r24	; 0x07
    2a6e:	99 a1       	ldd	r25, Y+33	; 0x21
    2a70:	98 87       	std	Y+8, r25	; 0x08

			}
			TIFR |= (1<<TOV0);                    //clear T0 interrupt flag
    2a72:	a8 e5       	ldi	r26, 0x58	; 88
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	e8 e5       	ldi	r30, 0x58	; 88
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	80 81       	ld	r24, Z
    2a7c:	81 60       	ori	r24, 0x01	; 1
    2a7e:	8c 93       	st	X, r24
	static uint8_t count31=0;

	if(timer==T0)
	{

		while(n_milleSec)
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	9a 81       	ldd	r25, Y+2	; 0x02
    2a84:	89 2b       	or	r24, r25
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	89 2b       	or	r24, r25
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	89 2b       	or	r24, r25
    2a8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a90:	89 2b       	or	r24, r25
    2a92:	9e 81       	ldd	r25, Y+6	; 0x06
    2a94:	89 2b       	or	r24, r25
    2a96:	9f 81       	ldd	r25, Y+7	; 0x07
    2a98:	89 2b       	or	r24, r25
    2a9a:	98 85       	ldd	r25, Y+8	; 0x08
    2a9c:	89 2b       	or	r24, r25
    2a9e:	88 23       	and	r24, r24
    2aa0:	09 f0       	breq	.+2      	; 0x2aa4 <Delay_ms+0x266>
    2aa2:	e7 ce       	rjmp	.-562    	; 0x2872 <Delay_ms+0x34>
			TIFR |= (1<<TOV0);                    //clear T0 interrupt flag
		}

	}

	if(timer==T2)
    2aa4:	89 85       	ldd	r24, Y+9	; 0x09
    2aa6:	81 30       	cpi	r24, 0x01	; 1
    2aa8:	09 f0       	breq	.+2      	; 0x2aac <Delay_ms+0x26e>
    2aaa:	0e c2       	rjmp	.+1052   	; 0x2ec8 <Delay_ms+0x68a>
    2aac:	fb c1       	rjmp	.+1014   	; 0x2ea4 <Delay_ms+0x666>
	{

		while(n_milleSec)
		{

			while( !(TIFR & (1<<TOV2) ) );
    2aae:	e8 e5       	ldi	r30, 0x58	; 88
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 2f       	mov	r24, r24
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	80 74       	andi	r24, 0x40	; 64
    2aba:	90 70       	andi	r25, 0x00	; 0
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	b9 f3       	breq	.-18     	; 0x2aae <Delay_ms+0x270>
			count31++;
    2ac0:	80 91 99 00 	lds	r24, 0x0099
    2ac4:	8f 5f       	subi	r24, 0xFF	; 255
    2ac6:	80 93 99 00 	sts	0x0099, r24
			if (31 == count31)
    2aca:	80 91 99 00 	lds	r24, 0x0099
    2ace:	8f 31       	cpi	r24, 0x1F	; 31
    2ad0:	09 f0       	breq	.+2      	; 0x2ad4 <Delay_ms+0x296>
    2ad2:	e1 c1       	rjmp	.+962    	; 0x2e96 <Delay_ms+0x658>
			{

				count31 = 0;
    2ad4:	10 92 99 00 	sts	0x0099, r1
				n_milleSec--;
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	8d ab       	std	Y+53, r24	; 0x35
    2adc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ade:	9e ab       	std	Y+54, r25	; 0x36
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	8f ab       	std	Y+55, r24	; 0x37
    2ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ae6:	98 af       	std	Y+56, r25	; 0x38
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	89 af       	std	Y+57, r24	; 0x39
    2aec:	9e 81       	ldd	r25, Y+6	; 0x06
    2aee:	9a af       	std	Y+58, r25	; 0x3a
    2af0:	8f 81       	ldd	r24, Y+7	; 0x07
    2af2:	8b af       	std	Y+59, r24	; 0x3b
    2af4:	98 85       	ldd	r25, Y+8	; 0x08
    2af6:	9c af       	std	Y+60, r25	; 0x3c
    2af8:	8f ef       	ldi	r24, 0xFF	; 255
    2afa:	8d af       	std	Y+61, r24	; 0x3d
    2afc:	9f ef       	ldi	r25, 0xFF	; 255
    2afe:	9e af       	std	Y+62, r25	; 0x3e
    2b00:	8f ef       	ldi	r24, 0xFF	; 255
    2b02:	8f af       	std	Y+63, r24	; 0x3f
    2b04:	9f ef       	ldi	r25, 0xFF	; 255
    2b06:	21 96       	adiw	r28, 0x01	; 1
    2b08:	9f af       	std	Y+63, r25	; 0x3f
    2b0a:	21 97       	sbiw	r28, 0x01	; 1
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	22 96       	adiw	r28, 0x02	; 2
    2b10:	8f af       	std	Y+63, r24	; 0x3f
    2b12:	22 97       	sbiw	r28, 0x02	; 2
    2b14:	9f ef       	ldi	r25, 0xFF	; 255
    2b16:	23 96       	adiw	r28, 0x03	; 3
    2b18:	9f af       	std	Y+63, r25	; 0x3f
    2b1a:	23 97       	sbiw	r28, 0x03	; 3
    2b1c:	8f ef       	ldi	r24, 0xFF	; 255
    2b1e:	24 96       	adiw	r28, 0x04	; 4
    2b20:	8f af       	std	Y+63, r24	; 0x3f
    2b22:	24 97       	sbiw	r28, 0x04	; 4
    2b24:	9f ef       	ldi	r25, 0xFF	; 255
    2b26:	25 96       	adiw	r28, 0x05	; 5
    2b28:	9f af       	std	Y+63, r25	; 0x3f
    2b2a:	25 97       	sbiw	r28, 0x05	; 5
    2b2c:	8d a9       	ldd	r24, Y+53	; 0x35
    2b2e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2b30:	89 0f       	add	r24, r25
    2b32:	26 96       	adiw	r28, 0x06	; 6
    2b34:	8f af       	std	Y+63, r24	; 0x3f
    2b36:	26 97       	sbiw	r28, 0x06	; 6
    2b38:	81 e0       	ldi	r24, 0x01	; 1
    2b3a:	2e 96       	adiw	r28, 0x0e	; 14
    2b3c:	8f af       	std	Y+63, r24	; 0x3f
    2b3e:	2e 97       	sbiw	r28, 0x0e	; 14
    2b40:	26 96       	adiw	r28, 0x06	; 6
    2b42:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b44:	26 97       	sbiw	r28, 0x06	; 6
    2b46:	8d a9       	ldd	r24, Y+53	; 0x35
    2b48:	98 17       	cp	r25, r24
    2b4a:	18 f0       	brcs	.+6      	; 0x2b52 <Delay_ms+0x314>
    2b4c:	2e 96       	adiw	r28, 0x0e	; 14
    2b4e:	1f ae       	std	Y+63, r1	; 0x3f
    2b50:	2e 97       	sbiw	r28, 0x0e	; 14
    2b52:	9e a9       	ldd	r25, Y+54	; 0x36
    2b54:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b56:	98 0f       	add	r25, r24
    2b58:	27 96       	adiw	r28, 0x07	; 7
    2b5a:	9f af       	std	Y+63, r25	; 0x3f
    2b5c:	27 97       	sbiw	r28, 0x07	; 7
    2b5e:	91 e0       	ldi	r25, 0x01	; 1
    2b60:	2f 96       	adiw	r28, 0x0f	; 15
    2b62:	9f af       	std	Y+63, r25	; 0x3f
    2b64:	2f 97       	sbiw	r28, 0x0f	; 15
    2b66:	27 96       	adiw	r28, 0x07	; 7
    2b68:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b6a:	27 97       	sbiw	r28, 0x07	; 7
    2b6c:	9e a9       	ldd	r25, Y+54	; 0x36
    2b6e:	89 17       	cp	r24, r25
    2b70:	18 f0       	brcs	.+6      	; 0x2b78 <Delay_ms+0x33a>
    2b72:	2f 96       	adiw	r28, 0x0f	; 15
    2b74:	1f ae       	std	Y+63, r1	; 0x3f
    2b76:	2f 97       	sbiw	r28, 0x0f	; 15
    2b78:	2e 96       	adiw	r28, 0x0e	; 14
    2b7a:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b7c:	2e 97       	sbiw	r28, 0x0e	; 14
    2b7e:	27 96       	adiw	r28, 0x07	; 7
    2b80:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b82:	27 97       	sbiw	r28, 0x07	; 7
    2b84:	89 0f       	add	r24, r25
    2b86:	60 96       	adiw	r28, 0x10	; 16
    2b88:	8f af       	std	Y+63, r24	; 0x3f
    2b8a:	60 97       	sbiw	r28, 0x10	; 16
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	61 96       	adiw	r28, 0x11	; 17
    2b90:	8f af       	std	Y+63, r24	; 0x3f
    2b92:	61 97       	sbiw	r28, 0x11	; 17
    2b94:	60 96       	adiw	r28, 0x10	; 16
    2b96:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b98:	60 97       	sbiw	r28, 0x10	; 16
    2b9a:	27 96       	adiw	r28, 0x07	; 7
    2b9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2b9e:	27 97       	sbiw	r28, 0x07	; 7
    2ba0:	98 17       	cp	r25, r24
    2ba2:	18 f0       	brcs	.+6      	; 0x2baa <Delay_ms+0x36c>
    2ba4:	61 96       	adiw	r28, 0x11	; 17
    2ba6:	1f ae       	std	Y+63, r1	; 0x3f
    2ba8:	61 97       	sbiw	r28, 0x11	; 17
    2baa:	2f 96       	adiw	r28, 0x0f	; 15
    2bac:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bae:	2f 97       	sbiw	r28, 0x0f	; 15
    2bb0:	61 96       	adiw	r28, 0x11	; 17
    2bb2:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bb4:	61 97       	sbiw	r28, 0x11	; 17
    2bb6:	98 2b       	or	r25, r24
    2bb8:	2f 96       	adiw	r28, 0x0f	; 15
    2bba:	9f af       	std	Y+63, r25	; 0x3f
    2bbc:	2f 97       	sbiw	r28, 0x0f	; 15
    2bbe:	60 96       	adiw	r28, 0x10	; 16
    2bc0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bc2:	60 97       	sbiw	r28, 0x10	; 16
    2bc4:	27 96       	adiw	r28, 0x07	; 7
    2bc6:	9f af       	std	Y+63, r25	; 0x3f
    2bc8:	27 97       	sbiw	r28, 0x07	; 7
    2bca:	8f a9       	ldd	r24, Y+55	; 0x37
    2bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bce:	89 0f       	add	r24, r25
    2bd0:	28 96       	adiw	r28, 0x08	; 8
    2bd2:	8f af       	std	Y+63, r24	; 0x3f
    2bd4:	28 97       	sbiw	r28, 0x08	; 8
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	62 96       	adiw	r28, 0x12	; 18
    2bda:	8f af       	std	Y+63, r24	; 0x3f
    2bdc:	62 97       	sbiw	r28, 0x12	; 18
    2bde:	28 96       	adiw	r28, 0x08	; 8
    2be0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2be2:	28 97       	sbiw	r28, 0x08	; 8
    2be4:	8f a9       	ldd	r24, Y+55	; 0x37
    2be6:	98 17       	cp	r25, r24
    2be8:	18 f0       	brcs	.+6      	; 0x2bf0 <Delay_ms+0x3b2>
    2bea:	62 96       	adiw	r28, 0x12	; 18
    2bec:	1f ae       	std	Y+63, r1	; 0x3f
    2bee:	62 97       	sbiw	r28, 0x12	; 18
    2bf0:	2f 96       	adiw	r28, 0x0f	; 15
    2bf2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2bf4:	2f 97       	sbiw	r28, 0x0f	; 15
    2bf6:	28 96       	adiw	r28, 0x08	; 8
    2bf8:	8f ad       	ldd	r24, Y+63	; 0x3f
    2bfa:	28 97       	sbiw	r28, 0x08	; 8
    2bfc:	98 0f       	add	r25, r24
    2bfe:	63 96       	adiw	r28, 0x13	; 19
    2c00:	9f af       	std	Y+63, r25	; 0x3f
    2c02:	63 97       	sbiw	r28, 0x13	; 19
    2c04:	91 e0       	ldi	r25, 0x01	; 1
    2c06:	64 96       	adiw	r28, 0x14	; 20
    2c08:	9f af       	std	Y+63, r25	; 0x3f
    2c0a:	64 97       	sbiw	r28, 0x14	; 20
    2c0c:	63 96       	adiw	r28, 0x13	; 19
    2c0e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c10:	63 97       	sbiw	r28, 0x13	; 19
    2c12:	28 96       	adiw	r28, 0x08	; 8
    2c14:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c16:	28 97       	sbiw	r28, 0x08	; 8
    2c18:	89 17       	cp	r24, r25
    2c1a:	18 f0       	brcs	.+6      	; 0x2c22 <Delay_ms+0x3e4>
    2c1c:	64 96       	adiw	r28, 0x14	; 20
    2c1e:	1f ae       	std	Y+63, r1	; 0x3f
    2c20:	64 97       	sbiw	r28, 0x14	; 20
    2c22:	62 96       	adiw	r28, 0x12	; 18
    2c24:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c26:	62 97       	sbiw	r28, 0x12	; 18
    2c28:	64 96       	adiw	r28, 0x14	; 20
    2c2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c2c:	64 97       	sbiw	r28, 0x14	; 20
    2c2e:	89 2b       	or	r24, r25
    2c30:	62 96       	adiw	r28, 0x12	; 18
    2c32:	8f af       	std	Y+63, r24	; 0x3f
    2c34:	62 97       	sbiw	r28, 0x12	; 18
    2c36:	63 96       	adiw	r28, 0x13	; 19
    2c38:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c3a:	63 97       	sbiw	r28, 0x13	; 19
    2c3c:	28 96       	adiw	r28, 0x08	; 8
    2c3e:	8f af       	std	Y+63, r24	; 0x3f
    2c40:	28 97       	sbiw	r28, 0x08	; 8
    2c42:	98 ad       	ldd	r25, Y+56	; 0x38
    2c44:	21 96       	adiw	r28, 0x01	; 1
    2c46:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c48:	21 97       	sbiw	r28, 0x01	; 1
    2c4a:	98 0f       	add	r25, r24
    2c4c:	29 96       	adiw	r28, 0x09	; 9
    2c4e:	9f af       	std	Y+63, r25	; 0x3f
    2c50:	29 97       	sbiw	r28, 0x09	; 9
    2c52:	91 e0       	ldi	r25, 0x01	; 1
    2c54:	65 96       	adiw	r28, 0x15	; 21
    2c56:	9f af       	std	Y+63, r25	; 0x3f
    2c58:	65 97       	sbiw	r28, 0x15	; 21
    2c5a:	29 96       	adiw	r28, 0x09	; 9
    2c5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c5e:	29 97       	sbiw	r28, 0x09	; 9
    2c60:	98 ad       	ldd	r25, Y+56	; 0x38
    2c62:	89 17       	cp	r24, r25
    2c64:	18 f0       	brcs	.+6      	; 0x2c6c <Delay_ms+0x42e>
    2c66:	65 96       	adiw	r28, 0x15	; 21
    2c68:	1f ae       	std	Y+63, r1	; 0x3f
    2c6a:	65 97       	sbiw	r28, 0x15	; 21
    2c6c:	62 96       	adiw	r28, 0x12	; 18
    2c6e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c70:	62 97       	sbiw	r28, 0x12	; 18
    2c72:	29 96       	adiw	r28, 0x09	; 9
    2c74:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c76:	29 97       	sbiw	r28, 0x09	; 9
    2c78:	89 0f       	add	r24, r25
    2c7a:	66 96       	adiw	r28, 0x16	; 22
    2c7c:	8f af       	std	Y+63, r24	; 0x3f
    2c7e:	66 97       	sbiw	r28, 0x16	; 22
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	67 96       	adiw	r28, 0x17	; 23
    2c84:	8f af       	std	Y+63, r24	; 0x3f
    2c86:	67 97       	sbiw	r28, 0x17	; 23
    2c88:	66 96       	adiw	r28, 0x16	; 22
    2c8a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2c8c:	66 97       	sbiw	r28, 0x16	; 22
    2c8e:	29 96       	adiw	r28, 0x09	; 9
    2c90:	8f ad       	ldd	r24, Y+63	; 0x3f
    2c92:	29 97       	sbiw	r28, 0x09	; 9
    2c94:	98 17       	cp	r25, r24
    2c96:	18 f0       	brcs	.+6      	; 0x2c9e <Delay_ms+0x460>
    2c98:	67 96       	adiw	r28, 0x17	; 23
    2c9a:	1f ae       	std	Y+63, r1	; 0x3f
    2c9c:	67 97       	sbiw	r28, 0x17	; 23
    2c9e:	65 96       	adiw	r28, 0x15	; 21
    2ca0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2ca2:	65 97       	sbiw	r28, 0x15	; 21
    2ca4:	67 96       	adiw	r28, 0x17	; 23
    2ca6:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ca8:	67 97       	sbiw	r28, 0x17	; 23
    2caa:	98 2b       	or	r25, r24
    2cac:	65 96       	adiw	r28, 0x15	; 21
    2cae:	9f af       	std	Y+63, r25	; 0x3f
    2cb0:	65 97       	sbiw	r28, 0x15	; 21
    2cb2:	66 96       	adiw	r28, 0x16	; 22
    2cb4:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cb6:	66 97       	sbiw	r28, 0x16	; 22
    2cb8:	29 96       	adiw	r28, 0x09	; 9
    2cba:	9f af       	std	Y+63, r25	; 0x3f
    2cbc:	29 97       	sbiw	r28, 0x09	; 9
    2cbe:	89 ad       	ldd	r24, Y+57	; 0x39
    2cc0:	22 96       	adiw	r28, 0x02	; 2
    2cc2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cc4:	22 97       	sbiw	r28, 0x02	; 2
    2cc6:	89 0f       	add	r24, r25
    2cc8:	2a 96       	adiw	r28, 0x0a	; 10
    2cca:	8f af       	std	Y+63, r24	; 0x3f
    2ccc:	2a 97       	sbiw	r28, 0x0a	; 10
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	68 96       	adiw	r28, 0x18	; 24
    2cd2:	8f af       	std	Y+63, r24	; 0x3f
    2cd4:	68 97       	sbiw	r28, 0x18	; 24
    2cd6:	2a 96       	adiw	r28, 0x0a	; 10
    2cd8:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cda:	2a 97       	sbiw	r28, 0x0a	; 10
    2cdc:	89 ad       	ldd	r24, Y+57	; 0x39
    2cde:	98 17       	cp	r25, r24
    2ce0:	18 f0       	brcs	.+6      	; 0x2ce8 <Delay_ms+0x4aa>
    2ce2:	68 96       	adiw	r28, 0x18	; 24
    2ce4:	1f ae       	std	Y+63, r1	; 0x3f
    2ce6:	68 97       	sbiw	r28, 0x18	; 24
    2ce8:	65 96       	adiw	r28, 0x15	; 21
    2cea:	9f ad       	ldd	r25, Y+63	; 0x3f
    2cec:	65 97       	sbiw	r28, 0x15	; 21
    2cee:	2a 96       	adiw	r28, 0x0a	; 10
    2cf0:	8f ad       	ldd	r24, Y+63	; 0x3f
    2cf2:	2a 97       	sbiw	r28, 0x0a	; 10
    2cf4:	98 0f       	add	r25, r24
    2cf6:	69 96       	adiw	r28, 0x19	; 25
    2cf8:	9f af       	std	Y+63, r25	; 0x3f
    2cfa:	69 97       	sbiw	r28, 0x19	; 25
    2cfc:	91 e0       	ldi	r25, 0x01	; 1
    2cfe:	6a 96       	adiw	r28, 0x1a	; 26
    2d00:	9f af       	std	Y+63, r25	; 0x3f
    2d02:	6a 97       	sbiw	r28, 0x1a	; 26
    2d04:	69 96       	adiw	r28, 0x19	; 25
    2d06:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d08:	69 97       	sbiw	r28, 0x19	; 25
    2d0a:	2a 96       	adiw	r28, 0x0a	; 10
    2d0c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d0e:	2a 97       	sbiw	r28, 0x0a	; 10
    2d10:	89 17       	cp	r24, r25
    2d12:	18 f0       	brcs	.+6      	; 0x2d1a <Delay_ms+0x4dc>
    2d14:	6a 96       	adiw	r28, 0x1a	; 26
    2d16:	1f ae       	std	Y+63, r1	; 0x3f
    2d18:	6a 97       	sbiw	r28, 0x1a	; 26
    2d1a:	68 96       	adiw	r28, 0x18	; 24
    2d1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d1e:	68 97       	sbiw	r28, 0x18	; 24
    2d20:	6a 96       	adiw	r28, 0x1a	; 26
    2d22:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d24:	6a 97       	sbiw	r28, 0x1a	; 26
    2d26:	89 2b       	or	r24, r25
    2d28:	68 96       	adiw	r28, 0x18	; 24
    2d2a:	8f af       	std	Y+63, r24	; 0x3f
    2d2c:	68 97       	sbiw	r28, 0x18	; 24
    2d2e:	69 96       	adiw	r28, 0x19	; 25
    2d30:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d32:	69 97       	sbiw	r28, 0x19	; 25
    2d34:	2a 96       	adiw	r28, 0x0a	; 10
    2d36:	8f af       	std	Y+63, r24	; 0x3f
    2d38:	2a 97       	sbiw	r28, 0x0a	; 10
    2d3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d3c:	23 96       	adiw	r28, 0x03	; 3
    2d3e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d40:	23 97       	sbiw	r28, 0x03	; 3
    2d42:	98 0f       	add	r25, r24
    2d44:	2b 96       	adiw	r28, 0x0b	; 11
    2d46:	9f af       	std	Y+63, r25	; 0x3f
    2d48:	2b 97       	sbiw	r28, 0x0b	; 11
    2d4a:	91 e0       	ldi	r25, 0x01	; 1
    2d4c:	6b 96       	adiw	r28, 0x1b	; 27
    2d4e:	9f af       	std	Y+63, r25	; 0x3f
    2d50:	6b 97       	sbiw	r28, 0x1b	; 27
    2d52:	2b 96       	adiw	r28, 0x0b	; 11
    2d54:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d56:	2b 97       	sbiw	r28, 0x0b	; 11
    2d58:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d5a:	89 17       	cp	r24, r25
    2d5c:	18 f0       	brcs	.+6      	; 0x2d64 <Delay_ms+0x526>
    2d5e:	6b 96       	adiw	r28, 0x1b	; 27
    2d60:	1f ae       	std	Y+63, r1	; 0x3f
    2d62:	6b 97       	sbiw	r28, 0x1b	; 27
    2d64:	68 96       	adiw	r28, 0x18	; 24
    2d66:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d68:	68 97       	sbiw	r28, 0x18	; 24
    2d6a:	2b 96       	adiw	r28, 0x0b	; 11
    2d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d6e:	2b 97       	sbiw	r28, 0x0b	; 11
    2d70:	89 0f       	add	r24, r25
    2d72:	6c 96       	adiw	r28, 0x1c	; 28
    2d74:	8f af       	std	Y+63, r24	; 0x3f
    2d76:	6c 97       	sbiw	r28, 0x1c	; 28
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	6d 96       	adiw	r28, 0x1d	; 29
    2d7c:	8f af       	std	Y+63, r24	; 0x3f
    2d7e:	6d 97       	sbiw	r28, 0x1d	; 29
    2d80:	6c 96       	adiw	r28, 0x1c	; 28
    2d82:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d84:	6c 97       	sbiw	r28, 0x1c	; 28
    2d86:	2b 96       	adiw	r28, 0x0b	; 11
    2d88:	8f ad       	ldd	r24, Y+63	; 0x3f
    2d8a:	2b 97       	sbiw	r28, 0x0b	; 11
    2d8c:	98 17       	cp	r25, r24
    2d8e:	18 f0       	brcs	.+6      	; 0x2d96 <Delay_ms+0x558>
    2d90:	6d 96       	adiw	r28, 0x1d	; 29
    2d92:	1f ae       	std	Y+63, r1	; 0x3f
    2d94:	6d 97       	sbiw	r28, 0x1d	; 29
    2d96:	6b 96       	adiw	r28, 0x1b	; 27
    2d98:	9f ad       	ldd	r25, Y+63	; 0x3f
    2d9a:	6b 97       	sbiw	r28, 0x1b	; 27
    2d9c:	6d 96       	adiw	r28, 0x1d	; 29
    2d9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2da0:	6d 97       	sbiw	r28, 0x1d	; 29
    2da2:	98 2b       	or	r25, r24
    2da4:	6b 96       	adiw	r28, 0x1b	; 27
    2da6:	9f af       	std	Y+63, r25	; 0x3f
    2da8:	6b 97       	sbiw	r28, 0x1b	; 27
    2daa:	6c 96       	adiw	r28, 0x1c	; 28
    2dac:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dae:	6c 97       	sbiw	r28, 0x1c	; 28
    2db0:	2b 96       	adiw	r28, 0x0b	; 11
    2db2:	9f af       	std	Y+63, r25	; 0x3f
    2db4:	2b 97       	sbiw	r28, 0x0b	; 11
    2db6:	8b ad       	ldd	r24, Y+59	; 0x3b
    2db8:	24 96       	adiw	r28, 0x04	; 4
    2dba:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dbc:	24 97       	sbiw	r28, 0x04	; 4
    2dbe:	89 0f       	add	r24, r25
    2dc0:	2c 96       	adiw	r28, 0x0c	; 12
    2dc2:	8f af       	std	Y+63, r24	; 0x3f
    2dc4:	2c 97       	sbiw	r28, 0x0c	; 12
    2dc6:	81 e0       	ldi	r24, 0x01	; 1
    2dc8:	6e 96       	adiw	r28, 0x1e	; 30
    2dca:	8f af       	std	Y+63, r24	; 0x3f
    2dcc:	6e 97       	sbiw	r28, 0x1e	; 30
    2dce:	2c 96       	adiw	r28, 0x0c	; 12
    2dd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dd2:	2c 97       	sbiw	r28, 0x0c	; 12
    2dd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dd6:	98 17       	cp	r25, r24
    2dd8:	18 f0       	brcs	.+6      	; 0x2de0 <Delay_ms+0x5a2>
    2dda:	6e 96       	adiw	r28, 0x1e	; 30
    2ddc:	1f ae       	std	Y+63, r1	; 0x3f
    2dde:	6e 97       	sbiw	r28, 0x1e	; 30
    2de0:	6b 96       	adiw	r28, 0x1b	; 27
    2de2:	9f ad       	ldd	r25, Y+63	; 0x3f
    2de4:	6b 97       	sbiw	r28, 0x1b	; 27
    2de6:	2c 96       	adiw	r28, 0x0c	; 12
    2de8:	8f ad       	ldd	r24, Y+63	; 0x3f
    2dea:	2c 97       	sbiw	r28, 0x0c	; 12
    2dec:	98 0f       	add	r25, r24
    2dee:	6f 96       	adiw	r28, 0x1f	; 31
    2df0:	9f af       	std	Y+63, r25	; 0x3f
    2df2:	6f 97       	sbiw	r28, 0x1f	; 31
    2df4:	91 e0       	ldi	r25, 0x01	; 1
    2df6:	a0 96       	adiw	r28, 0x20	; 32
    2df8:	9f af       	std	Y+63, r25	; 0x3f
    2dfa:	a0 97       	sbiw	r28, 0x20	; 32
    2dfc:	6f 96       	adiw	r28, 0x1f	; 31
    2dfe:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e00:	6f 97       	sbiw	r28, 0x1f	; 31
    2e02:	2c 96       	adiw	r28, 0x0c	; 12
    2e04:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e06:	2c 97       	sbiw	r28, 0x0c	; 12
    2e08:	89 17       	cp	r24, r25
    2e0a:	18 f0       	brcs	.+6      	; 0x2e12 <Delay_ms+0x5d4>
    2e0c:	a0 96       	adiw	r28, 0x20	; 32
    2e0e:	1f ae       	std	Y+63, r1	; 0x3f
    2e10:	a0 97       	sbiw	r28, 0x20	; 32
    2e12:	6e 96       	adiw	r28, 0x1e	; 30
    2e14:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e16:	6e 97       	sbiw	r28, 0x1e	; 30
    2e18:	a0 96       	adiw	r28, 0x20	; 32
    2e1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e1c:	a0 97       	sbiw	r28, 0x20	; 32
    2e1e:	89 2b       	or	r24, r25
    2e20:	6e 96       	adiw	r28, 0x1e	; 30
    2e22:	8f af       	std	Y+63, r24	; 0x3f
    2e24:	6e 97       	sbiw	r28, 0x1e	; 30
    2e26:	6f 96       	adiw	r28, 0x1f	; 31
    2e28:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e2a:	6f 97       	sbiw	r28, 0x1f	; 31
    2e2c:	2c 96       	adiw	r28, 0x0c	; 12
    2e2e:	8f af       	std	Y+63, r24	; 0x3f
    2e30:	2c 97       	sbiw	r28, 0x0c	; 12
    2e32:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e34:	25 96       	adiw	r28, 0x05	; 5
    2e36:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e38:	25 97       	sbiw	r28, 0x05	; 5
    2e3a:	98 0f       	add	r25, r24
    2e3c:	2d 96       	adiw	r28, 0x0d	; 13
    2e3e:	9f af       	std	Y+63, r25	; 0x3f
    2e40:	2d 97       	sbiw	r28, 0x0d	; 13
    2e42:	6e 96       	adiw	r28, 0x1e	; 30
    2e44:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e46:	6e 97       	sbiw	r28, 0x1e	; 30
    2e48:	2d 96       	adiw	r28, 0x0d	; 13
    2e4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e4c:	2d 97       	sbiw	r28, 0x0d	; 13
    2e4e:	89 0f       	add	r24, r25
    2e50:	2d 96       	adiw	r28, 0x0d	; 13
    2e52:	8f af       	std	Y+63, r24	; 0x3f
    2e54:	2d 97       	sbiw	r28, 0x0d	; 13
    2e56:	26 96       	adiw	r28, 0x06	; 6
    2e58:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e5a:	26 97       	sbiw	r28, 0x06	; 6
    2e5c:	89 83       	std	Y+1, r24	; 0x01
    2e5e:	27 96       	adiw	r28, 0x07	; 7
    2e60:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e62:	27 97       	sbiw	r28, 0x07	; 7
    2e64:	9a 83       	std	Y+2, r25	; 0x02
    2e66:	28 96       	adiw	r28, 0x08	; 8
    2e68:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e6a:	28 97       	sbiw	r28, 0x08	; 8
    2e6c:	8b 83       	std	Y+3, r24	; 0x03
    2e6e:	29 96       	adiw	r28, 0x09	; 9
    2e70:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e72:	29 97       	sbiw	r28, 0x09	; 9
    2e74:	9c 83       	std	Y+4, r25	; 0x04
    2e76:	2a 96       	adiw	r28, 0x0a	; 10
    2e78:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e7a:	2a 97       	sbiw	r28, 0x0a	; 10
    2e7c:	8d 83       	std	Y+5, r24	; 0x05
    2e7e:	2b 96       	adiw	r28, 0x0b	; 11
    2e80:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e82:	2b 97       	sbiw	r28, 0x0b	; 11
    2e84:	9e 83       	std	Y+6, r25	; 0x06
    2e86:	2c 96       	adiw	r28, 0x0c	; 12
    2e88:	8f ad       	ldd	r24, Y+63	; 0x3f
    2e8a:	2c 97       	sbiw	r28, 0x0c	; 12
    2e8c:	8f 83       	std	Y+7, r24	; 0x07
    2e8e:	2d 96       	adiw	r28, 0x0d	; 13
    2e90:	9f ad       	ldd	r25, Y+63	; 0x3f
    2e92:	2d 97       	sbiw	r28, 0x0d	; 13
    2e94:	98 87       	std	Y+8, r25	; 0x08

			}
			TIFR |= (1<<TOV2);
    2e96:	a8 e5       	ldi	r26, 0x58	; 88
    2e98:	b0 e0       	ldi	r27, 0x00	; 0
    2e9a:	e8 e5       	ldi	r30, 0x58	; 88
    2e9c:	f0 e0       	ldi	r31, 0x00	; 0
    2e9e:	80 81       	ld	r24, Z
    2ea0:	80 64       	ori	r24, 0x40	; 64
    2ea2:	8c 93       	st	X, r24
	}

	if(timer==T2)
	{

		while(n_milleSec)
    2ea4:	89 81       	ldd	r24, Y+1	; 0x01
    2ea6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea8:	89 2b       	or	r24, r25
    2eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2eac:	89 2b       	or	r24, r25
    2eae:	9c 81       	ldd	r25, Y+4	; 0x04
    2eb0:	89 2b       	or	r24, r25
    2eb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb4:	89 2b       	or	r24, r25
    2eb6:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb8:	89 2b       	or	r24, r25
    2eba:	9f 81       	ldd	r25, Y+7	; 0x07
    2ebc:	89 2b       	or	r24, r25
    2ebe:	98 85       	ldd	r25, Y+8	; 0x08
    2ec0:	89 2b       	or	r24, r25
    2ec2:	88 23       	and	r24, r24
    2ec4:	09 f0       	breq	.+2      	; 0x2ec8 <Delay_ms+0x68a>
    2ec6:	f3 cd       	rjmp	.-1050   	; 0x2aae <Delay_ms+0x270>


		}
	}

}
    2ec8:	c1 5a       	subi	r28, 0xA1	; 161
    2eca:	df 4f       	sbci	r29, 0xFF	; 255
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	cf 91       	pop	r28
    2ed8:	df 91       	pop	r29
    2eda:	0f 91       	pop	r16
    2edc:	08 95       	ret

00002ede <Wait_ms>:
 * *******************************************************************************************************/

/*pointer to call the function when the interrupt happens*/

void Wait_ms(void)
{
    2ede:	df 93       	push	r29
    2ee0:	cf 93       	push	r28
    2ee2:	cd b7       	in	r28, 0x3d	; 61
    2ee4:	de b7       	in	r29, 0x3e	; 62
    2ee6:	eb 97       	sbiw	r28, 0x3b	; 59
    2ee8:	0f b6       	in	r0, 0x3f	; 63
    2eea:	f8 94       	cli
    2eec:	de bf       	out	0x3e, r29	; 62
    2eee:	0f be       	out	0x3f, r0	; 63
    2ef0:	cd bf       	out	0x3d, r28	; 61

	static uint64_t count=0;                           //the number you wanted to delay as EX delay(3000ms)
	static uint8_t count31=0;                          //the number that will reach to make a 1ms
	count31++;
    2ef2:	80 91 9a 00 	lds	r24, 0x009A
    2ef6:	8f 5f       	subi	r24, 0xFF	; 255
    2ef8:	80 93 9a 00 	sts	0x009A, r24

	if (31 == count31)
    2efc:	80 91 9a 00 	lds	r24, 0x009A
    2f00:	8f 31       	cpi	r24, 0x1F	; 31
    2f02:	09 f0       	breq	.+2      	; 0x2f06 <Wait_ms+0x28>
    2f04:	f6 c0       	rjmp	.+492    	; 0x30f2 <Wait_ms+0x214>
	{
		count++;
    2f06:	80 91 9b 00 	lds	r24, 0x009B
    2f0a:	89 8b       	std	Y+17, r24	; 0x11
    2f0c:	90 91 9c 00 	lds	r25, 0x009C
    2f10:	9a 8b       	std	Y+18, r25	; 0x12
    2f12:	80 91 9d 00 	lds	r24, 0x009D
    2f16:	8b 8b       	std	Y+19, r24	; 0x13
    2f18:	90 91 9e 00 	lds	r25, 0x009E
    2f1c:	9c 8b       	std	Y+20, r25	; 0x14
    2f1e:	80 91 9f 00 	lds	r24, 0x009F
    2f22:	8d 8b       	std	Y+21, r24	; 0x15
    2f24:	90 91 a0 00 	lds	r25, 0x00A0
    2f28:	9e 8b       	std	Y+22, r25	; 0x16
    2f2a:	80 91 a1 00 	lds	r24, 0x00A1
    2f2e:	8f 8b       	std	Y+23, r24	; 0x17
    2f30:	90 91 a2 00 	lds	r25, 0x00A2
    2f34:	98 8f       	std	Y+24, r25	; 0x18
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	89 8f       	std	Y+25, r24	; 0x19
    2f3a:	1a 8e       	std	Y+26, r1	; 0x1a
    2f3c:	1b 8e       	std	Y+27, r1	; 0x1b
    2f3e:	1c 8e       	std	Y+28, r1	; 0x1c
    2f40:	1d 8e       	std	Y+29, r1	; 0x1d
    2f42:	1e 8e       	std	Y+30, r1	; 0x1e
    2f44:	1f 8e       	std	Y+31, r1	; 0x1f
    2f46:	18 a2       	std	Y+32, r1	; 0x20
    2f48:	99 89       	ldd	r25, Y+17	; 0x11
    2f4a:	89 8d       	ldd	r24, Y+25	; 0x19
    2f4c:	98 0f       	add	r25, r24
    2f4e:	99 a3       	std	Y+33, r25	; 0x21
    2f50:	91 e0       	ldi	r25, 0x01	; 1
    2f52:	99 a7       	std	Y+41, r25	; 0x29
    2f54:	89 a1       	ldd	r24, Y+33	; 0x21
    2f56:	99 89       	ldd	r25, Y+17	; 0x11
    2f58:	89 17       	cp	r24, r25
    2f5a:	08 f0       	brcs	.+2      	; 0x2f5e <Wait_ms+0x80>
    2f5c:	19 a6       	std	Y+41, r1	; 0x29
    2f5e:	8a 89       	ldd	r24, Y+18	; 0x12
    2f60:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2f62:	89 0f       	add	r24, r25
    2f64:	8a a3       	std	Y+34, r24	; 0x22
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	8a a7       	std	Y+42, r24	; 0x2a
    2f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f6c:	8a 89       	ldd	r24, Y+18	; 0x12
    2f6e:	98 17       	cp	r25, r24
    2f70:	08 f0       	brcs	.+2      	; 0x2f74 <Wait_ms+0x96>
    2f72:	1a a6       	std	Y+42, r1	; 0x2a
    2f74:	99 a5       	ldd	r25, Y+41	; 0x29
    2f76:	8a a1       	ldd	r24, Y+34	; 0x22
    2f78:	98 0f       	add	r25, r24
    2f7a:	9b a7       	std	Y+43, r25	; 0x2b
    2f7c:	91 e0       	ldi	r25, 0x01	; 1
    2f7e:	9c a7       	std	Y+44, r25	; 0x2c
    2f80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f82:	9a a1       	ldd	r25, Y+34	; 0x22
    2f84:	89 17       	cp	r24, r25
    2f86:	08 f0       	brcs	.+2      	; 0x2f8a <Wait_ms+0xac>
    2f88:	1c a6       	std	Y+44, r1	; 0x2c
    2f8a:	8a a5       	ldd	r24, Y+42	; 0x2a
    2f8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f8e:	89 2b       	or	r24, r25
    2f90:	8a a7       	std	Y+42, r24	; 0x2a
    2f92:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f94:	8a a3       	std	Y+34, r24	; 0x22
    2f96:	9b 89       	ldd	r25, Y+19	; 0x13
    2f98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f9a:	98 0f       	add	r25, r24
    2f9c:	9b a3       	std	Y+35, r25	; 0x23
    2f9e:	91 e0       	ldi	r25, 0x01	; 1
    2fa0:	9d a7       	std	Y+45, r25	; 0x2d
    2fa2:	8b a1       	ldd	r24, Y+35	; 0x23
    2fa4:	9b 89       	ldd	r25, Y+19	; 0x13
    2fa6:	89 17       	cp	r24, r25
    2fa8:	08 f0       	brcs	.+2      	; 0x2fac <Wait_ms+0xce>
    2faa:	1d a6       	std	Y+45, r1	; 0x2d
    2fac:	8a a5       	ldd	r24, Y+42	; 0x2a
    2fae:	9b a1       	ldd	r25, Y+35	; 0x23
    2fb0:	89 0f       	add	r24, r25
    2fb2:	8e a7       	std	Y+46, r24	; 0x2e
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	8f a7       	std	Y+47, r24	; 0x2f
    2fb8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fba:	8b a1       	ldd	r24, Y+35	; 0x23
    2fbc:	98 17       	cp	r25, r24
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <Wait_ms+0xe4>
    2fc0:	1f a6       	std	Y+47, r1	; 0x2f
    2fc2:	9d a5       	ldd	r25, Y+45	; 0x2d
    2fc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc6:	98 2b       	or	r25, r24
    2fc8:	9d a7       	std	Y+45, r25	; 0x2d
    2fca:	9e a5       	ldd	r25, Y+46	; 0x2e
    2fcc:	9b a3       	std	Y+35, r25	; 0x23
    2fce:	8c 89       	ldd	r24, Y+20	; 0x14
    2fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd2:	89 0f       	add	r24, r25
    2fd4:	8c a3       	std	Y+36, r24	; 0x24
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	88 ab       	std	Y+48, r24	; 0x30
    2fda:	9c a1       	ldd	r25, Y+36	; 0x24
    2fdc:	8c 89       	ldd	r24, Y+20	; 0x14
    2fde:	98 17       	cp	r25, r24
    2fe0:	08 f0       	brcs	.+2      	; 0x2fe4 <Wait_ms+0x106>
    2fe2:	18 aa       	std	Y+48, r1	; 0x30
    2fe4:	9d a5       	ldd	r25, Y+45	; 0x2d
    2fe6:	8c a1       	ldd	r24, Y+36	; 0x24
    2fe8:	98 0f       	add	r25, r24
    2fea:	99 ab       	std	Y+49, r25	; 0x31
    2fec:	91 e0       	ldi	r25, 0x01	; 1
    2fee:	9a ab       	std	Y+50, r25	; 0x32
    2ff0:	89 a9       	ldd	r24, Y+49	; 0x31
    2ff2:	9c a1       	ldd	r25, Y+36	; 0x24
    2ff4:	89 17       	cp	r24, r25
    2ff6:	08 f0       	brcs	.+2      	; 0x2ffa <Wait_ms+0x11c>
    2ff8:	1a aa       	std	Y+50, r1	; 0x32
    2ffa:	88 a9       	ldd	r24, Y+48	; 0x30
    2ffc:	9a a9       	ldd	r25, Y+50	; 0x32
    2ffe:	89 2b       	or	r24, r25
    3000:	88 ab       	std	Y+48, r24	; 0x30
    3002:	89 a9       	ldd	r24, Y+49	; 0x31
    3004:	8c a3       	std	Y+36, r24	; 0x24
    3006:	9d 89       	ldd	r25, Y+21	; 0x15
    3008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    300a:	98 0f       	add	r25, r24
    300c:	9d a3       	std	Y+37, r25	; 0x25
    300e:	91 e0       	ldi	r25, 0x01	; 1
    3010:	9b ab       	std	Y+51, r25	; 0x33
    3012:	8d a1       	ldd	r24, Y+37	; 0x25
    3014:	9d 89       	ldd	r25, Y+21	; 0x15
    3016:	89 17       	cp	r24, r25
    3018:	08 f0       	brcs	.+2      	; 0x301c <Wait_ms+0x13e>
    301a:	1b aa       	std	Y+51, r1	; 0x33
    301c:	88 a9       	ldd	r24, Y+48	; 0x30
    301e:	9d a1       	ldd	r25, Y+37	; 0x25
    3020:	89 0f       	add	r24, r25
    3022:	8c ab       	std	Y+52, r24	; 0x34
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	8d ab       	std	Y+53, r24	; 0x35
    3028:	9c a9       	ldd	r25, Y+52	; 0x34
    302a:	8d a1       	ldd	r24, Y+37	; 0x25
    302c:	98 17       	cp	r25, r24
    302e:	08 f0       	brcs	.+2      	; 0x3032 <Wait_ms+0x154>
    3030:	1d aa       	std	Y+53, r1	; 0x35
    3032:	9b a9       	ldd	r25, Y+51	; 0x33
    3034:	8d a9       	ldd	r24, Y+53	; 0x35
    3036:	98 2b       	or	r25, r24
    3038:	9b ab       	std	Y+51, r25	; 0x33
    303a:	9c a9       	ldd	r25, Y+52	; 0x34
    303c:	9d a3       	std	Y+37, r25	; 0x25
    303e:	8e 89       	ldd	r24, Y+22	; 0x16
    3040:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3042:	89 0f       	add	r24, r25
    3044:	8e a3       	std	Y+38, r24	; 0x26
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	8e ab       	std	Y+54, r24	; 0x36
    304a:	9e a1       	ldd	r25, Y+38	; 0x26
    304c:	8e 89       	ldd	r24, Y+22	; 0x16
    304e:	98 17       	cp	r25, r24
    3050:	08 f0       	brcs	.+2      	; 0x3054 <Wait_ms+0x176>
    3052:	1e aa       	std	Y+54, r1	; 0x36
    3054:	9b a9       	ldd	r25, Y+51	; 0x33
    3056:	8e a1       	ldd	r24, Y+38	; 0x26
    3058:	98 0f       	add	r25, r24
    305a:	9f ab       	std	Y+55, r25	; 0x37
    305c:	91 e0       	ldi	r25, 0x01	; 1
    305e:	98 af       	std	Y+56, r25	; 0x38
    3060:	8f a9       	ldd	r24, Y+55	; 0x37
    3062:	9e a1       	ldd	r25, Y+38	; 0x26
    3064:	89 17       	cp	r24, r25
    3066:	08 f0       	brcs	.+2      	; 0x306a <Wait_ms+0x18c>
    3068:	18 ae       	std	Y+56, r1	; 0x38
    306a:	8e a9       	ldd	r24, Y+54	; 0x36
    306c:	98 ad       	ldd	r25, Y+56	; 0x38
    306e:	89 2b       	or	r24, r25
    3070:	8e ab       	std	Y+54, r24	; 0x36
    3072:	8f a9       	ldd	r24, Y+55	; 0x37
    3074:	8e a3       	std	Y+38, r24	; 0x26
    3076:	9f 89       	ldd	r25, Y+23	; 0x17
    3078:	8f 8d       	ldd	r24, Y+31	; 0x1f
    307a:	98 0f       	add	r25, r24
    307c:	9f a3       	std	Y+39, r25	; 0x27
    307e:	91 e0       	ldi	r25, 0x01	; 1
    3080:	99 af       	std	Y+57, r25	; 0x39
    3082:	8f a1       	ldd	r24, Y+39	; 0x27
    3084:	9f 89       	ldd	r25, Y+23	; 0x17
    3086:	89 17       	cp	r24, r25
    3088:	08 f0       	brcs	.+2      	; 0x308c <Wait_ms+0x1ae>
    308a:	19 ae       	std	Y+57, r1	; 0x39
    308c:	8e a9       	ldd	r24, Y+54	; 0x36
    308e:	9f a1       	ldd	r25, Y+39	; 0x27
    3090:	89 0f       	add	r24, r25
    3092:	8a af       	std	Y+58, r24	; 0x3a
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	8b af       	std	Y+59, r24	; 0x3b
    3098:	9a ad       	ldd	r25, Y+58	; 0x3a
    309a:	8f a1       	ldd	r24, Y+39	; 0x27
    309c:	98 17       	cp	r25, r24
    309e:	08 f0       	brcs	.+2      	; 0x30a2 <Wait_ms+0x1c4>
    30a0:	1b ae       	std	Y+59, r1	; 0x3b
    30a2:	99 ad       	ldd	r25, Y+57	; 0x39
    30a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    30a6:	98 2b       	or	r25, r24
    30a8:	99 af       	std	Y+57, r25	; 0x39
    30aa:	9a ad       	ldd	r25, Y+58	; 0x3a
    30ac:	9f a3       	std	Y+39, r25	; 0x27
    30ae:	88 8d       	ldd	r24, Y+24	; 0x18
    30b0:	98 a1       	ldd	r25, Y+32	; 0x20
    30b2:	89 0f       	add	r24, r25
    30b4:	88 a7       	std	Y+40, r24	; 0x28
    30b6:	89 ad       	ldd	r24, Y+57	; 0x39
    30b8:	98 a5       	ldd	r25, Y+40	; 0x28
    30ba:	89 0f       	add	r24, r25
    30bc:	88 a7       	std	Y+40, r24	; 0x28
    30be:	29 a1       	ldd	r18, Y+33	; 0x21
    30c0:	3a a1       	ldd	r19, Y+34	; 0x22
    30c2:	4b a1       	ldd	r20, Y+35	; 0x23
    30c4:	5c a1       	ldd	r21, Y+36	; 0x24
    30c6:	6d a1       	ldd	r22, Y+37	; 0x25
    30c8:	7e a1       	ldd	r23, Y+38	; 0x26
    30ca:	8f a1       	ldd	r24, Y+39	; 0x27
    30cc:	98 a5       	ldd	r25, Y+40	; 0x28
    30ce:	20 93 9b 00 	sts	0x009B, r18
    30d2:	30 93 9c 00 	sts	0x009C, r19
    30d6:	40 93 9d 00 	sts	0x009D, r20
    30da:	50 93 9e 00 	sts	0x009E, r21
    30de:	60 93 9f 00 	sts	0x009F, r22
    30e2:	70 93 a0 00 	sts	0x00A0, r23
    30e6:	80 93 a1 00 	sts	0x00A1, r24
    30ea:	90 93 a2 00 	sts	0x00A2, r25
		count31 = 0;
    30ee:	10 92 9a 00 	sts	0x009A, r1

	}

	if(count == g_time_MS)                            //if the number reached the number you want call the func
    30f2:	80 91 9b 00 	lds	r24, 0x009B
    30f6:	89 87       	std	Y+9, r24	; 0x09
    30f8:	90 91 9c 00 	lds	r25, 0x009C
    30fc:	9a 87       	std	Y+10, r25	; 0x0a
    30fe:	80 91 9d 00 	lds	r24, 0x009D
    3102:	8b 87       	std	Y+11, r24	; 0x0b
    3104:	90 91 9e 00 	lds	r25, 0x009E
    3108:	9c 87       	std	Y+12, r25	; 0x0c
    310a:	80 91 9f 00 	lds	r24, 0x009F
    310e:	8d 87       	std	Y+13, r24	; 0x0d
    3110:	90 91 a0 00 	lds	r25, 0x00A0
    3114:	9e 87       	std	Y+14, r25	; 0x0e
    3116:	80 91 a1 00 	lds	r24, 0x00A1
    311a:	8f 87       	std	Y+15, r24	; 0x0f
    311c:	90 91 a2 00 	lds	r25, 0x00A2
    3120:	98 8b       	std	Y+16, r25	; 0x10
    3122:	80 91 a4 00 	lds	r24, 0x00A4
    3126:	89 83       	std	Y+1, r24	; 0x01
    3128:	90 91 a5 00 	lds	r25, 0x00A5
    312c:	9a 83       	std	Y+2, r25	; 0x02
    312e:	80 91 a6 00 	lds	r24, 0x00A6
    3132:	8b 83       	std	Y+3, r24	; 0x03
    3134:	90 91 a7 00 	lds	r25, 0x00A7
    3138:	9c 83       	std	Y+4, r25	; 0x04
    313a:	80 91 a8 00 	lds	r24, 0x00A8
    313e:	8d 83       	std	Y+5, r24	; 0x05
    3140:	90 91 a9 00 	lds	r25, 0x00A9
    3144:	9e 83       	std	Y+6, r25	; 0x06
    3146:	80 91 aa 00 	lds	r24, 0x00AA
    314a:	8f 83       	std	Y+7, r24	; 0x07
    314c:	90 91 ab 00 	lds	r25, 0x00AB
    3150:	98 87       	std	Y+8, r25	; 0x08
    3152:	89 85       	ldd	r24, Y+9	; 0x09
    3154:	99 81       	ldd	r25, Y+1	; 0x01
    3156:	89 17       	cp	r24, r25
    3158:	b9 f5       	brne	.+110    	; 0x31c8 <Wait_ms+0x2ea>
    315a:	8a 85       	ldd	r24, Y+10	; 0x0a
    315c:	9a 81       	ldd	r25, Y+2	; 0x02
    315e:	89 17       	cp	r24, r25
    3160:	99 f5       	brne	.+102    	; 0x31c8 <Wait_ms+0x2ea>
    3162:	8b 85       	ldd	r24, Y+11	; 0x0b
    3164:	9b 81       	ldd	r25, Y+3	; 0x03
    3166:	89 17       	cp	r24, r25
    3168:	79 f5       	brne	.+94     	; 0x31c8 <Wait_ms+0x2ea>
    316a:	8c 85       	ldd	r24, Y+12	; 0x0c
    316c:	9c 81       	ldd	r25, Y+4	; 0x04
    316e:	89 17       	cp	r24, r25
    3170:	59 f5       	brne	.+86     	; 0x31c8 <Wait_ms+0x2ea>
    3172:	8d 85       	ldd	r24, Y+13	; 0x0d
    3174:	9d 81       	ldd	r25, Y+5	; 0x05
    3176:	89 17       	cp	r24, r25
    3178:	39 f5       	brne	.+78     	; 0x31c8 <Wait_ms+0x2ea>
    317a:	8e 85       	ldd	r24, Y+14	; 0x0e
    317c:	9e 81       	ldd	r25, Y+6	; 0x06
    317e:	89 17       	cp	r24, r25
    3180:	19 f5       	brne	.+70     	; 0x31c8 <Wait_ms+0x2ea>
    3182:	8f 85       	ldd	r24, Y+15	; 0x0f
    3184:	9f 81       	ldd	r25, Y+7	; 0x07
    3186:	89 17       	cp	r24, r25
    3188:	f9 f4       	brne	.+62     	; 0x31c8 <Wait_ms+0x2ea>
    318a:	88 89       	ldd	r24, Y+16	; 0x10
    318c:	98 85       	ldd	r25, Y+8	; 0x08
    318e:	89 17       	cp	r24, r25
    3190:	d9 f4       	brne	.+54     	; 0x31c8 <Wait_ms+0x2ea>
	{

		if(g_callBackPtr2 != NULL_PTR)
    3192:	80 91 94 00 	lds	r24, 0x0094
    3196:	90 91 95 00 	lds	r25, 0x0095
    319a:	00 97       	sbiw	r24, 0x00	; 0
    319c:	29 f0       	breq	.+10     	; 0x31a8 <Wait_ms+0x2ca>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr2)();
    319e:	e0 91 94 00 	lds	r30, 0x0094
    31a2:	f0 91 95 00 	lds	r31, 0x0095
    31a6:	09 95       	icall
			/* another method to call the function using pointer to function g_callBackPtr(); */
		}

		count=0;
    31a8:	10 92 9b 00 	sts	0x009B, r1
    31ac:	10 92 9c 00 	sts	0x009C, r1
    31b0:	10 92 9d 00 	sts	0x009D, r1
    31b4:	10 92 9e 00 	sts	0x009E, r1
    31b8:	10 92 9f 00 	sts	0x009F, r1
    31bc:	10 92 a0 00 	sts	0x00A0, r1
    31c0:	10 92 a1 00 	sts	0x00A1, r1
    31c4:	10 92 a2 00 	sts	0x00A2, r1

	}

}
    31c8:	eb 96       	adiw	r28, 0x3b	; 59
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
    31d4:	cf 91       	pop	r28
    31d6:	df 91       	pop	r29
    31d8:	08 95       	ret

000031da <Dely_ms_service>:



void Dely_ms_service(t_type timer,uint64_t time_MS,void(*ptr_display)(void))
{
    31da:	ef 92       	push	r14
    31dc:	ff 92       	push	r15
    31de:	0f 93       	push	r16
    31e0:	1f 93       	push	r17
    31e2:	df 93       	push	r29
    31e4:	cf 93       	push	r28
    31e6:	cd b7       	in	r28, 0x3d	; 61
    31e8:	de b7       	in	r29, 0x3e	; 62
    31ea:	2b 97       	sbiw	r28, 0x0b	; 11
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	89 83       	std	Y+1, r24	; 0x01
    31f8:	0a 83       	std	Y+2, r16	; 0x02
    31fa:	1b 83       	std	Y+3, r17	; 0x03
    31fc:	2c 83       	std	Y+4, r18	; 0x04
    31fe:	3d 83       	std	Y+5, r19	; 0x05
    3200:	4e 83       	std	Y+6, r20	; 0x06
    3202:	5f 83       	std	Y+7, r21	; 0x07
    3204:	68 87       	std	Y+8, r22	; 0x08
    3206:	79 87       	std	Y+9, r23	; 0x09
    3208:	fb 86       	std	Y+11, r15	; 0x0b
    320a:	ea 86       	std	Y+10, r14	; 0x0a


	g_time_MS = time_MS;
    320c:	8a 81       	ldd	r24, Y+2	; 0x02
    320e:	80 93 a4 00 	sts	0x00A4, r24
    3212:	8b 81       	ldd	r24, Y+3	; 0x03
    3214:	80 93 a5 00 	sts	0x00A5, r24
    3218:	8c 81       	ldd	r24, Y+4	; 0x04
    321a:	80 93 a6 00 	sts	0x00A6, r24
    321e:	8d 81       	ldd	r24, Y+5	; 0x05
    3220:	80 93 a7 00 	sts	0x00A7, r24
    3224:	8e 81       	ldd	r24, Y+6	; 0x06
    3226:	80 93 a8 00 	sts	0x00A8, r24
    322a:	8f 81       	ldd	r24, Y+7	; 0x07
    322c:	80 93 a9 00 	sts	0x00A9, r24
    3230:	88 85       	ldd	r24, Y+8	; 0x08
    3232:	80 93 aa 00 	sts	0x00AA, r24
    3236:	89 85       	ldd	r24, Y+9	; 0x09
    3238:	80 93 ab 00 	sts	0x00AB, r24
	g_callBackPtr = Wait_ms;                //interrupt call
    323c:	8f e6       	ldi	r24, 0x6F	; 111
    323e:	97 e1       	ldi	r25, 0x17	; 23
    3240:	90 93 93 00 	sts	0x0093, r25
    3244:	80 93 92 00 	sts	0x0092, r24

	g_callBackPtr2=ptr_display;             //func call
    3248:	8a 85       	ldd	r24, Y+10	; 0x0a
    324a:	9b 85       	ldd	r25, Y+11	; 0x0b
    324c:	90 93 95 00 	sts	0x0095, r25
    3250:	80 93 94 00 	sts	0x0094, r24



}
    3254:	2b 96       	adiw	r28, 0x0b	; 11
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	cf 91       	pop	r28
    3262:	df 91       	pop	r29
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	08 95       	ret

0000326e <SPEED>:


void SPEED(void){
    326e:	df 93       	push	r29
    3270:	cf 93       	push	r28
    3272:	cd b7       	in	r28, 0x3d	; 61
    3274:	de b7       	in	r29, 0x3e	; 62


	//g_tick_on++;
	g_tick_off++;
    3276:	80 91 96 00 	lds	r24, 0x0096
    327a:	8f 5f       	subi	r24, 0xFF	; 255
    327c:	80 93 96 00 	sts	0x0096, r24
	if(g_tick_off == 100- duty_percentage)
    3280:	80 91 96 00 	lds	r24, 0x0096
    3284:	48 2f       	mov	r20, r24
    3286:	50 e0       	ldi	r21, 0x00	; 0
    3288:	80 91 a3 00 	lds	r24, 0x00A3
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	84 e6       	ldi	r24, 0x64	; 100
    3292:	90 e0       	ldi	r25, 0x00	; 0
    3294:	82 1b       	sub	r24, r18
    3296:	93 0b       	sbc	r25, r19
    3298:	48 17       	cp	r20, r24
    329a:	59 07       	cpc	r21, r25
    329c:	39 f4       	brne	.+14     	; 0x32ac <SPEED+0x3e>
	{
		PORTC|= (1<<PC0); //toggle led every 0.5 second
    329e:	a5 e3       	ldi	r26, 0x35	; 53
    32a0:	b0 e0       	ldi	r27, 0x00	; 0
    32a2:	e5 e3       	ldi	r30, 0x35	; 53
    32a4:	f0 e0       	ldi	r31, 0x00	; 0
    32a6:	80 81       	ld	r24, Z
    32a8:	81 60       	ori	r24, 0x01	; 1
    32aa:	8c 93       	st	X, r24
		//clear the tick counter again to count a new 0.5 second



	}
	if(g_tick_off ==  100 )
    32ac:	80 91 96 00 	lds	r24, 0x0096
    32b0:	84 36       	cpi	r24, 0x64	; 100
    32b2:	49 f4       	brne	.+18     	; 0x32c6 <SPEED+0x58>
	{
		PORTC  &=~ (1<<PC0); //toggle led every 0.5 second
    32b4:	a5 e3       	ldi	r26, 0x35	; 53
    32b6:	b0 e0       	ldi	r27, 0x00	; 0
    32b8:	e5 e3       	ldi	r30, 0x35	; 53
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	8e 7f       	andi	r24, 0xFE	; 254
    32c0:	8c 93       	st	X, r24
		//DIO_write(PORT_C,PIN0,Toggle);
		g_tick_off = 0; //clear the tick counter again to count a new 0.5 second
    32c2:	10 92 96 00 	sts	0x0096, r1
	}


}
    32c6:	cf 91       	pop	r28
    32c8:	df 91       	pop	r29
    32ca:	08 95       	ret

000032cc <TIMER_PWM>:


void TIMER_PWM (uint8_t timer, uint8_t duty)//added
{
    32cc:	df 93       	push	r29
    32ce:	cf 93       	push	r28
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <TIMER_PWM+0x6>
    32d2:	0f 92       	push	r0
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	8a 83       	std	Y+2, r24	; 0x02
    32da:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t OCR_VALUE;
if (timer==Timer0)
    32dc:	8a 81       	ldd	r24, Y+2	; 0x02
    32de:	88 23       	and	r24, r24
    32e0:	e9 f4       	brne	.+58     	; 0x331c <TIMER_PWM+0x50>
{
	OCR_VALUE=(duty*T_MAX)/100;
    32e2:	8b 81       	ldd	r24, Y+3	; 0x03
    32e4:	48 2f       	mov	r20, r24
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	ca 01       	movw	r24, r20
    32ea:	9c 01       	movw	r18, r24
    32ec:	22 0f       	add	r18, r18
    32ee:	33 1f       	adc	r19, r19
    32f0:	c9 01       	movw	r24, r18
    32f2:	96 95       	lsr	r25
    32f4:	98 2f       	mov	r25, r24
    32f6:	88 27       	eor	r24, r24
    32f8:	97 95       	ror	r25
    32fa:	87 95       	ror	r24
    32fc:	82 1b       	sub	r24, r18
    32fe:	93 0b       	sbc	r25, r19
    3300:	84 0f       	add	r24, r20
    3302:	95 1f       	adc	r25, r21
    3304:	24 e6       	ldi	r18, 0x64	; 100
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	b9 01       	movw	r22, r18
    330a:	0e 94 ad 1b 	call	0x375a	; 0x375a <__divmodhi4>
    330e:	cb 01       	movw	r24, r22
    3310:	89 83       	std	Y+1, r24	; 0x01

	if (OCR_VALUE <=T_MAX )
	{ /*  Set the compare value IN  OCR0*/
		OCR0=OCR_VALUE; /*COMPARE VALUE IN OCR0*/
    3312:	ec e5       	ldi	r30, 0x5C	; 92
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	80 83       	st	Z, r24
    331a:	49 c0       	rjmp	.+146    	; 0x33ae <TIMER_PWM+0xe2>
	}


}
else if (timer==Timer2)
    331c:	8a 81       	ldd	r24, Y+2	; 0x02
    331e:	82 30       	cpi	r24, 0x02	; 2
    3320:	e9 f4       	brne	.+58     	; 0x335c <TIMER_PWM+0x90>
{
	OCR_VALUE=(duty*T_MAX)/100;
    3322:	8b 81       	ldd	r24, Y+3	; 0x03
    3324:	48 2f       	mov	r20, r24
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	ca 01       	movw	r24, r20
    332a:	9c 01       	movw	r18, r24
    332c:	22 0f       	add	r18, r18
    332e:	33 1f       	adc	r19, r19
    3330:	c9 01       	movw	r24, r18
    3332:	96 95       	lsr	r25
    3334:	98 2f       	mov	r25, r24
    3336:	88 27       	eor	r24, r24
    3338:	97 95       	ror	r25
    333a:	87 95       	ror	r24
    333c:	82 1b       	sub	r24, r18
    333e:	93 0b       	sbc	r25, r19
    3340:	84 0f       	add	r24, r20
    3342:	95 1f       	adc	r25, r21
    3344:	24 e6       	ldi	r18, 0x64	; 100
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	b9 01       	movw	r22, r18
    334a:	0e 94 ad 1b 	call	0x375a	; 0x375a <__divmodhi4>
    334e:	cb 01       	movw	r24, r22
    3350:	89 83       	std	Y+1, r24	; 0x01

	if (OCR_VALUE <=T_MAX )
	{ /*  Set the compare value IN  OCR2*/
		OCR2=OCR_VALUE; /*COMPARE VALUE IN OCR0*/
    3352:	e3 e4       	ldi	r30, 0x43	; 67
    3354:	f0 e0       	ldi	r31, 0x00	; 0
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	80 83       	st	Z, r24
    335a:	29 c0       	rjmp	.+82     	; 0x33ae <TIMER_PWM+0xe2>
	}

}
else if (timer==Timer1)
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	81 30       	cpi	r24, 0x01	; 1
    3360:	31 f5       	brne	.+76     	; 0x33ae <TIMER_PWM+0xe2>
{
	OCR_VALUE=(duty*T_MAX)/100;
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	48 2f       	mov	r20, r24
    3366:	50 e0       	ldi	r21, 0x00	; 0
    3368:	ca 01       	movw	r24, r20
    336a:	9c 01       	movw	r18, r24
    336c:	22 0f       	add	r18, r18
    336e:	33 1f       	adc	r19, r19
    3370:	c9 01       	movw	r24, r18
    3372:	96 95       	lsr	r25
    3374:	98 2f       	mov	r25, r24
    3376:	88 27       	eor	r24, r24
    3378:	97 95       	ror	r25
    337a:	87 95       	ror	r24
    337c:	82 1b       	sub	r24, r18
    337e:	93 0b       	sbc	r25, r19
    3380:	84 0f       	add	r24, r20
    3382:	95 1f       	adc	r25, r21
    3384:	24 e6       	ldi	r18, 0x64	; 100
    3386:	30 e0       	ldi	r19, 0x00	; 0
    3388:	b9 01       	movw	r22, r18
    338a:	0e 94 ad 1b 	call	0x375a	; 0x375a <__divmodhi4>
    338e:	cb 01       	movw	r24, r22
    3390:	89 83       	std	Y+1, r24	; 0x01

	if (OCR_VALUE <=T1_MAX )
	{ /*  Set the compare value IN  OCR1A*/
		OCR1B=OCR_VALUE;
    3392:	e8 e4       	ldi	r30, 0x48	; 72
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	88 2f       	mov	r24, r24
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
		OCR1A=OCR_VALUE; /*COMPARE VALUE IN OCR0*/
    33a0:	ea e4       	ldi	r30, 0x4A	; 74
    33a2:	f0 e0       	ldi	r31, 0x00	; 0
    33a4:	89 81       	ldd	r24, Y+1	; 0x01
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	91 83       	std	Z+1, r25	; 0x01
    33ac:	80 83       	st	Z, r24
	}


}

}
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	cf 91       	pop	r28
    33b6:	df 91       	pop	r29
    33b8:	08 95       	ret

000033ba <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
unit8 KeyPad_getPressedKey(void){
    33ba:	df 93       	push	r29
    33bc:	cf 93       	push	r28
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <KeyPad_getPressedKey+0x6>
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62

	volatile unit8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    33c4:	19 82       	std	Y+1, r1	; 0x01
    33c6:	4d c0       	rjmp	.+154    	; 0x3462 <KeyPad_getPressedKey+0xa8>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00100000<<col) ;
    33c8:	e4 e3       	ldi	r30, 0x34	; 52
    33ca:	f0 e0       	ldi	r31, 0x00	; 0
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	80 e2       	ldi	r24, 0x20	; 32
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	02 c0       	rjmp	.+4      	; 0x33dc <KeyPad_getPressedKey+0x22>
    33d8:	88 0f       	add	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	2a 95       	dec	r18
    33de:	e2 f7       	brpl	.-8      	; 0x33d8 <KeyPad_getPressedKey+0x1e>
    33e0:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = ( ~(0b00100000<<col) &0xFC);
    33e2:	e5 e3       	ldi	r30, 0x35	; 53
    33e4:	f0 e0       	ldi	r31, 0x00	; 0
    33e6:	89 81       	ldd	r24, Y+1	; 0x01
    33e8:	28 2f       	mov	r18, r24
    33ea:	30 e0       	ldi	r19, 0x00	; 0
    33ec:	80 e2       	ldi	r24, 0x20	; 32
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	02 2e       	mov	r0, r18
    33f2:	02 c0       	rjmp	.+4      	; 0x33f8 <KeyPad_getPressedKey+0x3e>
    33f4:	88 0f       	add	r24, r24
    33f6:	99 1f       	adc	r25, r25
    33f8:	0a 94       	dec	r0
    33fa:	e2 f7       	brpl	.-8      	; 0x33f4 <KeyPad_getPressedKey+0x3a>
    33fc:	80 95       	com	r24
    33fe:	8c 7f       	andi	r24, 0xFC	; 252
    3400:	80 83       	st	Z, r24

			for(row=2;row<N_row+2;row++) /* loop for rows */
    3402:	82 e0       	ldi	r24, 0x02	; 2
    3404:	8a 83       	std	Y+2, r24	; 0x02
    3406:	27 c0       	rjmp	.+78     	; 0x3456 <KeyPad_getPressedKey+0x9c>
			{
				if(Pin_is_clear(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */
    3408:	e3 e3       	ldi	r30, 0x33	; 51
    340a:	f0 e0       	ldi	r31, 0x00	; 0
    340c:	80 81       	ld	r24, Z
    340e:	28 2f       	mov	r18, r24
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	8a 81       	ldd	r24, Y+2	; 0x02
    3414:	88 2f       	mov	r24, r24
    3416:	90 e0       	ldi	r25, 0x00	; 0
    3418:	a9 01       	movw	r20, r18
    341a:	02 c0       	rjmp	.+4      	; 0x3420 <KeyPad_getPressedKey+0x66>
    341c:	55 95       	asr	r21
    341e:	47 95       	ror	r20
    3420:	8a 95       	dec	r24
    3422:	e2 f7       	brpl	.-8      	; 0x341c <KeyPad_getPressedKey+0x62>
    3424:	ca 01       	movw	r24, r20
    3426:	81 70       	andi	r24, 0x01	; 1
    3428:	90 70       	andi	r25, 0x00	; 0
    342a:	00 97       	sbiw	r24, 0x00	; 0
    342c:	89 f4       	brne	.+34     	; 0x3450 <KeyPad_getPressedKey+0x96>
				{
					#if (N_col == 3)
						return (( (row-2)*N_col)+col+1);
    342e:	8a 81       	ldd	r24, Y+2	; 0x02
    3430:	28 2f       	mov	r18, r24
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	c9 01       	movw	r24, r18
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	82 0f       	add	r24, r18
    343c:	93 1f       	adc	r25, r19
    343e:	98 2f       	mov	r25, r24
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	89 0f       	add	r24, r25
    3444:	85 50       	subi	r24, 0x05	; 5

				}
			}
		}
	}	
}
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	cf 91       	pop	r28
    344c:	df 91       	pop	r29
    344e:	08 95       	ret
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = ( ~(0b00100000<<col) &0xFC);

			for(row=2;row<N_row+2;row++) /* loop for rows */
    3450:	8a 81       	ldd	r24, Y+2	; 0x02
    3452:	8f 5f       	subi	r24, 0xFF	; 255
    3454:	8a 83       	std	Y+2, r24	; 0x02
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	85 30       	cpi	r24, 0x05	; 5
    345a:	b0 f2       	brcs	.-84     	; 0x3408 <KeyPad_getPressedKey+0x4e>
unit8 KeyPad_getPressedKey(void){

	volatile unit8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	8f 5f       	subi	r24, 0xFF	; 255
    3460:	89 83       	std	Y+1, r24	; 0x01
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	83 30       	cpi	r24, 0x03	; 3
    3466:	08 f4       	brcc	.+2      	; 0x346a <KeyPad_getPressedKey+0xb0>
    3468:	af cf       	rjmp	.-162    	; 0x33c8 <KeyPad_getPressedKey+0xe>
    346a:	ac cf       	rjmp	.-168    	; 0x33c4 <KeyPad_getPressedKey+0xa>

0000346c <main>:
#include"keypad.h"
#include"LCD.h"
#include"Timers.h"


int main(void){
    346c:	df 93       	push	r29
    346e:	cf 93       	push	r28
    3470:	cd b7       	in	r28, 0x3d	; 61
    3472:	de b7       	in	r29, 0x3e	; 62
    3474:	2f 97       	sbiw	r28, 0x0f	; 15
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
	DDRD&=0xF8; /*pin PD0&PD1&PD2 as input*/
    3480:	a1 e3       	ldi	r26, 0x31	; 49
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	e1 e3       	ldi	r30, 0x31	; 49
    3486:	f0 e0       	ldi	r31, 0x00	; 0
    3488:	80 81       	ld	r24, Z
    348a:	88 7f       	andi	r24, 0xF8	; 248
    348c:	8c 93       	st	X, r24
    DDRB=0;
    348e:	e7 e3       	ldi	r30, 0x37	; 55
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	10 82       	st	Z, r1
	unit8 num=0;
    3494:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_init();
    3496:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_init>
	//timer_init();
	UART_init();
    349a:	0e 94 01 1b 	call	0x3602	; 0x3602 <UART_init>
	LCD_displayStrRowCol(0,0,"Speed is: ");
    349e:	20 e6       	ldi	r18, 0x60	; 96
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	80 e0       	ldi	r24, 0x00	; 0
    34a4:	60 e0       	ldi	r22, 0x00	; 0
    34a6:	a9 01       	movw	r20, r18
    34a8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <LCD_displayStrRowCol>

	while(1){
		// UART_sendByte(const unit8 data);

		num=KeyPad_getPressedKey();
    34ac:	0e 94 dd 19 	call	0x33ba	; 0x33ba <KeyPad_getPressedKey>
    34b0:	8f 87       	std	Y+15, r24	; 0x0f
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	a0 ef       	ldi	r26, 0xF0	; 240
    34b8:	b1 e4       	ldi	r27, 0x41	; 65
    34ba:	8b 87       	std	Y+11, r24	; 0x0b
    34bc:	9c 87       	std	Y+12, r25	; 0x0c
    34be:	ad 87       	std	Y+13, r26	; 0x0d
    34c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    34c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    34c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    34c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	4a e7       	ldi	r20, 0x7A	; 122
    34d0:	53 e4       	ldi	r21, 0x43	; 67
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	8f 83       	std	Y+7, r24	; 0x07
    34dc:	98 87       	std	Y+8, r25	; 0x08
    34de:	a9 87       	std	Y+9, r26	; 0x09
    34e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    34e2:	6f 81       	ldd	r22, Y+7	; 0x07
    34e4:	78 85       	ldd	r23, Y+8	; 0x08
    34e6:	89 85       	ldd	r24, Y+9	; 0x09
    34e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 e8       	ldi	r20, 0x80	; 128
    34f0:	5f e3       	ldi	r21, 0x3F	; 63
    34f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34f6:	88 23       	and	r24, r24
    34f8:	2c f4       	brge	.+10     	; 0x3504 <main+0x98>
		__ticks = 1;
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	9e 83       	std	Y+6, r25	; 0x06
    3500:	8d 83       	std	Y+5, r24	; 0x05
    3502:	3f c0       	rjmp	.+126    	; 0x3582 <main+0x116>
	else if (__tmp > 65535)
    3504:	6f 81       	ldd	r22, Y+7	; 0x07
    3506:	78 85       	ldd	r23, Y+8	; 0x08
    3508:	89 85       	ldd	r24, Y+9	; 0x09
    350a:	9a 85       	ldd	r25, Y+10	; 0x0a
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	3f ef       	ldi	r19, 0xFF	; 255
    3510:	4f e7       	ldi	r20, 0x7F	; 127
    3512:	57 e4       	ldi	r21, 0x47	; 71
    3514:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3518:	18 16       	cp	r1, r24
    351a:	4c f5       	brge	.+82     	; 0x356e <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    351c:	6b 85       	ldd	r22, Y+11	; 0x0b
    351e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3520:	8d 85       	ldd	r24, Y+13	; 0x0d
    3522:	9e 85       	ldd	r25, Y+14	; 0x0e
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	40 e2       	ldi	r20, 0x20	; 32
    352a:	51 e4       	ldi	r21, 0x41	; 65
    352c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	bc 01       	movw	r22, r24
    3536:	cd 01       	movw	r24, r26
    3538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    353c:	dc 01       	movw	r26, r24
    353e:	cb 01       	movw	r24, r22
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	0f c0       	rjmp	.+30     	; 0x3564 <main+0xf8>
    3546:	89 e1       	ldi	r24, 0x19	; 25
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	9c 83       	std	Y+4, r25	; 0x04
    354c:	8b 83       	std	Y+3, r24	; 0x03
    354e:	8b 81       	ldd	r24, Y+3	; 0x03
    3550:	9c 81       	ldd	r25, Y+4	; 0x04
    3552:	01 97       	sbiw	r24, 0x01	; 1
    3554:	f1 f7       	brne	.-4      	; 0x3552 <main+0xe6>
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    355a:	8d 81       	ldd	r24, Y+5	; 0x05
    355c:	9e 81       	ldd	r25, Y+6	; 0x06
    355e:	01 97       	sbiw	r24, 0x01	; 1
    3560:	9e 83       	std	Y+6, r25	; 0x06
    3562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3564:	8d 81       	ldd	r24, Y+5	; 0x05
    3566:	9e 81       	ldd	r25, Y+6	; 0x06
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	69 f7       	brne	.-38     	; 0x3546 <main+0xda>
    356c:	14 c0       	rjmp	.+40     	; 0x3596 <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    356e:	6f 81       	ldd	r22, Y+7	; 0x07
    3570:	78 85       	ldd	r23, Y+8	; 0x08
    3572:	89 85       	ldd	r24, Y+9	; 0x09
    3574:	9a 85       	ldd	r25, Y+10	; 0x0a
    3576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	9e 83       	std	Y+6, r25	; 0x06
    3580:	8d 83       	std	Y+5, r24	; 0x05
    3582:	8d 81       	ldd	r24, Y+5	; 0x05
    3584:	9e 81       	ldd	r25, Y+6	; 0x06
    3586:	9a 83       	std	Y+2, r25	; 0x02
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	89 81       	ldd	r24, Y+1	; 0x01
    358c:	9a 81       	ldd	r25, Y+2	; 0x02
    358e:	01 97       	sbiw	r24, 0x01	; 1
    3590:	f1 f7       	brne	.-4      	; 0x358e <main+0x122>
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(30);
		if(PINB&(1<<PB2))
    3596:	e6 e3       	ldi	r30, 0x36	; 54
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	88 2f       	mov	r24, r24
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	84 70       	andi	r24, 0x04	; 4
    35a2:	90 70       	andi	r25, 0x00	; 0
    35a4:	00 97       	sbiw	r24, 0x00	; 0
    35a6:	69 f0       	breq	.+26     	; 0x35c2 <main+0x156>
		{
			if(PINB&(1<<PB2))
    35a8:	e6 e3       	ldi	r30, 0x36	; 54
    35aa:	f0 e0       	ldi	r31, 0x00	; 0
    35ac:	80 81       	ld	r24, Z
    35ae:	88 2f       	mov	r24, r24
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	84 70       	andi	r24, 0x04	; 4
    35b4:	90 70       	andi	r25, 0x00	; 0
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	c9 f0       	breq	.+50     	; 0x35ec <main+0x180>
			   num++;
    35ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    35bc:	8f 5f       	subi	r24, 0xFF	; 255
    35be:	8f 87       	std	Y+15, r24	; 0x0f
    35c0:	15 c0       	rjmp	.+42     	; 0x35ec <main+0x180>
		}
		else if(PINB&(1<<PB1))
    35c2:	e6 e3       	ldi	r30, 0x36	; 54
    35c4:	f0 e0       	ldi	r31, 0x00	; 0
    35c6:	80 81       	ld	r24, Z
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	82 70       	andi	r24, 0x02	; 2
    35ce:	90 70       	andi	r25, 0x00	; 0
    35d0:	00 97       	sbiw	r24, 0x00	; 0
    35d2:	61 f0       	breq	.+24     	; 0x35ec <main+0x180>
		{
			if(PINB&(1<<PD1))
    35d4:	e6 e3       	ldi	r30, 0x36	; 54
    35d6:	f0 e0       	ldi	r31, 0x00	; 0
    35d8:	80 81       	ld	r24, Z
    35da:	88 2f       	mov	r24, r24
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	82 70       	andi	r24, 0x02	; 2
    35e0:	90 70       	andi	r25, 0x00	; 0
    35e2:	00 97       	sbiw	r24, 0x00	; 0
    35e4:	19 f0       	breq	.+6      	; 0x35ec <main+0x180>
			  num--;
    35e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    35e8:	81 50       	subi	r24, 0x01	; 1
    35ea:	8f 87       	std	Y+15, r24	; 0x0f
		}
		LCD_gotoRawCol(0,10);
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	6a e0       	ldi	r22, 0x0A	; 10
    35f0:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <LCD_gotoRawCol>
		LCD_IntToStr(num);
    35f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35f6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <LCD_IntToStr>
		UART_sendByte(num);
    35fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    35fc:	0e 94 1b 1b 	call	0x3636	; 0x3636 <UART_sendByte>
    3600:	55 cf       	rjmp	.-342    	; 0x34ac <main+0x40>

00003602 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    360a:	eb e2       	ldi	r30, 0x2B	; 43
    360c:	f0 e0       	ldi	r31, 0x00	; 0
    360e:	82 e0       	ldi	r24, 0x02	; 2
    3610:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3612:	ea e2       	ldi	r30, 0x2A	; 42
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	88 e1       	ldi	r24, 0x18	; 24
    3618:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    361a:	e0 e4       	ldi	r30, 0x40	; 64
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	86 e8       	ldi	r24, 0x86	; 134
    3620:	80 83       	st	Z, r24
	
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    3622:	e0 e4       	ldi	r30, 0x40	; 64
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    3628:	e9 e2       	ldi	r30, 0x29	; 41
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	8c e0       	ldi	r24, 0x0C	; 12
    362e:	80 83       	st	Z, r24
}
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <UART_sendByte>:
	
void UART_sendByte(const unit8 data)
{
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	0f 92       	push	r0
    363c:	cd b7       	in	r28, 0x3d	; 61
    363e:	de b7       	in	r29, 0x3e	; 62
    3640:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(Pin_is_clear(UCSRA,UDRE)){}
    3642:	eb e2       	ldi	r30, 0x2B	; 43
    3644:	f0 e0       	ldi	r31, 0x00	; 0
    3646:	80 81       	ld	r24, Z
    3648:	88 2f       	mov	r24, r24
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	80 72       	andi	r24, 0x20	; 32
    364e:	90 70       	andi	r25, 0x00	; 0
    3650:	00 97       	sbiw	r24, 0x00	; 0
    3652:	b9 f3       	breq	.-18     	; 0x3642 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
    3654:	ec e2       	ldi	r30, 0x2C	; 44
    3656:	f0 e0       	ldi	r31, 0x00	; 0
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}
    365c:	0f 90       	pop	r0
    365e:	cf 91       	pop	r28
    3660:	df 91       	pop	r29
    3662:	08 95       	ret

00003664 <UART_recieveByte>:

unit8 UART_recieveByte(void)
{
    3664:	df 93       	push	r29
    3666:	cf 93       	push	r28
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(Pin_is_clear(UCSRA,RXC)){}
    366c:	eb e2       	ldi	r30, 0x2B	; 43
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	80 81       	ld	r24, Z
    3672:	88 23       	and	r24, r24
    3674:	dc f7       	brge	.-10     	; 0x366c <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
    3676:	ec e2       	ldi	r30, 0x2C	; 44
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	80 81       	ld	r24, Z
}
    367c:	cf 91       	pop	r28
    367e:	df 91       	pop	r29
    3680:	08 95       	ret

00003682 <UART_sendString>:

void UART_sendString(const unit8 *Str)
{
    3682:	df 93       	push	r29
    3684:	cf 93       	push	r28
    3686:	00 d0       	rcall	.+0      	; 0x3688 <UART_sendString+0x6>
    3688:	0f 92       	push	r0
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
    368e:	9b 83       	std	Y+3, r25	; 0x03
    3690:	8a 83       	std	Y+2, r24	; 0x02
	unit8 i = 0;
    3692:	19 82       	std	Y+1, r1	; 0x01
    3694:	0e c0       	rjmp	.+28     	; 0x36b2 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	28 2f       	mov	r18, r24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	8a 81       	ldd	r24, Y+2	; 0x02
    369e:	9b 81       	ldd	r25, Y+3	; 0x03
    36a0:	fc 01       	movw	r30, r24
    36a2:	e2 0f       	add	r30, r18
    36a4:	f3 1f       	adc	r31, r19
    36a6:	80 81       	ld	r24, Z
    36a8:	0e 94 1b 1b 	call	0x3636	; 0x3636 <UART_sendByte>
		i++;
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	8f 5f       	subi	r24, 0xFF	; 255
    36b0:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const unit8 *Str)
{
	unit8 i = 0;
	while(Str[i] != '\0')
    36b2:	89 81       	ldd	r24, Y+1	; 0x01
    36b4:	28 2f       	mov	r18, r24
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ba:	9b 81       	ldd	r25, Y+3	; 0x03
    36bc:	fc 01       	movw	r30, r24
    36be:	e2 0f       	add	r30, r18
    36c0:	f3 1f       	adc	r31, r19
    36c2:	80 81       	ld	r24, Z
    36c4:	88 23       	and	r24, r24
    36c6:	39 f7       	brne	.-50     	; 0x3696 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	08 95       	ret

000036d4 <UART_receiveString>:

void UART_receiveString(unit8 *Str)
{
    36d4:	0f 93       	push	r16
    36d6:	1f 93       	push	r17
    36d8:	df 93       	push	r29
    36da:	cf 93       	push	r28
    36dc:	00 d0       	rcall	.+0      	; 0x36de <UART_receiveString+0xa>
    36de:	0f 92       	push	r0
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	9b 83       	std	Y+3, r25	; 0x03
    36e6:	8a 83       	std	Y+2, r24	; 0x02
	unit8 i = 0;
    36e8:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	28 2f       	mov	r18, r24
    36ee:	30 e0       	ldi	r19, 0x00	; 0
    36f0:	8a 81       	ldd	r24, Y+2	; 0x02
    36f2:	9b 81       	ldd	r25, Y+3	; 0x03
    36f4:	8c 01       	movw	r16, r24
    36f6:	02 0f       	add	r16, r18
    36f8:	13 1f       	adc	r17, r19
    36fa:	0e 94 32 1b 	call	0x3664	; 0x3664 <UART_recieveByte>
    36fe:	f8 01       	movw	r30, r16
    3700:	80 83       	st	Z, r24
    3702:	0f c0       	rjmp	.+30     	; 0x3722 <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	8f 5f       	subi	r24, 0xFF	; 255
    3708:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	28 2f       	mov	r18, r24
    370e:	30 e0       	ldi	r19, 0x00	; 0
    3710:	8a 81       	ldd	r24, Y+2	; 0x02
    3712:	9b 81       	ldd	r25, Y+3	; 0x03
    3714:	8c 01       	movw	r16, r24
    3716:	02 0f       	add	r16, r18
    3718:	13 1f       	adc	r17, r19
    371a:	0e 94 32 1b 	call	0x3664	; 0x3664 <UART_recieveByte>
    371e:	f8 01       	movw	r30, r16
    3720:	80 83       	st	Z, r24

void UART_receiveString(unit8 *Str)
{
	unit8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	28 2f       	mov	r18, r24
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	8a 81       	ldd	r24, Y+2	; 0x02
    372a:	9b 81       	ldd	r25, Y+3	; 0x03
    372c:	fc 01       	movw	r30, r24
    372e:	e2 0f       	add	r30, r18
    3730:	f3 1f       	adc	r31, r19
    3732:	80 81       	ld	r24, Z
    3734:	83 32       	cpi	r24, 0x23	; 35
    3736:	31 f7       	brne	.-52     	; 0x3704 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    3738:	89 81       	ldd	r24, Y+1	; 0x01
    373a:	28 2f       	mov	r18, r24
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	9b 81       	ldd	r25, Y+3	; 0x03
    3742:	fc 01       	movw	r30, r24
    3744:	e2 0f       	add	r30, r18
    3746:	f3 1f       	adc	r31, r19
    3748:	10 82       	st	Z, r1
}
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	0f 90       	pop	r0
    3750:	cf 91       	pop	r28
    3752:	df 91       	pop	r29
    3754:	1f 91       	pop	r17
    3756:	0f 91       	pop	r16
    3758:	08 95       	ret

0000375a <__divmodhi4>:
    375a:	97 fb       	bst	r25, 7
    375c:	09 2e       	mov	r0, r25
    375e:	07 26       	eor	r0, r23
    3760:	0a d0       	rcall	.+20     	; 0x3776 <__divmodhi4_neg1>
    3762:	77 fd       	sbrc	r23, 7
    3764:	04 d0       	rcall	.+8      	; 0x376e <__divmodhi4_neg2>
    3766:	0c d0       	rcall	.+24     	; 0x3780 <__udivmodhi4>
    3768:	06 d0       	rcall	.+12     	; 0x3776 <__divmodhi4_neg1>
    376a:	00 20       	and	r0, r0
    376c:	1a f4       	brpl	.+6      	; 0x3774 <__divmodhi4_exit>

0000376e <__divmodhi4_neg2>:
    376e:	70 95       	com	r23
    3770:	61 95       	neg	r22
    3772:	7f 4f       	sbci	r23, 0xFF	; 255

00003774 <__divmodhi4_exit>:
    3774:	08 95       	ret

00003776 <__divmodhi4_neg1>:
    3776:	f6 f7       	brtc	.-4      	; 0x3774 <__divmodhi4_exit>
    3778:	90 95       	com	r25
    377a:	81 95       	neg	r24
    377c:	9f 4f       	sbci	r25, 0xFF	; 255
    377e:	08 95       	ret

00003780 <__udivmodhi4>:
    3780:	aa 1b       	sub	r26, r26
    3782:	bb 1b       	sub	r27, r27
    3784:	51 e1       	ldi	r21, 0x11	; 17
    3786:	07 c0       	rjmp	.+14     	; 0x3796 <__udivmodhi4_ep>

00003788 <__udivmodhi4_loop>:
    3788:	aa 1f       	adc	r26, r26
    378a:	bb 1f       	adc	r27, r27
    378c:	a6 17       	cp	r26, r22
    378e:	b7 07       	cpc	r27, r23
    3790:	10 f0       	brcs	.+4      	; 0x3796 <__udivmodhi4_ep>
    3792:	a6 1b       	sub	r26, r22
    3794:	b7 0b       	sbc	r27, r23

00003796 <__udivmodhi4_ep>:
    3796:	88 1f       	adc	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	5a 95       	dec	r21
    379c:	a9 f7       	brne	.-22     	; 0x3788 <__udivmodhi4_loop>
    379e:	80 95       	com	r24
    37a0:	90 95       	com	r25
    37a2:	bc 01       	movw	r22, r24
    37a4:	cd 01       	movw	r24, r26
    37a6:	08 95       	ret

000037a8 <__prologue_saves__>:
    37a8:	2f 92       	push	r2
    37aa:	3f 92       	push	r3
    37ac:	4f 92       	push	r4
    37ae:	5f 92       	push	r5
    37b0:	6f 92       	push	r6
    37b2:	7f 92       	push	r7
    37b4:	8f 92       	push	r8
    37b6:	9f 92       	push	r9
    37b8:	af 92       	push	r10
    37ba:	bf 92       	push	r11
    37bc:	cf 92       	push	r12
    37be:	df 92       	push	r13
    37c0:	ef 92       	push	r14
    37c2:	ff 92       	push	r15
    37c4:	0f 93       	push	r16
    37c6:	1f 93       	push	r17
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	ca 1b       	sub	r28, r26
    37d2:	db 0b       	sbc	r29, r27
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	09 94       	ijmp

000037e0 <__epilogue_restores__>:
    37e0:	2a 88       	ldd	r2, Y+18	; 0x12
    37e2:	39 88       	ldd	r3, Y+17	; 0x11
    37e4:	48 88       	ldd	r4, Y+16	; 0x10
    37e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    37e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    37ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    37ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    37ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    37f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    37f2:	b9 84       	ldd	r11, Y+9	; 0x09
    37f4:	c8 84       	ldd	r12, Y+8	; 0x08
    37f6:	df 80       	ldd	r13, Y+7	; 0x07
    37f8:	ee 80       	ldd	r14, Y+6	; 0x06
    37fa:	fd 80       	ldd	r15, Y+5	; 0x05
    37fc:	0c 81       	ldd	r16, Y+4	; 0x04
    37fe:	1b 81       	ldd	r17, Y+3	; 0x03
    3800:	aa 81       	ldd	r26, Y+2	; 0x02
    3802:	b9 81       	ldd	r27, Y+1	; 0x01
    3804:	ce 0f       	add	r28, r30
    3806:	d1 1d       	adc	r29, r1
    3808:	0f b6       	in	r0, 0x3f	; 63
    380a:	f8 94       	cli
    380c:	de bf       	out	0x3e, r29	; 62
    380e:	0f be       	out	0x3f, r0	; 63
    3810:	cd bf       	out	0x3d, r28	; 61
    3812:	ed 01       	movw	r28, r26
    3814:	08 95       	ret

00003816 <itoa>:
    3816:	fb 01       	movw	r30, r22
    3818:	9f 01       	movw	r18, r30
    381a:	e8 94       	clt
    381c:	42 30       	cpi	r20, 0x02	; 2
    381e:	c4 f0       	brlt	.+48     	; 0x3850 <itoa+0x3a>
    3820:	45 32       	cpi	r20, 0x25	; 37
    3822:	b4 f4       	brge	.+44     	; 0x3850 <itoa+0x3a>
    3824:	4a 30       	cpi	r20, 0x0A	; 10
    3826:	29 f4       	brne	.+10     	; 0x3832 <itoa+0x1c>
    3828:	97 fb       	bst	r25, 7
    382a:	1e f4       	brtc	.+6      	; 0x3832 <itoa+0x1c>
    382c:	90 95       	com	r25
    382e:	81 95       	neg	r24
    3830:	9f 4f       	sbci	r25, 0xFF	; 255
    3832:	64 2f       	mov	r22, r20
    3834:	77 27       	eor	r23, r23
    3836:	0e 94 c0 1b 	call	0x3780	; 0x3780 <__udivmodhi4>
    383a:	80 5d       	subi	r24, 0xD0	; 208
    383c:	8a 33       	cpi	r24, 0x3A	; 58
    383e:	0c f0       	brlt	.+2      	; 0x3842 <itoa+0x2c>
    3840:	89 5d       	subi	r24, 0xD9	; 217
    3842:	81 93       	st	Z+, r24
    3844:	cb 01       	movw	r24, r22
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	a1 f7       	brne	.-24     	; 0x3832 <itoa+0x1c>
    384a:	16 f4       	brtc	.+4      	; 0x3850 <itoa+0x3a>
    384c:	5d e2       	ldi	r21, 0x2D	; 45
    384e:	51 93       	st	Z+, r21
    3850:	10 82       	st	Z, r1
    3852:	c9 01       	movw	r24, r18
    3854:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <strrev>

00003858 <strrev>:
    3858:	dc 01       	movw	r26, r24
    385a:	fc 01       	movw	r30, r24
    385c:	67 2f       	mov	r22, r23
    385e:	71 91       	ld	r23, Z+
    3860:	77 23       	and	r23, r23
    3862:	e1 f7       	brne	.-8      	; 0x385c <strrev+0x4>
    3864:	32 97       	sbiw	r30, 0x02	; 2
    3866:	04 c0       	rjmp	.+8      	; 0x3870 <strrev+0x18>
    3868:	7c 91       	ld	r23, X
    386a:	6d 93       	st	X+, r22
    386c:	70 83       	st	Z, r23
    386e:	62 91       	ld	r22, -Z
    3870:	ae 17       	cp	r26, r30
    3872:	bf 07       	cpc	r27, r31
    3874:	c8 f3       	brcs	.-14     	; 0x3868 <strrev+0x10>
    3876:	08 95       	ret

00003878 <_exit>:
    3878:	f8 94       	cli

0000387a <__stop_program>:
    387a:	ff cf       	rjmp	.-2      	; 0x387a <__stop_program>
